
AdaptiveCruiseControl_RTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006680  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000094  08006790  08006790  00016790  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006824  08006824  00020078  2**0
                  CONTENTS
  4 .ARM          00000000  08006824  08006824  00020078  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006824  08006824  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006824  08006824  00016824  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006828  08006828  00016828  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  0800682c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000120c  20000078  080068a4  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001284  080068a4  00021284  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   000133c9  00000000  00000000  000200a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003040  00000000  00000000  0003346a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001068  00000000  00000000  000364b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f30  00000000  00000000  00037518  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003d6e  00000000  00000000  00038448  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000135c7  00000000  00000000  0003c1b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00091c85  00000000  00000000  0004f77d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e1402  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004778  00000000  00000000  000e1454  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000078 	.word	0x20000078
 800012c:	00000000 	.word	0x00000000
 8000130:	08006778 	.word	0x08006778

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000007c 	.word	0x2000007c
 800014c:	08006778 	.word	0x08006778

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__aeabi_d2f>:
 80008ec:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80008f0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80008f4:	bf24      	itt	cs
 80008f6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80008fa:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80008fe:	d90d      	bls.n	800091c <__aeabi_d2f+0x30>
 8000900:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000904:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000908:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800090c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000910:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000914:	bf08      	it	eq
 8000916:	f020 0001 	biceq.w	r0, r0, #1
 800091a:	4770      	bx	lr
 800091c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000920:	d121      	bne.n	8000966 <__aeabi_d2f+0x7a>
 8000922:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000926:	bfbc      	itt	lt
 8000928:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 800092c:	4770      	bxlt	lr
 800092e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000932:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000936:	f1c2 0218 	rsb	r2, r2, #24
 800093a:	f1c2 0c20 	rsb	ip, r2, #32
 800093e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000942:	fa20 f002 	lsr.w	r0, r0, r2
 8000946:	bf18      	it	ne
 8000948:	f040 0001 	orrne.w	r0, r0, #1
 800094c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000950:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000954:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000958:	ea40 000c 	orr.w	r0, r0, ip
 800095c:	fa23 f302 	lsr.w	r3, r3, r2
 8000960:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000964:	e7cc      	b.n	8000900 <__aeabi_d2f+0x14>
 8000966:	ea7f 5362 	mvns.w	r3, r2, asr #21
 800096a:	d107      	bne.n	800097c <__aeabi_d2f+0x90>
 800096c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000970:	bf1e      	ittt	ne
 8000972:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000976:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 800097a:	4770      	bxne	lr
 800097c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000980:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000984:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000988:	4770      	bx	lr
 800098a:	bf00      	nop

0800098c <__gesf2>:
 800098c:	f04f 3cff 	mov.w	ip, #4294967295
 8000990:	e006      	b.n	80009a0 <__cmpsf2+0x4>
 8000992:	bf00      	nop

08000994 <__lesf2>:
 8000994:	f04f 0c01 	mov.w	ip, #1
 8000998:	e002      	b.n	80009a0 <__cmpsf2+0x4>
 800099a:	bf00      	nop

0800099c <__cmpsf2>:
 800099c:	f04f 0c01 	mov.w	ip, #1
 80009a0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009a4:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80009a8:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80009ac:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80009b0:	bf18      	it	ne
 80009b2:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80009b6:	d011      	beq.n	80009dc <__cmpsf2+0x40>
 80009b8:	b001      	add	sp, #4
 80009ba:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 80009be:	bf18      	it	ne
 80009c0:	ea90 0f01 	teqne	r0, r1
 80009c4:	bf58      	it	pl
 80009c6:	ebb2 0003 	subspl.w	r0, r2, r3
 80009ca:	bf88      	it	hi
 80009cc:	17c8      	asrhi	r0, r1, #31
 80009ce:	bf38      	it	cc
 80009d0:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 80009d4:	bf18      	it	ne
 80009d6:	f040 0001 	orrne.w	r0, r0, #1
 80009da:	4770      	bx	lr
 80009dc:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80009e0:	d102      	bne.n	80009e8 <__cmpsf2+0x4c>
 80009e2:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 80009e6:	d105      	bne.n	80009f4 <__cmpsf2+0x58>
 80009e8:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 80009ec:	d1e4      	bne.n	80009b8 <__cmpsf2+0x1c>
 80009ee:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 80009f2:	d0e1      	beq.n	80009b8 <__cmpsf2+0x1c>
 80009f4:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009f8:	4770      	bx	lr
 80009fa:	bf00      	nop

080009fc <__aeabi_cfrcmple>:
 80009fc:	4684      	mov	ip, r0
 80009fe:	4608      	mov	r0, r1
 8000a00:	4661      	mov	r1, ip
 8000a02:	e7ff      	b.n	8000a04 <__aeabi_cfcmpeq>

08000a04 <__aeabi_cfcmpeq>:
 8000a04:	b50f      	push	{r0, r1, r2, r3, lr}
 8000a06:	f7ff ffc9 	bl	800099c <__cmpsf2>
 8000a0a:	2800      	cmp	r0, #0
 8000a0c:	bf48      	it	mi
 8000a0e:	f110 0f00 	cmnmi.w	r0, #0
 8000a12:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000a14 <__aeabi_fcmpeq>:
 8000a14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a18:	f7ff fff4 	bl	8000a04 <__aeabi_cfcmpeq>
 8000a1c:	bf0c      	ite	eq
 8000a1e:	2001      	moveq	r0, #1
 8000a20:	2000      	movne	r0, #0
 8000a22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a26:	bf00      	nop

08000a28 <__aeabi_fcmplt>:
 8000a28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a2c:	f7ff ffea 	bl	8000a04 <__aeabi_cfcmpeq>
 8000a30:	bf34      	ite	cc
 8000a32:	2001      	movcc	r0, #1
 8000a34:	2000      	movcs	r0, #0
 8000a36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a3a:	bf00      	nop

08000a3c <__aeabi_fcmple>:
 8000a3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a40:	f7ff ffe0 	bl	8000a04 <__aeabi_cfcmpeq>
 8000a44:	bf94      	ite	ls
 8000a46:	2001      	movls	r0, #1
 8000a48:	2000      	movhi	r0, #0
 8000a4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4e:	bf00      	nop

08000a50 <__aeabi_fcmpge>:
 8000a50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a54:	f7ff ffd2 	bl	80009fc <__aeabi_cfrcmple>
 8000a58:	bf94      	ite	ls
 8000a5a:	2001      	movls	r0, #1
 8000a5c:	2000      	movhi	r0, #0
 8000a5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a62:	bf00      	nop

08000a64 <__aeabi_fcmpgt>:
 8000a64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a68:	f7ff ffc8 	bl	80009fc <__aeabi_cfrcmple>
 8000a6c:	bf34      	ite	cc
 8000a6e:	2001      	movcc	r0, #1
 8000a70:	2000      	movcs	r0, #0
 8000a72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a76:	bf00      	nop

08000a78 <DC_Motor_Init>:

#include "DC_MOT.h"


void DC_Motor_Init(void)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_1); //start PWM on TIM3 channel 1
 8000a7c:	2100      	movs	r1, #0
 8000a7e:	4807      	ldr	r0, [pc, #28]	; (8000a9c <DC_Motor_Init+0x24>)
 8000a80:	f002 f8ca 	bl	8002c18 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4,TIM_CHANNEL_1); //start PWM on TIM4 channel 1
 8000a84:	2100      	movs	r1, #0
 8000a86:	4806      	ldr	r0, [pc, #24]	; (8000aa0 <DC_Motor_Init+0x28>)
 8000a88:	f002 f8c6 	bl	8002c18 <HAL_TIM_PWM_Start>
	TIM3->CCR1 = 0;
 8000a8c:	4b05      	ldr	r3, [pc, #20]	; (8000aa4 <DC_Motor_Init+0x2c>)
 8000a8e:	2200      	movs	r2, #0
 8000a90:	635a      	str	r2, [r3, #52]	; 0x34
	TIM4->CCR1 = 0;
 8000a92:	4b05      	ldr	r3, [pc, #20]	; (8000aa8 <DC_Motor_Init+0x30>)
 8000a94:	2200      	movs	r2, #0
 8000a96:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000a98:	bf00      	nop
 8000a9a:	bd80      	pop	{r7, pc}
 8000a9c:	200003a8 	.word	0x200003a8
 8000aa0:	200003f0 	.word	0x200003f0
 8000aa4:	40000400 	.word	0x40000400
 8000aa8:	40000800 	.word	0x40000800

08000aac <DC_Motor_SetSpeed>:
void DC_Motor_SetSpeed(uint8_t dutyCycle)
{
 8000aac:	b480      	push	{r7}
 8000aae:	b083      	sub	sp, #12
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	71fb      	strb	r3, [r7, #7]
	TIM3->CCR1 = dutyCycle;
 8000ab6:	4a05      	ldr	r2, [pc, #20]	; (8000acc <DC_Motor_SetSpeed+0x20>)
 8000ab8:	79fb      	ldrb	r3, [r7, #7]
 8000aba:	6353      	str	r3, [r2, #52]	; 0x34
	TIM4->CCR1 = dutyCycle;
 8000abc:	4a04      	ldr	r2, [pc, #16]	; (8000ad0 <DC_Motor_SetSpeed+0x24>)
 8000abe:	79fb      	ldrb	r3, [r7, #7]
 8000ac0:	6353      	str	r3, [r2, #52]	; 0x34
}
 8000ac2:	bf00      	nop
 8000ac4:	370c      	adds	r7, #12
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	bc80      	pop	{r7}
 8000aca:	4770      	bx	lr
 8000acc:	40000400 	.word	0x40000400
 8000ad0:	40000800 	.word	0x40000800

08000ad4 <DC_Motor_STOP>:
	}
}


void DC_Motor_STOP(void)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	af00      	add	r7, sp, #0
	TIM3->CCR1 = 0;
 8000ad8:	4b07      	ldr	r3, [pc, #28]	; (8000af8 <DC_Motor_STOP+0x24>)
 8000ada:	2200      	movs	r2, #0
 8000adc:	635a      	str	r2, [r3, #52]	; 0x34
	TIM4->CCR1 = 0;
 8000ade:	4b07      	ldr	r3, [pc, #28]	; (8000afc <DC_Motor_STOP+0x28>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	635a      	str	r2, [r3, #52]	; 0x34
	HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_1); // Close TIM3
 8000ae4:	2100      	movs	r1, #0
 8000ae6:	4806      	ldr	r0, [pc, #24]	; (8000b00 <DC_Motor_STOP+0x2c>)
 8000ae8:	f002 f938 	bl	8002d5c <HAL_TIM_PWM_Stop>
	//HAL_GPIO_WritePin(GPIOA, ENA_PIN_6, GPIO_PIN_RESET);  //EN1 PIN ENABLE LOW
	HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_1);  //Close TIM4
 8000aec:	2100      	movs	r1, #0
 8000aee:	4805      	ldr	r0, [pc, #20]	; (8000b04 <DC_Motor_STOP+0x30>)
 8000af0:	f002 f934 	bl	8002d5c <HAL_TIM_PWM_Stop>
	//HAL_GPIO_WritePin(GPIOB, ENA_PIN_6, GPIO_PIN_RESET);  //EN1 PIN ENABLE LOW
}
 8000af4:	bf00      	nop
 8000af6:	bd80      	pop	{r7, pc}
 8000af8:	40000400 	.word	0x40000400
 8000afc:	40000800 	.word	0x40000800
 8000b00:	200003a8 	.word	0x200003a8
 8000b04:	200003f0 	.word	0x200003f0

08000b08 <H_HC05_Recieve_Polling>:
  * @brief  Receive from HC-05 module (Polling mode).
  * @param  Copy_u8_Char: Pointer to store received character
  * @retval HAL_StatusTypeDef: HAL status
  */
HAL_StatusTypeDef H_HC05_Recieve_Polling(uint8_t* Copy_u8_Char)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b084      	sub	sp, #16
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef Local_enumRetValue = HAL_OK;
 8000b10:	2300      	movs	r3, #0
 8000b12:	73fb      	strb	r3, [r7, #15]
    uint8_t Local_u8Counter = 0;
 8000b14:	2300      	movs	r3, #0
 8000b16:	73bb      	strb	r3, [r7, #14]

    Local_enumRetValue = HAL_UART_Receive(&HC05_UART_PORT, &RxData[0], HC05_RecCharNum, 100);
 8000b18:	2364      	movs	r3, #100	; 0x64
 8000b1a:	2204      	movs	r2, #4
 8000b1c:	4910      	ldr	r1, [pc, #64]	; (8000b60 <H_HC05_Recieve_Polling+0x58>)
 8000b1e:	4811      	ldr	r0, [pc, #68]	; (8000b64 <H_HC05_Recieve_Polling+0x5c>)
 8000b20:	f003 fb19 	bl	8004156 <HAL_UART_Receive>
 8000b24:	4603      	mov	r3, r0
 8000b26:	73fb      	strb	r3, [r7, #15]
    if(Local_enumRetValue != HAL_OK)
 8000b28:	7bfb      	ldrb	r3, [r7, #15]
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d002      	beq.n	8000b34 <H_HC05_Recieve_Polling+0x2c>
    {
        Local_enumRetValue = HAL_ERROR;
 8000b2e:	2301      	movs	r3, #1
 8000b30:	73fb      	strb	r3, [r7, #15]
 8000b32:	e00f      	b.n	8000b54 <H_HC05_Recieve_Polling+0x4c>
    }
    else
    {
        /* Copy received characters to the buffer */
        for(Local_u8Counter = 0; Local_u8Counter < HC05_RecCharNum; Local_u8Counter++)
 8000b34:	2300      	movs	r3, #0
 8000b36:	73bb      	strb	r3, [r7, #14]
 8000b38:	e009      	b.n	8000b4e <H_HC05_Recieve_Polling+0x46>
        {
            Copy_u8_Char[Local_u8Counter] = RxData[Local_u8Counter];
 8000b3a:	7bba      	ldrb	r2, [r7, #14]
 8000b3c:	7bbb      	ldrb	r3, [r7, #14]
 8000b3e:	6879      	ldr	r1, [r7, #4]
 8000b40:	440b      	add	r3, r1
 8000b42:	4907      	ldr	r1, [pc, #28]	; (8000b60 <H_HC05_Recieve_Polling+0x58>)
 8000b44:	5c8a      	ldrb	r2, [r1, r2]
 8000b46:	701a      	strb	r2, [r3, #0]
        for(Local_u8Counter = 0; Local_u8Counter < HC05_RecCharNum; Local_u8Counter++)
 8000b48:	7bbb      	ldrb	r3, [r7, #14]
 8000b4a:	3301      	adds	r3, #1
 8000b4c:	73bb      	strb	r3, [r7, #14]
 8000b4e:	7bbb      	ldrb	r3, [r7, #14]
 8000b50:	2b03      	cmp	r3, #3
 8000b52:	d9f2      	bls.n	8000b3a <H_HC05_Recieve_Polling+0x32>
        }
    }

    return Local_enumRetValue;
 8000b54:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b56:	4618      	mov	r0, r3
 8000b58:	3710      	adds	r7, #16
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	bd80      	pop	{r7, pc}
 8000b5e:	bf00      	nop
 8000b60:	20000094 	.word	0x20000094
 8000b64:	20000438 	.word	0x20000438

08000b68 <HAL_UART_RxCpltCallback>:
  * @brief  Callback function for UART Rx complete interrupt.
  * @param  huart: Pointer to UART handle
  * @retval None
  */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b082      	sub	sp, #8
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	6078      	str	r0, [r7, #4]
    if(huart->Instance == USART1)
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	4a05      	ldr	r2, [pc, #20]	; (8000b8c <HAL_UART_RxCpltCallback+0x24>)
 8000b76:	4293      	cmp	r3, r2
 8000b78:	d104      	bne.n	8000b84 <HAL_UART_RxCpltCallback+0x1c>
    {
        /* Re-enable interrupt receive */
        HAL_UART_Receive_IT(&HC05_UART_PORT, &RxData[0], HC05_RecCharNum);
 8000b7a:	2204      	movs	r2, #4
 8000b7c:	4904      	ldr	r1, [pc, #16]	; (8000b90 <HAL_UART_RxCpltCallback+0x28>)
 8000b7e:	4805      	ldr	r0, [pc, #20]	; (8000b94 <HAL_UART_RxCpltCallback+0x2c>)
 8000b80:	f003 fb7b 	bl	800427a <HAL_UART_Receive_IT>
    }
}
 8000b84:	bf00      	nop
 8000b86:	3708      	adds	r7, #8
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	bd80      	pop	{r7, pc}
 8000b8c:	40013800 	.word	0x40013800
 8000b90:	20000094 	.word	0x20000094
 8000b94:	20000438 	.word	0x20000438

08000b98 <HAL_TIM_IC_CaptureCallback>:

/**
 * @brief This function handles TIM1 capture compare interrupt.
 */
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	b083      	sub	sp, #12
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN voidTIM1_CC_IRQn 0 */

	if (State == 0) {
 8000ba0:	4b23      	ldr	r3, [pc, #140]	; (8000c30 <HAL_TIM_IC_CaptureCallback+0x98>)
 8000ba2:	781b      	ldrb	r3, [r3, #0]
 8000ba4:	b2db      	uxtb	r3, r3
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d11d      	bne.n	8000be6 <HAL_TIM_IC_CaptureCallback+0x4e>

		TIM1->CNT = 0x0;
 8000baa:	4b22      	ldr	r3, [pc, #136]	; (8000c34 <HAL_TIM_IC_CaptureCallback+0x9c>)
 8000bac:	2200      	movs	r2, #0
 8000bae:	625a      	str	r2, [r3, #36]	; 0x24
		TIM1->CCR1 = 0x0;
 8000bb0:	4b20      	ldr	r3, [pc, #128]	; (8000c34 <HAL_TIM_IC_CaptureCallback+0x9c>)
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	635a      	str	r2, [r3, #52]	; 0x34


		//Input Capture Edge Select falling edge
		__HAL_TIM_SET_CAPTUREPOLARITY(&htim1 ,TIM_CHANNEL_1 ,TIM_INPUTCHANNELPOLARITY_FALLING) ;
 8000bb6:	4b20      	ldr	r3, [pc, #128]	; (8000c38 <HAL_TIM_IC_CaptureCallback+0xa0>)
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	6a1a      	ldr	r2, [r3, #32]
 8000bbc:	4b1e      	ldr	r3, [pc, #120]	; (8000c38 <HAL_TIM_IC_CaptureCallback+0xa0>)
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	f022 020a 	bic.w	r2, r2, #10
 8000bc4:	621a      	str	r2, [r3, #32]
 8000bc6:	4b1c      	ldr	r3, [pc, #112]	; (8000c38 <HAL_TIM_IC_CaptureCallback+0xa0>)
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	6a1a      	ldr	r2, [r3, #32]
 8000bcc:	4b1a      	ldr	r3, [pc, #104]	; (8000c38 <HAL_TIM_IC_CaptureCallback+0xa0>)
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	f042 0202 	orr.w	r2, r2, #2
 8000bd4:	621a      	str	r2, [r3, #32]
		State++;
 8000bd6:	4b16      	ldr	r3, [pc, #88]	; (8000c30 <HAL_TIM_IC_CaptureCallback+0x98>)
 8000bd8:	781b      	ldrb	r3, [r3, #0]
 8000bda:	b2db      	uxtb	r3, r3
 8000bdc:	3301      	adds	r3, #1
 8000bde:	b2da      	uxtb	r2, r3
 8000be0:	4b13      	ldr	r3, [pc, #76]	; (8000c30 <HAL_TIM_IC_CaptureCallback+0x98>)
 8000be2:	701a      	strb	r2, [r3, #0]
	else {
		/*nothing**/
	}


}
 8000be4:	e01e      	b.n	8000c24 <HAL_TIM_IC_CaptureCallback+0x8c>
	else if (State == 1) {
 8000be6:	4b12      	ldr	r3, [pc, #72]	; (8000c30 <HAL_TIM_IC_CaptureCallback+0x98>)
 8000be8:	781b      	ldrb	r3, [r3, #0]
 8000bea:	b2db      	uxtb	r3, r3
 8000bec:	2b01      	cmp	r3, #1
 8000bee:	d119      	bne.n	8000c24 <HAL_TIM_IC_CaptureCallback+0x8c>
		TIMEON = TIM1->CCR1;
 8000bf0:	4b10      	ldr	r3, [pc, #64]	; (8000c34 <HAL_TIM_IC_CaptureCallback+0x9c>)
 8000bf2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000bf4:	b29a      	uxth	r2, r3
 8000bf6:	4b11      	ldr	r3, [pc, #68]	; (8000c3c <HAL_TIM_IC_CaptureCallback+0xa4>)
 8000bf8:	801a      	strh	r2, [r3, #0]
		__HAL_TIM_SET_CAPTUREPOLARITY(&htim1 ,TIM_CHANNEL_1 ,TIM_INPUTCHANNELPOLARITY_RISING) ;
 8000bfa:	4b0f      	ldr	r3, [pc, #60]	; (8000c38 <HAL_TIM_IC_CaptureCallback+0xa0>)
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	6a1a      	ldr	r2, [r3, #32]
 8000c00:	4b0d      	ldr	r3, [pc, #52]	; (8000c38 <HAL_TIM_IC_CaptureCallback+0xa0>)
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	f022 020a 	bic.w	r2, r2, #10
 8000c08:	621a      	str	r2, [r3, #32]
 8000c0a:	4b0b      	ldr	r3, [pc, #44]	; (8000c38 <HAL_TIM_IC_CaptureCallback+0xa0>)
 8000c0c:	681a      	ldr	r2, [r3, #0]
 8000c0e:	4b0a      	ldr	r3, [pc, #40]	; (8000c38 <HAL_TIM_IC_CaptureCallback+0xa0>)
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	6a12      	ldr	r2, [r2, #32]
 8000c14:	621a      	str	r2, [r3, #32]
		State++;
 8000c16:	4b06      	ldr	r3, [pc, #24]	; (8000c30 <HAL_TIM_IC_CaptureCallback+0x98>)
 8000c18:	781b      	ldrb	r3, [r3, #0]
 8000c1a:	b2db      	uxtb	r3, r3
 8000c1c:	3301      	adds	r3, #1
 8000c1e:	b2da      	uxtb	r2, r3
 8000c20:	4b03      	ldr	r3, [pc, #12]	; (8000c30 <HAL_TIM_IC_CaptureCallback+0x98>)
 8000c22:	701a      	strb	r2, [r3, #0]
}
 8000c24:	bf00      	nop
 8000c26:	370c      	adds	r7, #12
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	bc80      	pop	{r7}
 8000c2c:	4770      	bx	lr
 8000c2e:	bf00      	nop
 8000c30:	200000aa 	.word	0x200000aa
 8000c34:	40012c00 	.word	0x40012c00
 8000c38:	20000360 	.word	0x20000360
 8000c3c:	200000a8 	.word	0x200000a8

08000c40 <ICU_VoidGet_TON>:

/* USER CODE BEGIN 1 */
void ICU_VoidGet_TON( uint32_t*Copy_u32_TON_microSec) {
 8000c40:	b480      	push	{r7}
 8000c42:	b083      	sub	sp, #12
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	6078      	str	r0, [r7, #4]



	if (State == 2) {
 8000c48:	4b09      	ldr	r3, [pc, #36]	; (8000c70 <ICU_VoidGet_TON+0x30>)
 8000c4a:	781b      	ldrb	r3, [r3, #0]
 8000c4c:	b2db      	uxtb	r3, r3
 8000c4e:	2b02      	cmp	r3, #2
 8000c50:	d108      	bne.n	8000c64 <ICU_VoidGet_TON+0x24>

		State = 0;
 8000c52:	4b07      	ldr	r3, [pc, #28]	; (8000c70 <ICU_VoidGet_TON+0x30>)
 8000c54:	2200      	movs	r2, #0
 8000c56:	701a      	strb	r2, [r3, #0]

		*Copy_u32_TON_microSec = (TIMEON );
 8000c58:	4b06      	ldr	r3, [pc, #24]	; (8000c74 <ICU_VoidGet_TON+0x34>)
 8000c5a:	881b      	ldrh	r3, [r3, #0]
 8000c5c:	b29b      	uxth	r3, r3
 8000c5e:	461a      	mov	r2, r3
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	601a      	str	r2, [r3, #0]
	else {
		/*nothing*/
	}


}
 8000c64:	bf00      	nop
 8000c66:	370c      	adds	r7, #12
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	bc80      	pop	{r7}
 8000c6c:	4770      	bx	lr
 8000c6e:	bf00      	nop
 8000c70:	200000aa 	.word	0x200000aa
 8000c74:	200000a8 	.word	0x200000a8

08000c78 <UltraSonic_INIT>:

void UltraSonic_INIT(void) {
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	af00      	add	r7, sp, #0

	HAL_NVIC_EnableIRQ(TIM1_CC_IRQn) ;
 8000c7c:	201b      	movs	r0, #27
 8000c7e:	f001 f83c 	bl	8001cfa <HAL_NVIC_EnableIRQ>
	HAL_TIM_IC_Start_IT(&htim1 ,TIM_CHANNEL_1) ;
 8000c82:	2100      	movs	r1, #0
 8000c84:	4802      	ldr	r0, [pc, #8]	; (8000c90 <UltraSonic_INIT+0x18>)
 8000c86:	f002 f91d 	bl	8002ec4 <HAL_TIM_IC_Start_IT>

}
 8000c8a:	bf00      	nop
 8000c8c:	bd80      	pop	{r7, pc}
 8000c8e:	bf00      	nop
 8000c90:	20000360 	.word	0x20000360
 8000c94:	00000000 	.word	0x00000000

08000c98 <UltraSonic_Get_Distance>:

void UltraSonic_Get_Distance(float*Distance_CM) {
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b084      	sub	sp, #16
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]


	uint32_t TON_microSec =0 ;
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	60fb      	str	r3, [r7, #12]


	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET);
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000caa:	4825      	ldr	r0, [pc, #148]	; (8000d40 <UltraSonic_Get_Distance+0xa8>)
 8000cac:	f001 fa6a 	bl	8002184 <HAL_GPIO_WritePin>
	vTaskDelay(3);
 8000cb0:	2003      	movs	r0, #3
 8000cb2:	f004 fc6b 	bl	800558c <vTaskDelay>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_SET);
 8000cb6:	2201      	movs	r2, #1
 8000cb8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000cbc:	4820      	ldr	r0, [pc, #128]	; (8000d40 <UltraSonic_Get_Distance+0xa8>)
 8000cbe:	f001 fa61 	bl	8002184 <HAL_GPIO_WritePin>
	vTaskDelay(10);
 8000cc2:	200a      	movs	r0, #10
 8000cc4:	f004 fc62 	bl	800558c <vTaskDelay>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET);
 8000cc8:	2200      	movs	r2, #0
 8000cca:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000cce:	481c      	ldr	r0, [pc, #112]	; (8000d40 <UltraSonic_Get_Distance+0xa8>)
 8000cd0:	f001 fa58 	bl	8002184 <HAL_GPIO_WritePin>

	__HAL_TIM_ENABLE_IT(&htim1, TIM_IT_CC1);
 8000cd4:	4b1b      	ldr	r3, [pc, #108]	; (8000d44 <UltraSonic_Get_Distance+0xac>)
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	68da      	ldr	r2, [r3, #12]
 8000cda:	4b1a      	ldr	r3, [pc, #104]	; (8000d44 <UltraSonic_Get_Distance+0xac>)
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	f042 0202 	orr.w	r2, r2, #2
 8000ce2:	60da      	str	r2, [r3, #12]
	// Sense ECHO to measure distance

	ICU_VoidGet_TON( &TON_microSec) ;
 8000ce4:	f107 030c 	add.w	r3, r7, #12
 8000ce8:	4618      	mov	r0, r3
 8000cea:	f7ff ffa9 	bl	8000c40 <ICU_VoidGet_TON>
	*Distance_CM = (velocity * TON_microSec/10000.0 )/ 2.0;    // CENTIMETER
 8000cee:	f240 1357 	movw	r3, #343	; 0x157
 8000cf2:	461a      	mov	r2, r3
 8000cf4:	68fb      	ldr	r3, [r7, #12]
 8000cf6:	fb02 f303 	mul.w	r3, r2, r3
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	f7ff fb6a 	bl	80003d4 <__aeabi_ui2d>
 8000d00:	a30d      	add	r3, pc, #52	; (adr r3, 8000d38 <UltraSonic_Get_Distance+0xa0>)
 8000d02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d06:	f7ff fd09 	bl	800071c <__aeabi_ddiv>
 8000d0a:	4602      	mov	r2, r0
 8000d0c:	460b      	mov	r3, r1
 8000d0e:	4610      	mov	r0, r2
 8000d10:	4619      	mov	r1, r3
 8000d12:	f04f 0200 	mov.w	r2, #0
 8000d16:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000d1a:	f7ff fcff 	bl	800071c <__aeabi_ddiv>
 8000d1e:	4602      	mov	r2, r0
 8000d20:	460b      	mov	r3, r1
 8000d22:	4610      	mov	r0, r2
 8000d24:	4619      	mov	r1, r3
 8000d26:	f7ff fde1 	bl	80008ec <__aeabi_d2f>
 8000d2a:	4602      	mov	r2, r0
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	601a      	str	r2, [r3, #0]

}
 8000d30:	bf00      	nop
 8000d32:	3710      	adds	r7, #16
 8000d34:	46bd      	mov	sp, r7
 8000d36:	bd80      	pop	{r7, pc}
 8000d38:	00000000 	.word	0x00000000
 8000d3c:	40c38800 	.word	0x40c38800
 8000d40:	40010c00 	.word	0x40010c00
 8000d44:	20000360 	.word	0x20000360

08000d48 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000d48:	b480      	push	{r7}
 8000d4a:	b085      	sub	sp, #20
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	60f8      	str	r0, [r7, #12]
 8000d50:	60b9      	str	r1, [r7, #8]
 8000d52:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000d54:	68fb      	ldr	r3, [r7, #12]
 8000d56:	4a06      	ldr	r2, [pc, #24]	; (8000d70 <vApplicationGetIdleTaskMemory+0x28>)
 8000d58:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000d5a:	68bb      	ldr	r3, [r7, #8]
 8000d5c:	4a05      	ldr	r2, [pc, #20]	; (8000d74 <vApplicationGetIdleTaskMemory+0x2c>)
 8000d5e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	2280      	movs	r2, #128	; 0x80
 8000d64:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000d66:	bf00      	nop
 8000d68:	3714      	adds	r7, #20
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	bc80      	pop	{r7}
 8000d6e:	4770      	bx	lr
 8000d70:	200000ac 	.word	0x200000ac
 8000d74:	20000160 	.word	0x20000160

08000d78 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b082      	sub	sp, #8
 8000d7c:	af02      	add	r7, sp, #8
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000d7e:	f000 feb9 	bl	8001af4 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000d82:	f000 f85d 	bl	8000e40 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000d86:	f000 fa15 	bl	80011b4 <MX_GPIO_Init>
	MX_TIM1_Init();
 8000d8a:	f000 f89b 	bl	8000ec4 <MX_TIM1_Init>
	MX_TIM3_Init();
 8000d8e:	f000 f8ef 	bl	8000f70 <MX_TIM3_Init>
	MX_USART1_UART_Init();
 8000d92:	f000 f9bb 	bl	800110c <MX_USART1_UART_Init>
	MX_TIM4_Init();
 8000d96:	f000 f943 	bl	8001020 <MX_TIM4_Init>
	MX_USART3_UART_Init();
 8000d9a:	f000 f9e1 	bl	8001160 <MX_USART3_UART_Init>
	/* USER CODE BEGIN 2 */
	EG_Action = xEventGroupCreate();
 8000d9e:	f004 f811 	bl	8004dc4 <xEventGroupCreate>
 8000da2:	4603      	mov	r3, r0
 8000da4:	4a1f      	ldr	r2, [pc, #124]	; (8000e24 <main+0xac>)
 8000da6:	6013      	str	r3, [r2, #0]
	EG_V2V = xEventGroupCreate();
 8000da8:	f004 f80c 	bl	8004dc4 <xEventGroupCreate>
 8000dac:	4603      	mov	r3, r0
 8000dae:	4a1e      	ldr	r2, [pc, #120]	; (8000e28 <main+0xb0>)
 8000db0:	6013      	str	r3, [r2, #0]
	xTaskCreate(BLE_Read_Task, NULL, 100 , NULL , 1 , NULL);
 8000db2:	2300      	movs	r3, #0
 8000db4:	9301      	str	r3, [sp, #4]
 8000db6:	2301      	movs	r3, #1
 8000db8:	9300      	str	r3, [sp, #0]
 8000dba:	2300      	movs	r3, #0
 8000dbc:	2264      	movs	r2, #100	; 0x64
 8000dbe:	2100      	movs	r1, #0
 8000dc0:	481a      	ldr	r0, [pc, #104]	; (8000e2c <main+0xb4>)
 8000dc2:	f004 fa9e 	bl	8005302 <xTaskCreate>
	xTaskCreate(V2V_Task, NULL, 100 , NULL , 2 , NULL);
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	9301      	str	r3, [sp, #4]
 8000dca:	2302      	movs	r3, #2
 8000dcc:	9300      	str	r3, [sp, #0]
 8000dce:	2300      	movs	r3, #0
 8000dd0:	2264      	movs	r2, #100	; 0x64
 8000dd2:	2100      	movs	r1, #0
 8000dd4:	4816      	ldr	r0, [pc, #88]	; (8000e30 <main+0xb8>)
 8000dd6:	f004 fa94 	bl	8005302 <xTaskCreate>
	xTaskCreate(ACC_Task, NULL, 100 , NULL , 3 , NULL);
 8000dda:	2300      	movs	r3, #0
 8000ddc:	9301      	str	r3, [sp, #4]
 8000dde:	2303      	movs	r3, #3
 8000de0:	9300      	str	r3, [sp, #0]
 8000de2:	2300      	movs	r3, #0
 8000de4:	2264      	movs	r2, #100	; 0x64
 8000de6:	2100      	movs	r1, #0
 8000de8:	4812      	ldr	r0, [pc, #72]	; (8000e34 <main+0xbc>)
 8000dea:	f004 fa8a 	bl	8005302 <xTaskCreate>
	xTaskCreate(Action_Task, NULL, 100 , NULL , 4 , NULL);
 8000dee:	2300      	movs	r3, #0
 8000df0:	9301      	str	r3, [sp, #4]
 8000df2:	2304      	movs	r3, #4
 8000df4:	9300      	str	r3, [sp, #0]
 8000df6:	2300      	movs	r3, #0
 8000df8:	2264      	movs	r2, #100	; 0x64
 8000dfa:	2100      	movs	r1, #0
 8000dfc:	480e      	ldr	r0, [pc, #56]	; (8000e38 <main+0xc0>)
 8000dfe:	f004 fa80 	bl	8005302 <xTaskCreate>
	xTaskCreate(Display_Task, NULL, 100 , NULL , 5 , NULL);
 8000e02:	2300      	movs	r3, #0
 8000e04:	9301      	str	r3, [sp, #4]
 8000e06:	2305      	movs	r3, #5
 8000e08:	9300      	str	r3, [sp, #0]
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	2264      	movs	r2, #100	; 0x64
 8000e0e:	2100      	movs	r1, #0
 8000e10:	480a      	ldr	r0, [pc, #40]	; (8000e3c <main+0xc4>)
 8000e12:	f004 fa76 	bl	8005302 <xTaskCreate>
	UltraSonic_INIT();
 8000e16:	f7ff ff2f 	bl	8000c78 <UltraSonic_INIT>
	DC_Motor_Init();
 8000e1a:	f7ff fe2d 	bl	8000a78 <DC_Motor_Init>

	vTaskStartScheduler();
 8000e1e:	f004 fbe9 	bl	80055f4 <vTaskStartScheduler>
	/* USER CODE END 2 */
	/* Start scheduler */
	/* We should never get here as control is now taken by the scheduler */
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
 8000e22:	e7fe      	b.n	8000e22 <main+0xaa>
 8000e24:	200004c8 	.word	0x200004c8
 8000e28:	200004d0 	.word	0x200004d0
 8000e2c:	0800128d 	.word	0x0800128d
 8000e30:	0800131d 	.word	0x0800131d
 8000e34:	080013d1 	.word	0x080013d1
 8000e38:	080014b1 	.word	0x080014b1
 8000e3c:	080015c1 	.word	0x080015c1

08000e40 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b090      	sub	sp, #64	; 0x40
 8000e44:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e46:	f107 0318 	add.w	r3, r7, #24
 8000e4a:	2228      	movs	r2, #40	; 0x28
 8000e4c:	2100      	movs	r1, #0
 8000e4e:	4618      	mov	r0, r3
 8000e50:	f005 fbcc 	bl	80065ec <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e54:	1d3b      	adds	r3, r7, #4
 8000e56:	2200      	movs	r2, #0
 8000e58:	601a      	str	r2, [r3, #0]
 8000e5a:	605a      	str	r2, [r3, #4]
 8000e5c:	609a      	str	r2, [r3, #8]
 8000e5e:	60da      	str	r2, [r3, #12]
 8000e60:	611a      	str	r2, [r3, #16]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000e62:	2302      	movs	r3, #2
 8000e64:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e66:	2301      	movs	r3, #1
 8000e68:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e6a:	2310      	movs	r3, #16
 8000e6c:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e6e:	2302      	movs	r3, #2
 8000e70:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000e72:	2300      	movs	r3, #0
 8000e74:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000e76:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8000e7a:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e7c:	f107 0318 	add.w	r3, r7, #24
 8000e80:	4618      	mov	r0, r3
 8000e82:	f001 f997 	bl	80021b4 <HAL_RCC_OscConfig>
 8000e86:	4603      	mov	r3, r0
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d001      	beq.n	8000e90 <SystemClock_Config+0x50>
	{
		Error_Handler();
 8000e8c:	f000 fbb0 	bl	80015f0 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e90:	230f      	movs	r3, #15
 8000e92:	607b      	str	r3, [r7, #4]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e94:	2302      	movs	r3, #2
 8000e96:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e98:	2300      	movs	r3, #0
 8000e9a:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000e9c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ea0:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000ea6:	1d3b      	adds	r3, r7, #4
 8000ea8:	2102      	movs	r1, #2
 8000eaa:	4618      	mov	r0, r3
 8000eac:	f001 fc04 	bl	80026b8 <HAL_RCC_ClockConfig>
 8000eb0:	4603      	mov	r3, r0
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d001      	beq.n	8000eba <SystemClock_Config+0x7a>
	{
		Error_Handler();
 8000eb6:	f000 fb9b 	bl	80015f0 <Error_Handler>
	}
}
 8000eba:	bf00      	nop
 8000ebc:	3740      	adds	r7, #64	; 0x40
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	bd80      	pop	{r7, pc}
	...

08000ec4 <MX_TIM1_Init>:
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b086      	sub	sp, #24
 8000ec8:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000eca:	f107 0310 	add.w	r3, r7, #16
 8000ece:	2200      	movs	r2, #0
 8000ed0:	601a      	str	r2, [r3, #0]
 8000ed2:	605a      	str	r2, [r3, #4]
	TIM_IC_InitTypeDef sConfigIC = {0};
 8000ed4:	463b      	mov	r3, r7
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	601a      	str	r2, [r3, #0]
 8000eda:	605a      	str	r2, [r3, #4]
 8000edc:	609a      	str	r2, [r3, #8]
 8000ede:	60da      	str	r2, [r3, #12]

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 8000ee0:	4b21      	ldr	r3, [pc, #132]	; (8000f68 <MX_TIM1_Init+0xa4>)
 8000ee2:	4a22      	ldr	r2, [pc, #136]	; (8000f6c <MX_TIM1_Init+0xa8>)
 8000ee4:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 64-1;
 8000ee6:	4b20      	ldr	r3, [pc, #128]	; (8000f68 <MX_TIM1_Init+0xa4>)
 8000ee8:	223f      	movs	r2, #63	; 0x3f
 8000eea:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000eec:	4b1e      	ldr	r3, [pc, #120]	; (8000f68 <MX_TIM1_Init+0xa4>)
 8000eee:	2200      	movs	r2, #0
 8000ef0:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 65535;
 8000ef2:	4b1d      	ldr	r3, [pc, #116]	; (8000f68 <MX_TIM1_Init+0xa4>)
 8000ef4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000ef8:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000efa:	4b1b      	ldr	r3, [pc, #108]	; (8000f68 <MX_TIM1_Init+0xa4>)
 8000efc:	2200      	movs	r2, #0
 8000efe:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 8000f00:	4b19      	ldr	r3, [pc, #100]	; (8000f68 <MX_TIM1_Init+0xa4>)
 8000f02:	2200      	movs	r2, #0
 8000f04:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f06:	4b18      	ldr	r3, [pc, #96]	; (8000f68 <MX_TIM1_Init+0xa4>)
 8000f08:	2200      	movs	r2, #0
 8000f0a:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 8000f0c:	4816      	ldr	r0, [pc, #88]	; (8000f68 <MX_TIM1_Init+0xa4>)
 8000f0e:	f001 ff89 	bl	8002e24 <HAL_TIM_IC_Init>
 8000f12:	4603      	mov	r3, r0
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d001      	beq.n	8000f1c <MX_TIM1_Init+0x58>
	{
		Error_Handler();
 8000f18:	f000 fb6a 	bl	80015f0 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	613b      	str	r3, [r7, #16]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f20:	2300      	movs	r3, #0
 8000f22:	617b      	str	r3, [r7, #20]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000f24:	f107 0310 	add.w	r3, r7, #16
 8000f28:	4619      	mov	r1, r3
 8000f2a:	480f      	ldr	r0, [pc, #60]	; (8000f68 <MX_TIM1_Init+0xa4>)
 8000f2c:	f002 ffd0 	bl	8003ed0 <HAL_TIMEx_MasterConfigSynchronization>
 8000f30:	4603      	mov	r3, r0
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d001      	beq.n	8000f3a <MX_TIM1_Init+0x76>
	{
		Error_Handler();
 8000f36:	f000 fb5b 	bl	80015f0 <Error_Handler>
	}
	sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	603b      	str	r3, [r7, #0]
	sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000f3e:	2301      	movs	r3, #1
 8000f40:	607b      	str	r3, [r7, #4]
	sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000f42:	2300      	movs	r3, #0
 8000f44:	60bb      	str	r3, [r7, #8]
	sConfigIC.ICFilter = 0;
 8000f46:	2300      	movs	r3, #0
 8000f48:	60fb      	str	r3, [r7, #12]
	if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000f4a:	463b      	mov	r3, r7
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	4619      	mov	r1, r3
 8000f50:	4805      	ldr	r0, [pc, #20]	; (8000f68 <MX_TIM1_Init+0xa4>)
 8000f52:	f002 f9cb 	bl	80032ec <HAL_TIM_IC_ConfigChannel>
 8000f56:	4603      	mov	r3, r0
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d001      	beq.n	8000f60 <MX_TIM1_Init+0x9c>
	{
		Error_Handler();
 8000f5c:	f000 fb48 	bl	80015f0 <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */

}
 8000f60:	bf00      	nop
 8000f62:	3718      	adds	r7, #24
 8000f64:	46bd      	mov	sp, r7
 8000f66:	bd80      	pop	{r7, pc}
 8000f68:	20000360 	.word	0x20000360
 8000f6c:	40012c00 	.word	0x40012c00

08000f70 <MX_TIM3_Init>:
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b08a      	sub	sp, #40	; 0x28
 8000f74:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f76:	f107 0320 	add.w	r3, r7, #32
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	601a      	str	r2, [r3, #0]
 8000f7e:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = {0};
 8000f80:	1d3b      	adds	r3, r7, #4
 8000f82:	2200      	movs	r2, #0
 8000f84:	601a      	str	r2, [r3, #0]
 8000f86:	605a      	str	r2, [r3, #4]
 8000f88:	609a      	str	r2, [r3, #8]
 8000f8a:	60da      	str	r2, [r3, #12]
 8000f8c:	611a      	str	r2, [r3, #16]
 8000f8e:	615a      	str	r2, [r3, #20]
 8000f90:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 8000f92:	4b21      	ldr	r3, [pc, #132]	; (8001018 <MX_TIM3_Init+0xa8>)
 8000f94:	4a21      	ldr	r2, [pc, #132]	; (800101c <MX_TIM3_Init+0xac>)
 8000f96:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 32-1;
 8000f98:	4b1f      	ldr	r3, [pc, #124]	; (8001018 <MX_TIM3_Init+0xa8>)
 8000f9a:	221f      	movs	r2, #31
 8000f9c:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f9e:	4b1e      	ldr	r3, [pc, #120]	; (8001018 <MX_TIM3_Init+0xa8>)
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 100-1;
 8000fa4:	4b1c      	ldr	r3, [pc, #112]	; (8001018 <MX_TIM3_Init+0xa8>)
 8000fa6:	2263      	movs	r2, #99	; 0x63
 8000fa8:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000faa:	4b1b      	ldr	r3, [pc, #108]	; (8001018 <MX_TIM3_Init+0xa8>)
 8000fac:	2200      	movs	r2, #0
 8000fae:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fb0:	4b19      	ldr	r3, [pc, #100]	; (8001018 <MX_TIM3_Init+0xa8>)
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000fb6:	4818      	ldr	r0, [pc, #96]	; (8001018 <MX_TIM3_Init+0xa8>)
 8000fb8:	f001 fdde 	bl	8002b78 <HAL_TIM_PWM_Init>
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d001      	beq.n	8000fc6 <MX_TIM3_Init+0x56>
	{
		Error_Handler();
 8000fc2:	f000 fb15 	bl	80015f0 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	623b      	str	r3, [r7, #32]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000fce:	f107 0320 	add.w	r3, r7, #32
 8000fd2:	4619      	mov	r1, r3
 8000fd4:	4810      	ldr	r0, [pc, #64]	; (8001018 <MX_TIM3_Init+0xa8>)
 8000fd6:	f002 ff7b 	bl	8003ed0 <HAL_TIMEx_MasterConfigSynchronization>
 8000fda:	4603      	mov	r3, r0
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d001      	beq.n	8000fe4 <MX_TIM3_Init+0x74>
	{
		Error_Handler();
 8000fe0:	f000 fb06 	bl	80015f0 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000fe4:	2360      	movs	r3, #96	; 0x60
 8000fe6:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 0;
 8000fe8:	2300      	movs	r3, #0
 8000fea:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000fec:	2300      	movs	r3, #0
 8000fee:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000ff4:	1d3b      	adds	r3, r7, #4
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	4619      	mov	r1, r3
 8000ffa:	4807      	ldr	r0, [pc, #28]	; (8001018 <MX_TIM3_Init+0xa8>)
 8000ffc:	f002 fa12 	bl	8003424 <HAL_TIM_PWM_ConfigChannel>
 8001000:	4603      	mov	r3, r0
 8001002:	2b00      	cmp	r3, #0
 8001004:	d001      	beq.n	800100a <MX_TIM3_Init+0x9a>
	{
		Error_Handler();
 8001006:	f000 faf3 	bl	80015f0 <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */
	HAL_TIM_MspPostInit(&htim3);
 800100a:	4803      	ldr	r0, [pc, #12]	; (8001018 <MX_TIM3_Init+0xa8>)
 800100c:	f000 fbb2 	bl	8001774 <HAL_TIM_MspPostInit>

}
 8001010:	bf00      	nop
 8001012:	3728      	adds	r7, #40	; 0x28
 8001014:	46bd      	mov	sp, r7
 8001016:	bd80      	pop	{r7, pc}
 8001018:	200003a8 	.word	0x200003a8
 800101c:	40000400 	.word	0x40000400

08001020 <MX_TIM4_Init>:
 * @brief TIM4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM4_Init(void)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b08e      	sub	sp, #56	; 0x38
 8001024:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM4_Init 0 */

	/* USER CODE END TIM4_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001026:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800102a:	2200      	movs	r2, #0
 800102c:	601a      	str	r2, [r3, #0]
 800102e:	605a      	str	r2, [r3, #4]
 8001030:	609a      	str	r2, [r3, #8]
 8001032:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001034:	f107 0320 	add.w	r3, r7, #32
 8001038:	2200      	movs	r2, #0
 800103a:	601a      	str	r2, [r3, #0]
 800103c:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = {0};
 800103e:	1d3b      	adds	r3, r7, #4
 8001040:	2200      	movs	r2, #0
 8001042:	601a      	str	r2, [r3, #0]
 8001044:	605a      	str	r2, [r3, #4]
 8001046:	609a      	str	r2, [r3, #8]
 8001048:	60da      	str	r2, [r3, #12]
 800104a:	611a      	str	r2, [r3, #16]
 800104c:	615a      	str	r2, [r3, #20]
 800104e:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM4_Init 1 */

	/* USER CODE END TIM4_Init 1 */
	htim4.Instance = TIM4;
 8001050:	4b2c      	ldr	r3, [pc, #176]	; (8001104 <MX_TIM4_Init+0xe4>)
 8001052:	4a2d      	ldr	r2, [pc, #180]	; (8001108 <MX_TIM4_Init+0xe8>)
 8001054:	601a      	str	r2, [r3, #0]
	htim4.Init.Prescaler = 32-1;
 8001056:	4b2b      	ldr	r3, [pc, #172]	; (8001104 <MX_TIM4_Init+0xe4>)
 8001058:	221f      	movs	r2, #31
 800105a:	605a      	str	r2, [r3, #4]
	htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800105c:	4b29      	ldr	r3, [pc, #164]	; (8001104 <MX_TIM4_Init+0xe4>)
 800105e:	2200      	movs	r2, #0
 8001060:	609a      	str	r2, [r3, #8]
	htim4.Init.Period = 100-1;
 8001062:	4b28      	ldr	r3, [pc, #160]	; (8001104 <MX_TIM4_Init+0xe4>)
 8001064:	2263      	movs	r2, #99	; 0x63
 8001066:	60da      	str	r2, [r3, #12]
	htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001068:	4b26      	ldr	r3, [pc, #152]	; (8001104 <MX_TIM4_Init+0xe4>)
 800106a:	2200      	movs	r2, #0
 800106c:	611a      	str	r2, [r3, #16]
	htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800106e:	4b25      	ldr	r3, [pc, #148]	; (8001104 <MX_TIM4_Init+0xe4>)
 8001070:	2200      	movs	r2, #0
 8001072:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001074:	4823      	ldr	r0, [pc, #140]	; (8001104 <MX_TIM4_Init+0xe4>)
 8001076:	f001 fcdd 	bl	8002a34 <HAL_TIM_Base_Init>
 800107a:	4603      	mov	r3, r0
 800107c:	2b00      	cmp	r3, #0
 800107e:	d001      	beq.n	8001084 <MX_TIM4_Init+0x64>
	{
		Error_Handler();
 8001080:	f000 fab6 	bl	80015f0 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001084:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001088:	62bb      	str	r3, [r7, #40]	; 0x28
	if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800108a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800108e:	4619      	mov	r1, r3
 8001090:	481c      	ldr	r0, [pc, #112]	; (8001104 <MX_TIM4_Init+0xe4>)
 8001092:	f002 fa89 	bl	80035a8 <HAL_TIM_ConfigClockSource>
 8001096:	4603      	mov	r3, r0
 8001098:	2b00      	cmp	r3, #0
 800109a:	d001      	beq.n	80010a0 <MX_TIM4_Init+0x80>
	{
		Error_Handler();
 800109c:	f000 faa8 	bl	80015f0 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80010a0:	4818      	ldr	r0, [pc, #96]	; (8001104 <MX_TIM4_Init+0xe4>)
 80010a2:	f001 fd69 	bl	8002b78 <HAL_TIM_PWM_Init>
 80010a6:	4603      	mov	r3, r0
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d001      	beq.n	80010b0 <MX_TIM4_Init+0x90>
	{
		Error_Handler();
 80010ac:	f000 faa0 	bl	80015f0 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010b0:	2300      	movs	r3, #0
 80010b2:	623b      	str	r3, [r7, #32]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010b4:	2300      	movs	r3, #0
 80010b6:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80010b8:	f107 0320 	add.w	r3, r7, #32
 80010bc:	4619      	mov	r1, r3
 80010be:	4811      	ldr	r0, [pc, #68]	; (8001104 <MX_TIM4_Init+0xe4>)
 80010c0:	f002 ff06 	bl	8003ed0 <HAL_TIMEx_MasterConfigSynchronization>
 80010c4:	4603      	mov	r3, r0
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d001      	beq.n	80010ce <MX_TIM4_Init+0xae>
	{
		Error_Handler();
 80010ca:	f000 fa91 	bl	80015f0 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80010ce:	2360      	movs	r3, #96	; 0x60
 80010d0:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 0;
 80010d2:	2300      	movs	r3, #0
 80010d4:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80010d6:	2300      	movs	r3, #0
 80010d8:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80010da:	2300      	movs	r3, #0
 80010dc:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80010de:	1d3b      	adds	r3, r7, #4
 80010e0:	2200      	movs	r2, #0
 80010e2:	4619      	mov	r1, r3
 80010e4:	4807      	ldr	r0, [pc, #28]	; (8001104 <MX_TIM4_Init+0xe4>)
 80010e6:	f002 f99d 	bl	8003424 <HAL_TIM_PWM_ConfigChannel>
 80010ea:	4603      	mov	r3, r0
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d001      	beq.n	80010f4 <MX_TIM4_Init+0xd4>
	{
		Error_Handler();
 80010f0:	f000 fa7e 	bl	80015f0 <Error_Handler>
	}
	/* USER CODE BEGIN TIM4_Init 2 */

	/* USER CODE END TIM4_Init 2 */
	HAL_TIM_MspPostInit(&htim4);
 80010f4:	4803      	ldr	r0, [pc, #12]	; (8001104 <MX_TIM4_Init+0xe4>)
 80010f6:	f000 fb3d 	bl	8001774 <HAL_TIM_MspPostInit>

}
 80010fa:	bf00      	nop
 80010fc:	3738      	adds	r7, #56	; 0x38
 80010fe:	46bd      	mov	sp, r7
 8001100:	bd80      	pop	{r7, pc}
 8001102:	bf00      	nop
 8001104:	200003f0 	.word	0x200003f0
 8001108:	40000800 	.word	0x40000800

0800110c <MX_USART1_UART_Init>:
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 8001110:	4b11      	ldr	r3, [pc, #68]	; (8001158 <MX_USART1_UART_Init+0x4c>)
 8001112:	4a12      	ldr	r2, [pc, #72]	; (800115c <MX_USART1_UART_Init+0x50>)
 8001114:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 9600;
 8001116:	4b10      	ldr	r3, [pc, #64]	; (8001158 <MX_USART1_UART_Init+0x4c>)
 8001118:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800111c:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800111e:	4b0e      	ldr	r3, [pc, #56]	; (8001158 <MX_USART1_UART_Init+0x4c>)
 8001120:	2200      	movs	r2, #0
 8001122:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8001124:	4b0c      	ldr	r3, [pc, #48]	; (8001158 <MX_USART1_UART_Init+0x4c>)
 8001126:	2200      	movs	r2, #0
 8001128:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 800112a:	4b0b      	ldr	r3, [pc, #44]	; (8001158 <MX_USART1_UART_Init+0x4c>)
 800112c:	2200      	movs	r2, #0
 800112e:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8001130:	4b09      	ldr	r3, [pc, #36]	; (8001158 <MX_USART1_UART_Init+0x4c>)
 8001132:	220c      	movs	r2, #12
 8001134:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001136:	4b08      	ldr	r3, [pc, #32]	; (8001158 <MX_USART1_UART_Init+0x4c>)
 8001138:	2200      	movs	r2, #0
 800113a:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800113c:	4b06      	ldr	r3, [pc, #24]	; (8001158 <MX_USART1_UART_Init+0x4c>)
 800113e:	2200      	movs	r2, #0
 8001140:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK)
 8001142:	4805      	ldr	r0, [pc, #20]	; (8001158 <MX_USART1_UART_Init+0x4c>)
 8001144:	f002 ff34 	bl	8003fb0 <HAL_UART_Init>
 8001148:	4603      	mov	r3, r0
 800114a:	2b00      	cmp	r3, #0
 800114c:	d001      	beq.n	8001152 <MX_USART1_UART_Init+0x46>
	{
		Error_Handler();
 800114e:	f000 fa4f 	bl	80015f0 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 8001152:	bf00      	nop
 8001154:	bd80      	pop	{r7, pc}
 8001156:	bf00      	nop
 8001158:	20000438 	.word	0x20000438
 800115c:	40013800 	.word	0x40013800

08001160 <MX_USART3_UART_Init>:
 * @brief USART3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART3_UART_Init(void)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	af00      	add	r7, sp, #0
	/* USER CODE END USART3_Init 0 */

	/* USER CODE BEGIN USART3_Init 1 */

	/* USER CODE END USART3_Init 1 */
	huart3.Instance = USART3;
 8001164:	4b11      	ldr	r3, [pc, #68]	; (80011ac <MX_USART3_UART_Init+0x4c>)
 8001166:	4a12      	ldr	r2, [pc, #72]	; (80011b0 <MX_USART3_UART_Init+0x50>)
 8001168:	601a      	str	r2, [r3, #0]
	huart3.Init.BaudRate = 9600;
 800116a:	4b10      	ldr	r3, [pc, #64]	; (80011ac <MX_USART3_UART_Init+0x4c>)
 800116c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001170:	605a      	str	r2, [r3, #4]
	huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001172:	4b0e      	ldr	r3, [pc, #56]	; (80011ac <MX_USART3_UART_Init+0x4c>)
 8001174:	2200      	movs	r2, #0
 8001176:	609a      	str	r2, [r3, #8]
	huart3.Init.StopBits = UART_STOPBITS_1;
 8001178:	4b0c      	ldr	r3, [pc, #48]	; (80011ac <MX_USART3_UART_Init+0x4c>)
 800117a:	2200      	movs	r2, #0
 800117c:	60da      	str	r2, [r3, #12]
	huart3.Init.Parity = UART_PARITY_NONE;
 800117e:	4b0b      	ldr	r3, [pc, #44]	; (80011ac <MX_USART3_UART_Init+0x4c>)
 8001180:	2200      	movs	r2, #0
 8001182:	611a      	str	r2, [r3, #16]
	huart3.Init.Mode = UART_MODE_TX_RX;
 8001184:	4b09      	ldr	r3, [pc, #36]	; (80011ac <MX_USART3_UART_Init+0x4c>)
 8001186:	220c      	movs	r2, #12
 8001188:	615a      	str	r2, [r3, #20]
	huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800118a:	4b08      	ldr	r3, [pc, #32]	; (80011ac <MX_USART3_UART_Init+0x4c>)
 800118c:	2200      	movs	r2, #0
 800118e:	619a      	str	r2, [r3, #24]
	huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001190:	4b06      	ldr	r3, [pc, #24]	; (80011ac <MX_USART3_UART_Init+0x4c>)
 8001192:	2200      	movs	r2, #0
 8001194:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart3) != HAL_OK)
 8001196:	4805      	ldr	r0, [pc, #20]	; (80011ac <MX_USART3_UART_Init+0x4c>)
 8001198:	f002 ff0a 	bl	8003fb0 <HAL_UART_Init>
 800119c:	4603      	mov	r3, r0
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d001      	beq.n	80011a6 <MX_USART3_UART_Init+0x46>
	{
		Error_Handler();
 80011a2:	f000 fa25 	bl	80015f0 <Error_Handler>
	}
	/* USER CODE BEGIN USART3_Init 2 */

	/* USER CODE END USART3_Init 2 */

}
 80011a6:	bf00      	nop
 80011a8:	bd80      	pop	{r7, pc}
 80011aa:	bf00      	nop
 80011ac:	20000480 	.word	0x20000480
 80011b0:	40004800 	.word	0x40004800

080011b4 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b088      	sub	sp, #32
 80011b8:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011ba:	f107 0310 	add.w	r3, r7, #16
 80011be:	2200      	movs	r2, #0
 80011c0:	601a      	str	r2, [r3, #0]
 80011c2:	605a      	str	r2, [r3, #4]
 80011c4:	609a      	str	r2, [r3, #8]
 80011c6:	60da      	str	r2, [r3, #12]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80011c8:	4b2d      	ldr	r3, [pc, #180]	; (8001280 <MX_GPIO_Init+0xcc>)
 80011ca:	699b      	ldr	r3, [r3, #24]
 80011cc:	4a2c      	ldr	r2, [pc, #176]	; (8001280 <MX_GPIO_Init+0xcc>)
 80011ce:	f043 0310 	orr.w	r3, r3, #16
 80011d2:	6193      	str	r3, [r2, #24]
 80011d4:	4b2a      	ldr	r3, [pc, #168]	; (8001280 <MX_GPIO_Init+0xcc>)
 80011d6:	699b      	ldr	r3, [r3, #24]
 80011d8:	f003 0310 	and.w	r3, r3, #16
 80011dc:	60fb      	str	r3, [r7, #12]
 80011de:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 80011e0:	4b27      	ldr	r3, [pc, #156]	; (8001280 <MX_GPIO_Init+0xcc>)
 80011e2:	699b      	ldr	r3, [r3, #24]
 80011e4:	4a26      	ldr	r2, [pc, #152]	; (8001280 <MX_GPIO_Init+0xcc>)
 80011e6:	f043 0320 	orr.w	r3, r3, #32
 80011ea:	6193      	str	r3, [r2, #24]
 80011ec:	4b24      	ldr	r3, [pc, #144]	; (8001280 <MX_GPIO_Init+0xcc>)
 80011ee:	699b      	ldr	r3, [r3, #24]
 80011f0:	f003 0320 	and.w	r3, r3, #32
 80011f4:	60bb      	str	r3, [r7, #8]
 80011f6:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80011f8:	4b21      	ldr	r3, [pc, #132]	; (8001280 <MX_GPIO_Init+0xcc>)
 80011fa:	699b      	ldr	r3, [r3, #24]
 80011fc:	4a20      	ldr	r2, [pc, #128]	; (8001280 <MX_GPIO_Init+0xcc>)
 80011fe:	f043 0304 	orr.w	r3, r3, #4
 8001202:	6193      	str	r3, [r2, #24]
 8001204:	4b1e      	ldr	r3, [pc, #120]	; (8001280 <MX_GPIO_Init+0xcc>)
 8001206:	699b      	ldr	r3, [r3, #24]
 8001208:	f003 0304 	and.w	r3, r3, #4
 800120c:	607b      	str	r3, [r7, #4]
 800120e:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001210:	4b1b      	ldr	r3, [pc, #108]	; (8001280 <MX_GPIO_Init+0xcc>)
 8001212:	699b      	ldr	r3, [r3, #24]
 8001214:	4a1a      	ldr	r2, [pc, #104]	; (8001280 <MX_GPIO_Init+0xcc>)
 8001216:	f043 0308 	orr.w	r3, r3, #8
 800121a:	6193      	str	r3, [r2, #24]
 800121c:	4b18      	ldr	r3, [pc, #96]	; (8001280 <MX_GPIO_Init+0xcc>)
 800121e:	699b      	ldr	r3, [r3, #24]
 8001220:	f003 0308 	and.w	r3, r3, #8
 8001224:	603b      	str	r3, [r7, #0]
 8001226:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001228:	2200      	movs	r2, #0
 800122a:	21bf      	movs	r1, #191	; 0xbf
 800122c:	4815      	ldr	r0, [pc, #84]	; (8001284 <MX_GPIO_Init+0xd0>)
 800122e:	f000 ffa9 	bl	8002184 <HAL_GPIO_WritePin>
			|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7, GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15, GPIO_PIN_RESET);
 8001232:	2200      	movs	r2, #0
 8001234:	f248 0103 	movw	r1, #32771	; 0x8003
 8001238:	4813      	ldr	r0, [pc, #76]	; (8001288 <MX_GPIO_Init+0xd4>)
 800123a:	f000 ffa3 	bl	8002184 <HAL_GPIO_WritePin>

	/*Configure GPIO pins : PA0 PA1 PA2 PA3
                           PA4 PA5 PA7 */
	GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 800123e:	23bf      	movs	r3, #191	; 0xbf
 8001240:	613b      	str	r3, [r7, #16]
			|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001242:	2301      	movs	r3, #1
 8001244:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001246:	2300      	movs	r3, #0
 8001248:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800124a:	2302      	movs	r3, #2
 800124c:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800124e:	f107 0310 	add.w	r3, r7, #16
 8001252:	4619      	mov	r1, r3
 8001254:	480b      	ldr	r0, [pc, #44]	; (8001284 <MX_GPIO_Init+0xd0>)
 8001256:	f000 fe11 	bl	8001e7c <HAL_GPIO_Init>

	/*Configure GPIO pins : PB0 PB1 PB15 */
	GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15;
 800125a:	f248 0303 	movw	r3, #32771	; 0x8003
 800125e:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001260:	2301      	movs	r3, #1
 8001262:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001264:	2300      	movs	r3, #0
 8001266:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001268:	2302      	movs	r3, #2
 800126a:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800126c:	f107 0310 	add.w	r3, r7, #16
 8001270:	4619      	mov	r1, r3
 8001272:	4805      	ldr	r0, [pc, #20]	; (8001288 <MX_GPIO_Init+0xd4>)
 8001274:	f000 fe02 	bl	8001e7c <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8001278:	bf00      	nop
 800127a:	3720      	adds	r7, #32
 800127c:	46bd      	mov	sp, r7
 800127e:	bd80      	pop	{r7, pc}
 8001280:	40021000 	.word	0x40021000
 8001284:	40010800 	.word	0x40010800
 8001288:	40010c00 	.word	0x40010c00

0800128c <BLE_Read_Task>:

/* USER CODE BEGIN 4 */
void BLE_Read_Task    (void  * argument)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b084      	sub	sp, #16
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef RetValue = HAL_ERROR;
 8001294:	2301      	movs	r3, #1
 8001296:	73fb      	strb	r3, [r7, #15]
	uint8_t BLE_Rer_Arr[4]={0};
 8001298:	2300      	movs	r3, #0
 800129a:	60bb      	str	r3, [r7, #8]
	while(1)
	{
		RetValue =  H_HC05_Recieve_Polling  (&BLE_Rer_Arr[0]);
 800129c:	f107 0308 	add.w	r3, r7, #8
 80012a0:	4618      	mov	r0, r3
 80012a2:	f7ff fc31 	bl	8000b08 <H_HC05_Recieve_Polling>
 80012a6:	4603      	mov	r3, r0
 80012a8:	73fb      	strb	r3, [r7, #15]
		if(RetValue == HAL_OK)
 80012aa:	7bfb      	ldrb	r3, [r7, #15]
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d12f      	bne.n	8001310 <BLE_Read_Task+0x84>
		{
			switch(BLE_Rer_Arr[0])
 80012b0:	7a3b      	ldrb	r3, [r7, #8]
 80012b2:	2b45      	cmp	r3, #69	; 0x45
 80012b4:	d015      	beq.n	80012e2 <BLE_Read_Task+0x56>
 80012b6:	2b53      	cmp	r3, #83	; 0x53
 80012b8:	d12a      	bne.n	8001310 <BLE_Read_Task+0x84>
			{
			case 'S' :
				switch(BLE_Rer_Arr[1])
 80012ba:	7a7b      	ldrb	r3, [r7, #9]
 80012bc:	2b30      	cmp	r3, #48	; 0x30
 80012be:	d008      	beq.n	80012d2 <BLE_Read_Task+0x46>
 80012c0:	2b31      	cmp	r3, #49	; 0x31
 80012c2:	d122      	bne.n	800130a <BLE_Read_Task+0x7e>
				{
				case '1':
					xEventGroupSetBits(EG_Action,EG_SPEED_UP);
 80012c4:	4b14      	ldr	r3, [pc, #80]	; (8001318 <BLE_Read_Task+0x8c>)
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	2104      	movs	r1, #4
 80012ca:	4618      	mov	r0, r3
 80012cc:	f003 fe62 	bl	8004f94 <xEventGroupSetBits>
					break;
 80012d0:	e006      	b.n	80012e0 <BLE_Read_Task+0x54>
				case '0':
					xEventGroupSetBits(EG_Action,EG_SPEED_DOWN);
 80012d2:	4b11      	ldr	r3, [pc, #68]	; (8001318 <BLE_Read_Task+0x8c>)
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	2108      	movs	r1, #8
 80012d8:	4618      	mov	r0, r3
 80012da:	f003 fe5b 	bl	8004f94 <xEventGroupSetBits>
					break;
 80012de:	bf00      	nop
				}
				break;
 80012e0:	e013      	b.n	800130a <BLE_Read_Task+0x7e>

				case 'E' :

					switch(BLE_Rer_Arr[1])
 80012e2:	7a7b      	ldrb	r3, [r7, #9]
 80012e4:	2b30      	cmp	r3, #48	; 0x30
 80012e6:	d008      	beq.n	80012fa <BLE_Read_Task+0x6e>
 80012e8:	2b31      	cmp	r3, #49	; 0x31
 80012ea:	d110      	bne.n	800130e <BLE_Read_Task+0x82>
					{
					case '1':
						xEventGroupSetBits(EG_Action,EG_ENGINE_START );
 80012ec:	4b0a      	ldr	r3, [pc, #40]	; (8001318 <BLE_Read_Task+0x8c>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	2101      	movs	r1, #1
 80012f2:	4618      	mov	r0, r3
 80012f4:	f003 fe4e 	bl	8004f94 <xEventGroupSetBits>
						break;
 80012f8:	e006      	b.n	8001308 <BLE_Read_Task+0x7c>
					case '0':
						xEventGroupSetBits(EG_Action,EG_ENGINE_STOP );
 80012fa:	4b07      	ldr	r3, [pc, #28]	; (8001318 <BLE_Read_Task+0x8c>)
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	2102      	movs	r1, #2
 8001300:	4618      	mov	r0, r3
 8001302:	f003 fe47 	bl	8004f94 <xEventGroupSetBits>
						break;
 8001306:	bf00      	nop
					}
					break;
 8001308:	e001      	b.n	800130e <BLE_Read_Task+0x82>
				break;
 800130a:	bf00      	nop
 800130c:	e000      	b.n	8001310 <BLE_Read_Task+0x84>
					break;
 800130e:	bf00      	nop
		}
		else
		{

		}
		vTaskDelay(15);
 8001310:	200f      	movs	r0, #15
 8001312:	f004 f93b 	bl	800558c <vTaskDelay>
		RetValue =  H_HC05_Recieve_Polling  (&BLE_Rer_Arr[0]);
 8001316:	e7c1      	b.n	800129c <BLE_Read_Task+0x10>
 8001318:	200004c8 	.word	0x200004c8

0800131c <V2V_Task>:
	}
}

void V2V_Task (void  * argument)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b086      	sub	sp, #24
 8001320:	af02      	add	r7, sp, #8
 8001322:	6078      	str	r0, [r7, #4]
	uint8_t Local_8uLess10Mssg[4] = {'1','0','\r','\n'};
 8001324:	4b22      	ldr	r3, [pc, #136]	; (80013b0 <V2V_Task+0x94>)
 8001326:	60fb      	str	r3, [r7, #12]
	uint8_t Local_8uLess5Mssg [4] = {'0','5','\r','\n'};
 8001328:	4b22      	ldr	r3, [pc, #136]	; (80013b4 <V2V_Task+0x98>)
 800132a:	60bb      	str	r3, [r7, #8]
	while(1)
	{
		EG_V2VValue = xEventGroupWaitBits(EG_V2V,
 800132c:	4b22      	ldr	r3, [pc, #136]	; (80013b8 <V2V_Task+0x9c>)
 800132e:	6818      	ldr	r0, [r3, #0]
 8001330:	f04f 33ff 	mov.w	r3, #4294967295
 8001334:	9300      	str	r3, [sp, #0]
 8001336:	2300      	movs	r3, #0
 8001338:	2201      	movs	r2, #1
 800133a:	2103      	movs	r1, #3
 800133c:	f003 fd5c 	bl	8004df8 <xEventGroupWaitBits>
 8001340:	4603      	mov	r3, r0
 8001342:	4a1e      	ldr	r2, [pc, #120]	; (80013bc <V2V_Task+0xa0>)
 8001344:	6013      	str	r3, [r2, #0]
				( EG_DIS_LESS_10 | EG_DIS_LESS_5) ,
				1, // Auto Clear
				0, // Or Between bits not wait for all of the events
				portMAX_DELAY);
		if(EG_V2VValue & EG_DIS_LESS_10)
 8001346:	4b1d      	ldr	r3, [pc, #116]	; (80013bc <V2V_Task+0xa0>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	f003 0301 	and.w	r3, r3, #1
 800134e:	2b00      	cmp	r3, #0
 8001350:	d013      	beq.n	800137a <V2V_Task+0x5e>
		{
			if(u8FlagLess10 == 1)
 8001352:	4b1b      	ldr	r3, [pc, #108]	; (80013c0 <V2V_Task+0xa4>)
 8001354:	781b      	ldrb	r3, [r3, #0]
 8001356:	2b01      	cmp	r3, #1
 8001358:	d10f      	bne.n	800137a <V2V_Task+0x5e>
			{
				Counter++;
 800135a:	4b1a      	ldr	r3, [pc, #104]	; (80013c4 <V2V_Task+0xa8>)
 800135c:	781b      	ldrb	r3, [r3, #0]
 800135e:	3301      	adds	r3, #1
 8001360:	b2da      	uxtb	r2, r3
 8001362:	4b18      	ldr	r3, [pc, #96]	; (80013c4 <V2V_Task+0xa8>)
 8001364:	701a      	strb	r2, [r3, #0]
				HAL_UART_Transmit(&huart1, Local_8uLess10Mssg, 4, 100);
 8001366:	f107 010c 	add.w	r1, r7, #12
 800136a:	2364      	movs	r3, #100	; 0x64
 800136c:	2204      	movs	r2, #4
 800136e:	4816      	ldr	r0, [pc, #88]	; (80013c8 <V2V_Task+0xac>)
 8001370:	f002 fe6e 	bl	8004050 <HAL_UART_Transmit>
				u8FlagLess10=0;
 8001374:	4b12      	ldr	r3, [pc, #72]	; (80013c0 <V2V_Task+0xa4>)
 8001376:	2200      	movs	r2, #0
 8001378:	701a      	strb	r2, [r3, #0]
			}
		}
		if(EG_V2VValue & EG_DIS_LESS_5)
 800137a:	4b10      	ldr	r3, [pc, #64]	; (80013bc <V2V_Task+0xa0>)
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	f003 0302 	and.w	r3, r3, #2
 8001382:	2b00      	cmp	r3, #0
 8001384:	d0d2      	beq.n	800132c <V2V_Task+0x10>
		{
			if(u8FlagLess5 == 1)
 8001386:	4b11      	ldr	r3, [pc, #68]	; (80013cc <V2V_Task+0xb0>)
 8001388:	781b      	ldrb	r3, [r3, #0]
 800138a:	2b01      	cmp	r3, #1
 800138c:	d1ce      	bne.n	800132c <V2V_Task+0x10>
			{
				HAL_UART_Transmit(&huart1, Local_8uLess5Mssg, 4, 100);
 800138e:	f107 0108 	add.w	r1, r7, #8
 8001392:	2364      	movs	r3, #100	; 0x64
 8001394:	2204      	movs	r2, #4
 8001396:	480c      	ldr	r0, [pc, #48]	; (80013c8 <V2V_Task+0xac>)
 8001398:	f002 fe5a 	bl	8004050 <HAL_UART_Transmit>
				Counter--;
 800139c:	4b09      	ldr	r3, [pc, #36]	; (80013c4 <V2V_Task+0xa8>)
 800139e:	781b      	ldrb	r3, [r3, #0]
 80013a0:	3b01      	subs	r3, #1
 80013a2:	b2da      	uxtb	r2, r3
 80013a4:	4b07      	ldr	r3, [pc, #28]	; (80013c4 <V2V_Task+0xa8>)
 80013a6:	701a      	strb	r2, [r3, #0]
				u8FlagLess5=0;
 80013a8:	4b08      	ldr	r3, [pc, #32]	; (80013cc <V2V_Task+0xb0>)
 80013aa:	2200      	movs	r2, #0
 80013ac:	701a      	strb	r2, [r3, #0]
		EG_V2VValue = xEventGroupWaitBits(EG_V2V,
 80013ae:	e7bd      	b.n	800132c <V2V_Task+0x10>
 80013b0:	0a0d3031 	.word	0x0a0d3031
 80013b4:	0a0d3530 	.word	0x0a0d3530
 80013b8:	200004d0 	.word	0x200004d0
 80013bc:	200004d4 	.word	0x200004d4
 80013c0:	20000000 	.word	0x20000000
 80013c4:	200004e0 	.word	0x200004e0
 80013c8:	20000438 	.word	0x20000438
 80013cc:	20000001 	.word	0x20000001

080013d0 <ACC_Task>:
			}
		}
	}
}
void ACC_Task         (void  * argument)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b082      	sub	sp, #8
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
	 * 3) if Distance < 10cm --> ACC on (Regulate the speed & change ACC Status & Yellow Led ON)
	 * 4) if Distance < 5cm  --> Stop The Car & Red Led ON & Buzzer ON
	 */
	while(1)
	{
		if(ENGINE_ON == Engine_State)
 80013d8:	4b2d      	ldr	r3, [pc, #180]	; (8001490 <ACC_Task+0xc0>)
 80013da:	781b      	ldrb	r3, [r3, #0]
 80013dc:	2b01      	cmp	r3, #1
 80013de:	d151      	bne.n	8001484 <ACC_Task+0xb4>
		{
			UltraSonic_Get_Distance(&Distance);
 80013e0:	482c      	ldr	r0, [pc, #176]	; (8001494 <ACC_Task+0xc4>)
 80013e2:	f7ff fc59 	bl	8000c98 <UltraSonic_Get_Distance>
			if(Distance > 10 )
 80013e6:	4b2b      	ldr	r3, [pc, #172]	; (8001494 <ACC_Task+0xc4>)
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	492b      	ldr	r1, [pc, #172]	; (8001498 <ACC_Task+0xc8>)
 80013ec:	4618      	mov	r0, r3
 80013ee:	f7ff fb39 	bl	8000a64 <__aeabi_fcmpgt>
 80013f2:	4603      	mov	r3, r0
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d006      	beq.n	8001406 <ACC_Task+0x36>
			{
				u8FlagLess10 = 1;
 80013f8:	4b28      	ldr	r3, [pc, #160]	; (800149c <ACC_Task+0xcc>)
 80013fa:	2201      	movs	r2, #1
 80013fc:	701a      	strb	r2, [r3, #0]
				u8FlagLess5 =  1;
 80013fe:	4b28      	ldr	r3, [pc, #160]	; (80014a0 <ACC_Task+0xd0>)
 8001400:	2201      	movs	r2, #1
 8001402:	701a      	strb	r2, [r3, #0]
 8001404:	e03e      	b.n	8001484 <ACC_Task+0xb4>
			}
			else if(Distance <= 10.0 && Distance > 5.0)
 8001406:	4b23      	ldr	r3, [pc, #140]	; (8001494 <ACC_Task+0xc4>)
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	4923      	ldr	r1, [pc, #140]	; (8001498 <ACC_Task+0xc8>)
 800140c:	4618      	mov	r0, r3
 800140e:	f7ff fb15 	bl	8000a3c <__aeabi_fcmple>
 8001412:	4603      	mov	r3, r0
 8001414:	2b00      	cmp	r3, #0
 8001416:	d01c      	beq.n	8001452 <ACC_Task+0x82>
 8001418:	4b1e      	ldr	r3, [pc, #120]	; (8001494 <ACC_Task+0xc4>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	4921      	ldr	r1, [pc, #132]	; (80014a4 <ACC_Task+0xd4>)
 800141e:	4618      	mov	r0, r3
 8001420:	f7ff fb20 	bl	8000a64 <__aeabi_fcmpgt>
 8001424:	4603      	mov	r3, r0
 8001426:	2b00      	cmp	r3, #0
 8001428:	d013      	beq.n	8001452 <ACC_Task+0x82>
			{
				Duty = 20;
 800142a:	4b1f      	ldr	r3, [pc, #124]	; (80014a8 <ACC_Task+0xd8>)
 800142c:	2214      	movs	r2, #20
 800142e:	701a      	strb	r2, [r3, #0]
				DC_Motor_SetSpeed(Duty);
 8001430:	4b1d      	ldr	r3, [pc, #116]	; (80014a8 <ACC_Task+0xd8>)
 8001432:	f993 3000 	ldrsb.w	r3, [r3]
 8001436:	b2db      	uxtb	r3, r3
 8001438:	4618      	mov	r0, r3
 800143a:	f7ff fb37 	bl	8000aac <DC_Motor_SetSpeed>
				u8FlagLess5 =  1;
 800143e:	4b18      	ldr	r3, [pc, #96]	; (80014a0 <ACC_Task+0xd0>)
 8001440:	2201      	movs	r2, #1
 8001442:	701a      	strb	r2, [r3, #0]
				xEventGroupSetBits(EG_V2V, EG_DIS_LESS_10);
 8001444:	4b19      	ldr	r3, [pc, #100]	; (80014ac <ACC_Task+0xdc>)
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	2101      	movs	r1, #1
 800144a:	4618      	mov	r0, r3
 800144c:	f003 fda2 	bl	8004f94 <xEventGroupSetBits>
 8001450:	e018      	b.n	8001484 <ACC_Task+0xb4>
			}
			else if(Distance < 5.0)
 8001452:	4b10      	ldr	r3, [pc, #64]	; (8001494 <ACC_Task+0xc4>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	4913      	ldr	r1, [pc, #76]	; (80014a4 <ACC_Task+0xd4>)
 8001458:	4618      	mov	r0, r3
 800145a:	f7ff fae5 	bl	8000a28 <__aeabi_fcmplt>
 800145e:	4603      	mov	r3, r0
 8001460:	2b00      	cmp	r3, #0
 8001462:	d00f      	beq.n	8001484 <ACC_Task+0xb4>
			{
				Duty = MOTOR_MIN_SPEED;
 8001464:	4b10      	ldr	r3, [pc, #64]	; (80014a8 <ACC_Task+0xd8>)
 8001466:	2200      	movs	r2, #0
 8001468:	701a      	strb	r2, [r3, #0]
				DC_Motor_SetSpeed(Duty);
 800146a:	4b0f      	ldr	r3, [pc, #60]	; (80014a8 <ACC_Task+0xd8>)
 800146c:	f993 3000 	ldrsb.w	r3, [r3]
 8001470:	b2db      	uxtb	r3, r3
 8001472:	4618      	mov	r0, r3
 8001474:	f7ff fb1a 	bl	8000aac <DC_Motor_SetSpeed>
				xEventGroupSetBits(EG_V2V, EG_DIS_LESS_5);
 8001478:	4b0c      	ldr	r3, [pc, #48]	; (80014ac <ACC_Task+0xdc>)
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	2102      	movs	r1, #2
 800147e:	4618      	mov	r0, r3
 8001480:	f003 fd88 	bl	8004f94 <xEventGroupSetBits>
			else
			{

			}
		}
		vTaskDelay(300);
 8001484:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001488:	f004 f880 	bl	800558c <vTaskDelay>
		if(ENGINE_ON == Engine_State)
 800148c:	e7a4      	b.n	80013d8 <ACC_Task+0x8>
 800148e:	bf00      	nop
 8001490:	200004d9 	.word	0x200004d9
 8001494:	200004dc 	.word	0x200004dc
 8001498:	41200000 	.word	0x41200000
 800149c:	20000000 	.word	0x20000000
 80014a0:	20000001 	.word	0x20000001
 80014a4:	40a00000 	.word	0x40a00000
 80014a8:	200004d8 	.word	0x200004d8
 80014ac:	200004d0 	.word	0x200004d0

080014b0 <Action_Task>:
	}
}
void Action_Task      (void  * argument)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b084      	sub	sp, #16
 80014b4:	af02      	add	r7, sp, #8
 80014b6:	6078      	str	r0, [r7, #4]
	while(1)
	{
		EG_Value = xEventGroupWaitBits(EG_Action,
 80014b8:	4b3d      	ldr	r3, [pc, #244]	; (80015b0 <Action_Task+0x100>)
 80014ba:	6818      	ldr	r0, [r3, #0]
 80014bc:	f04f 33ff 	mov.w	r3, #4294967295
 80014c0:	9300      	str	r3, [sp, #0]
 80014c2:	2300      	movs	r3, #0
 80014c4:	2201      	movs	r2, #1
 80014c6:	210f      	movs	r1, #15
 80014c8:	f003 fc96 	bl	8004df8 <xEventGroupWaitBits>
 80014cc:	4603      	mov	r3, r0
 80014ce:	4a39      	ldr	r2, [pc, #228]	; (80015b4 <Action_Task+0x104>)
 80014d0:	6013      	str	r3, [r2, #0]
				(EG_ENGINE_START | EG_ENGINE_STOP | EG_SPEED_UP | EG_SPEED_DOWN) ,
				1, // Auto Clear
				0, // Or Between bits not wait for all of the events
				portMAX_DELAY);

		if(EG_Value & EG_ENGINE_START)
 80014d2:	4b38      	ldr	r3, [pc, #224]	; (80015b4 <Action_Task+0x104>)
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	f003 0301 	and.w	r3, r3, #1
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d004      	beq.n	80014e8 <Action_Task+0x38>
		{
			// Start Motor with Duty 50%
			DC_Motor_Init();
 80014de:	f7ff facb 	bl	8000a78 <DC_Motor_Init>
			Engine_State = ENGINE_ON;
 80014e2:	4b35      	ldr	r3, [pc, #212]	; (80015b8 <Action_Task+0x108>)
 80014e4:	2201      	movs	r2, #1
 80014e6:	701a      	strb	r2, [r3, #0]
		}
		if(EG_Value & EG_ENGINE_STOP)
 80014e8:	4b32      	ldr	r3, [pc, #200]	; (80015b4 <Action_Task+0x104>)
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	f003 0302 	and.w	r3, r3, #2
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d007      	beq.n	8001504 <Action_Task+0x54>
		{
			// Stop Motor Duty 0%
			Duty =0;
 80014f4:	4b31      	ldr	r3, [pc, #196]	; (80015bc <Action_Task+0x10c>)
 80014f6:	2200      	movs	r2, #0
 80014f8:	701a      	strb	r2, [r3, #0]
			DC_Motor_STOP();
 80014fa:	f7ff faeb 	bl	8000ad4 <DC_Motor_STOP>
			Engine_State = ENGINE_OFF;
 80014fe:	4b2e      	ldr	r3, [pc, #184]	; (80015b8 <Action_Task+0x108>)
 8001500:	2200      	movs	r2, #0
 8001502:	701a      	strb	r2, [r3, #0]
		}
		if(EG_Value & EG_SPEED_UP)
 8001504:	4b2b      	ldr	r3, [pc, #172]	; (80015b4 <Action_Task+0x104>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	f003 0304 	and.w	r3, r3, #4
 800150c:	2b00      	cmp	r3, #0
 800150e:	d023      	beq.n	8001558 <Action_Task+0xa8>
		{
			if(ENGINE_ON == Engine_State)
 8001510:	4b29      	ldr	r3, [pc, #164]	; (80015b8 <Action_Task+0x108>)
 8001512:	781b      	ldrb	r3, [r3, #0]
 8001514:	2b01      	cmp	r3, #1
 8001516:	d11f      	bne.n	8001558 <Action_Task+0xa8>
			{
				Duty+=10;
 8001518:	4b28      	ldr	r3, [pc, #160]	; (80015bc <Action_Task+0x10c>)
 800151a:	f993 3000 	ldrsb.w	r3, [r3]
 800151e:	b2db      	uxtb	r3, r3
 8001520:	330a      	adds	r3, #10
 8001522:	b2db      	uxtb	r3, r3
 8001524:	b25a      	sxtb	r2, r3
 8001526:	4b25      	ldr	r3, [pc, #148]	; (80015bc <Action_Task+0x10c>)
 8001528:	701a      	strb	r2, [r3, #0]
				if(MOTOR_MAX_SPEED < Duty)
 800152a:	4b24      	ldr	r3, [pc, #144]	; (80015bc <Action_Task+0x10c>)
 800152c:	f993 3000 	ldrsb.w	r3, [r3]
 8001530:	2b64      	cmp	r3, #100	; 0x64
 8001532:	dd0a      	ble.n	800154a <Action_Task+0x9a>
				{
					Duty=MOTOR_MAX_SPEED;
 8001534:	4b21      	ldr	r3, [pc, #132]	; (80015bc <Action_Task+0x10c>)
 8001536:	2264      	movs	r2, #100	; 0x64
 8001538:	701a      	strb	r2, [r3, #0]
					DC_Motor_SetSpeed(Duty);
 800153a:	4b20      	ldr	r3, [pc, #128]	; (80015bc <Action_Task+0x10c>)
 800153c:	f993 3000 	ldrsb.w	r3, [r3]
 8001540:	b2db      	uxtb	r3, r3
 8001542:	4618      	mov	r0, r3
 8001544:	f7ff fab2 	bl	8000aac <DC_Motor_SetSpeed>
 8001548:	e006      	b.n	8001558 <Action_Task+0xa8>
				}
				else
				{
					DC_Motor_SetSpeed(Duty);
 800154a:	4b1c      	ldr	r3, [pc, #112]	; (80015bc <Action_Task+0x10c>)
 800154c:	f993 3000 	ldrsb.w	r3, [r3]
 8001550:	b2db      	uxtb	r3, r3
 8001552:	4618      	mov	r0, r3
 8001554:	f7ff faaa 	bl	8000aac <DC_Motor_SetSpeed>
				}
			}
		}
		if(EG_Value & EG_SPEED_DOWN)
 8001558:	4b16      	ldr	r3, [pc, #88]	; (80015b4 <Action_Task+0x104>)
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	f003 0308 	and.w	r3, r3, #8
 8001560:	2b00      	cmp	r3, #0
 8001562:	d0a9      	beq.n	80014b8 <Action_Task+0x8>
		{
			if(ENGINE_ON == Engine_State)
 8001564:	4b14      	ldr	r3, [pc, #80]	; (80015b8 <Action_Task+0x108>)
 8001566:	781b      	ldrb	r3, [r3, #0]
 8001568:	2b01      	cmp	r3, #1
 800156a:	d1a5      	bne.n	80014b8 <Action_Task+0x8>
			{
				Duty-=10;
 800156c:	4b13      	ldr	r3, [pc, #76]	; (80015bc <Action_Task+0x10c>)
 800156e:	f993 3000 	ldrsb.w	r3, [r3]
 8001572:	b2db      	uxtb	r3, r3
 8001574:	3b0a      	subs	r3, #10
 8001576:	b2db      	uxtb	r3, r3
 8001578:	b25a      	sxtb	r2, r3
 800157a:	4b10      	ldr	r3, [pc, #64]	; (80015bc <Action_Task+0x10c>)
 800157c:	701a      	strb	r2, [r3, #0]
				if(MOTOR_MIN_SPEED > Duty)
 800157e:	4b0f      	ldr	r3, [pc, #60]	; (80015bc <Action_Task+0x10c>)
 8001580:	f993 3000 	ldrsb.w	r3, [r3]
 8001584:	2b00      	cmp	r3, #0
 8001586:	da0a      	bge.n	800159e <Action_Task+0xee>
				{
					Duty = MOTOR_MIN_SPEED;
 8001588:	4b0c      	ldr	r3, [pc, #48]	; (80015bc <Action_Task+0x10c>)
 800158a:	2200      	movs	r2, #0
 800158c:	701a      	strb	r2, [r3, #0]
					DC_Motor_SetSpeed(Duty);
 800158e:	4b0b      	ldr	r3, [pc, #44]	; (80015bc <Action_Task+0x10c>)
 8001590:	f993 3000 	ldrsb.w	r3, [r3]
 8001594:	b2db      	uxtb	r3, r3
 8001596:	4618      	mov	r0, r3
 8001598:	f7ff fa88 	bl	8000aac <DC_Motor_SetSpeed>
 800159c:	e78c      	b.n	80014b8 <Action_Task+0x8>
				}
				else
				{
					DC_Motor_SetSpeed(Duty);
 800159e:	4b07      	ldr	r3, [pc, #28]	; (80015bc <Action_Task+0x10c>)
 80015a0:	f993 3000 	ldrsb.w	r3, [r3]
 80015a4:	b2db      	uxtb	r3, r3
 80015a6:	4618      	mov	r0, r3
 80015a8:	f7ff fa80 	bl	8000aac <DC_Motor_SetSpeed>
		EG_Value = xEventGroupWaitBits(EG_Action,
 80015ac:	e784      	b.n	80014b8 <Action_Task+0x8>
 80015ae:	bf00      	nop
 80015b0:	200004c8 	.word	0x200004c8
 80015b4:	200004cc 	.word	0x200004cc
 80015b8:	200004d9 	.word	0x200004d9
 80015bc:	200004d8 	.word	0x200004d8

080015c0 <Display_Task>:
			}
		}
	}
}
void Display_Task     (void  * argument)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b082      	sub	sp, #8
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
	while(1)
	{
		// Display ( Distance & Duty & ACC State On LCD)
		vTaskDelay(1000);
 80015c8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80015cc:	f003 ffde 	bl	800558c <vTaskDelay>
 80015d0:	e7fa      	b.n	80015c8 <Display_Task+0x8>

080015d2 <HAL_TIM_PeriodElapsedCallback>:
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80015d2:	b580      	push	{r7, lr}
 80015d4:	b082      	sub	sp, #8
 80015d6:	af00      	add	r7, sp, #0
 80015d8:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM2) {
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80015e2:	d101      	bne.n	80015e8 <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 80015e4:	f000 fa9c 	bl	8001b20 <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 80015e8:	bf00      	nop
 80015ea:	3708      	adds	r7, #8
 80015ec:	46bd      	mov	sp, r7
 80015ee:	bd80      	pop	{r7, pc}

080015f0 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 80015f0:	b480      	push	{r7}
 80015f2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80015f4:	b672      	cpsid	i
}
 80015f6:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80015f8:	e7fe      	b.n	80015f8 <Error_Handler+0x8>
	...

080015fc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b084      	sub	sp, #16
 8001600:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001602:	4b18      	ldr	r3, [pc, #96]	; (8001664 <HAL_MspInit+0x68>)
 8001604:	699b      	ldr	r3, [r3, #24]
 8001606:	4a17      	ldr	r2, [pc, #92]	; (8001664 <HAL_MspInit+0x68>)
 8001608:	f043 0301 	orr.w	r3, r3, #1
 800160c:	6193      	str	r3, [r2, #24]
 800160e:	4b15      	ldr	r3, [pc, #84]	; (8001664 <HAL_MspInit+0x68>)
 8001610:	699b      	ldr	r3, [r3, #24]
 8001612:	f003 0301 	and.w	r3, r3, #1
 8001616:	60bb      	str	r3, [r7, #8]
 8001618:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800161a:	4b12      	ldr	r3, [pc, #72]	; (8001664 <HAL_MspInit+0x68>)
 800161c:	69db      	ldr	r3, [r3, #28]
 800161e:	4a11      	ldr	r2, [pc, #68]	; (8001664 <HAL_MspInit+0x68>)
 8001620:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001624:	61d3      	str	r3, [r2, #28]
 8001626:	4b0f      	ldr	r3, [pc, #60]	; (8001664 <HAL_MspInit+0x68>)
 8001628:	69db      	ldr	r3, [r3, #28]
 800162a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800162e:	607b      	str	r3, [r7, #4]
 8001630:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001632:	2200      	movs	r2, #0
 8001634:	210f      	movs	r1, #15
 8001636:	f06f 0001 	mvn.w	r0, #1
 800163a:	f000 fb42 	bl	8001cc2 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800163e:	4b0a      	ldr	r3, [pc, #40]	; (8001668 <HAL_MspInit+0x6c>)
 8001640:	685b      	ldr	r3, [r3, #4]
 8001642:	60fb      	str	r3, [r7, #12]
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800164a:	60fb      	str	r3, [r7, #12]
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001652:	60fb      	str	r3, [r7, #12]
 8001654:	4a04      	ldr	r2, [pc, #16]	; (8001668 <HAL_MspInit+0x6c>)
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800165a:	bf00      	nop
 800165c:	3710      	adds	r7, #16
 800165e:	46bd      	mov	sp, r7
 8001660:	bd80      	pop	{r7, pc}
 8001662:	bf00      	nop
 8001664:	40021000 	.word	0x40021000
 8001668:	40010000 	.word	0x40010000

0800166c <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b088      	sub	sp, #32
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001674:	f107 0310 	add.w	r3, r7, #16
 8001678:	2200      	movs	r2, #0
 800167a:	601a      	str	r2, [r3, #0]
 800167c:	605a      	str	r2, [r3, #4]
 800167e:	609a      	str	r2, [r3, #8]
 8001680:	60da      	str	r2, [r3, #12]
  if(htim_ic->Instance==TIM1)
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	4a1a      	ldr	r2, [pc, #104]	; (80016f0 <HAL_TIM_IC_MspInit+0x84>)
 8001688:	4293      	cmp	r3, r2
 800168a:	d12c      	bne.n	80016e6 <HAL_TIM_IC_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800168c:	4b19      	ldr	r3, [pc, #100]	; (80016f4 <HAL_TIM_IC_MspInit+0x88>)
 800168e:	699b      	ldr	r3, [r3, #24]
 8001690:	4a18      	ldr	r2, [pc, #96]	; (80016f4 <HAL_TIM_IC_MspInit+0x88>)
 8001692:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001696:	6193      	str	r3, [r2, #24]
 8001698:	4b16      	ldr	r3, [pc, #88]	; (80016f4 <HAL_TIM_IC_MspInit+0x88>)
 800169a:	699b      	ldr	r3, [r3, #24]
 800169c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80016a0:	60fb      	str	r3, [r7, #12]
 80016a2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016a4:	4b13      	ldr	r3, [pc, #76]	; (80016f4 <HAL_TIM_IC_MspInit+0x88>)
 80016a6:	699b      	ldr	r3, [r3, #24]
 80016a8:	4a12      	ldr	r2, [pc, #72]	; (80016f4 <HAL_TIM_IC_MspInit+0x88>)
 80016aa:	f043 0304 	orr.w	r3, r3, #4
 80016ae:	6193      	str	r3, [r2, #24]
 80016b0:	4b10      	ldr	r3, [pc, #64]	; (80016f4 <HAL_TIM_IC_MspInit+0x88>)
 80016b2:	699b      	ldr	r3, [r3, #24]
 80016b4:	f003 0304 	and.w	r3, r3, #4
 80016b8:	60bb      	str	r3, [r7, #8]
 80016ba:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80016bc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80016c0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016c2:	2300      	movs	r3, #0
 80016c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016c6:	2300      	movs	r3, #0
 80016c8:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016ca:	f107 0310 	add.w	r3, r7, #16
 80016ce:	4619      	mov	r1, r3
 80016d0:	4809      	ldr	r0, [pc, #36]	; (80016f8 <HAL_TIM_IC_MspInit+0x8c>)
 80016d2:	f000 fbd3 	bl	8001e7c <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 5, 0);
 80016d6:	2200      	movs	r2, #0
 80016d8:	2105      	movs	r1, #5
 80016da:	201b      	movs	r0, #27
 80016dc:	f000 faf1 	bl	8001cc2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 80016e0:	201b      	movs	r0, #27
 80016e2:	f000 fb0a 	bl	8001cfa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80016e6:	bf00      	nop
 80016e8:	3720      	adds	r7, #32
 80016ea:	46bd      	mov	sp, r7
 80016ec:	bd80      	pop	{r7, pc}
 80016ee:	bf00      	nop
 80016f0:	40012c00 	.word	0x40012c00
 80016f4:	40021000 	.word	0x40021000
 80016f8:	40010800 	.word	0x40010800

080016fc <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80016fc:	b480      	push	{r7}
 80016fe:	b085      	sub	sp, #20
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	4a09      	ldr	r2, [pc, #36]	; (8001730 <HAL_TIM_PWM_MspInit+0x34>)
 800170a:	4293      	cmp	r3, r2
 800170c:	d10b      	bne.n	8001726 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800170e:	4b09      	ldr	r3, [pc, #36]	; (8001734 <HAL_TIM_PWM_MspInit+0x38>)
 8001710:	69db      	ldr	r3, [r3, #28]
 8001712:	4a08      	ldr	r2, [pc, #32]	; (8001734 <HAL_TIM_PWM_MspInit+0x38>)
 8001714:	f043 0302 	orr.w	r3, r3, #2
 8001718:	61d3      	str	r3, [r2, #28]
 800171a:	4b06      	ldr	r3, [pc, #24]	; (8001734 <HAL_TIM_PWM_MspInit+0x38>)
 800171c:	69db      	ldr	r3, [r3, #28]
 800171e:	f003 0302 	and.w	r3, r3, #2
 8001722:	60fb      	str	r3, [r7, #12]
 8001724:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001726:	bf00      	nop
 8001728:	3714      	adds	r7, #20
 800172a:	46bd      	mov	sp, r7
 800172c:	bc80      	pop	{r7}
 800172e:	4770      	bx	lr
 8001730:	40000400 	.word	0x40000400
 8001734:	40021000 	.word	0x40021000

08001738 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001738:	b480      	push	{r7}
 800173a:	b085      	sub	sp, #20
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	4a09      	ldr	r2, [pc, #36]	; (800176c <HAL_TIM_Base_MspInit+0x34>)
 8001746:	4293      	cmp	r3, r2
 8001748:	d10b      	bne.n	8001762 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 800174a:	4b09      	ldr	r3, [pc, #36]	; (8001770 <HAL_TIM_Base_MspInit+0x38>)
 800174c:	69db      	ldr	r3, [r3, #28]
 800174e:	4a08      	ldr	r2, [pc, #32]	; (8001770 <HAL_TIM_Base_MspInit+0x38>)
 8001750:	f043 0304 	orr.w	r3, r3, #4
 8001754:	61d3      	str	r3, [r2, #28]
 8001756:	4b06      	ldr	r3, [pc, #24]	; (8001770 <HAL_TIM_Base_MspInit+0x38>)
 8001758:	69db      	ldr	r3, [r3, #28]
 800175a:	f003 0304 	and.w	r3, r3, #4
 800175e:	60fb      	str	r3, [r7, #12]
 8001760:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001762:	bf00      	nop
 8001764:	3714      	adds	r7, #20
 8001766:	46bd      	mov	sp, r7
 8001768:	bc80      	pop	{r7}
 800176a:	4770      	bx	lr
 800176c:	40000800 	.word	0x40000800
 8001770:	40021000 	.word	0x40021000

08001774 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b088      	sub	sp, #32
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800177c:	f107 0310 	add.w	r3, r7, #16
 8001780:	2200      	movs	r2, #0
 8001782:	601a      	str	r2, [r3, #0]
 8001784:	605a      	str	r2, [r3, #4]
 8001786:	609a      	str	r2, [r3, #8]
 8001788:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	4a1e      	ldr	r2, [pc, #120]	; (8001808 <HAL_TIM_MspPostInit+0x94>)
 8001790:	4293      	cmp	r3, r2
 8001792:	d118      	bne.n	80017c6 <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001794:	4b1d      	ldr	r3, [pc, #116]	; (800180c <HAL_TIM_MspPostInit+0x98>)
 8001796:	699b      	ldr	r3, [r3, #24]
 8001798:	4a1c      	ldr	r2, [pc, #112]	; (800180c <HAL_TIM_MspPostInit+0x98>)
 800179a:	f043 0304 	orr.w	r3, r3, #4
 800179e:	6193      	str	r3, [r2, #24]
 80017a0:	4b1a      	ldr	r3, [pc, #104]	; (800180c <HAL_TIM_MspPostInit+0x98>)
 80017a2:	699b      	ldr	r3, [r3, #24]
 80017a4:	f003 0304 	and.w	r3, r3, #4
 80017a8:	60fb      	str	r3, [r7, #12]
 80017aa:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80017ac:	2340      	movs	r3, #64	; 0x40
 80017ae:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017b0:	2302      	movs	r3, #2
 80017b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017b4:	2302      	movs	r3, #2
 80017b6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017b8:	f107 0310 	add.w	r3, r7, #16
 80017bc:	4619      	mov	r1, r3
 80017be:	4814      	ldr	r0, [pc, #80]	; (8001810 <HAL_TIM_MspPostInit+0x9c>)
 80017c0:	f000 fb5c 	bl	8001e7c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80017c4:	e01c      	b.n	8001800 <HAL_TIM_MspPostInit+0x8c>
  else if(htim->Instance==TIM4)
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	4a12      	ldr	r2, [pc, #72]	; (8001814 <HAL_TIM_MspPostInit+0xa0>)
 80017cc:	4293      	cmp	r3, r2
 80017ce:	d117      	bne.n	8001800 <HAL_TIM_MspPostInit+0x8c>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017d0:	4b0e      	ldr	r3, [pc, #56]	; (800180c <HAL_TIM_MspPostInit+0x98>)
 80017d2:	699b      	ldr	r3, [r3, #24]
 80017d4:	4a0d      	ldr	r2, [pc, #52]	; (800180c <HAL_TIM_MspPostInit+0x98>)
 80017d6:	f043 0308 	orr.w	r3, r3, #8
 80017da:	6193      	str	r3, [r2, #24]
 80017dc:	4b0b      	ldr	r3, [pc, #44]	; (800180c <HAL_TIM_MspPostInit+0x98>)
 80017de:	699b      	ldr	r3, [r3, #24]
 80017e0:	f003 0308 	and.w	r3, r3, #8
 80017e4:	60bb      	str	r3, [r7, #8]
 80017e6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80017e8:	2340      	movs	r3, #64	; 0x40
 80017ea:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017ec:	2302      	movs	r3, #2
 80017ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017f0:	2302      	movs	r3, #2
 80017f2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017f4:	f107 0310 	add.w	r3, r7, #16
 80017f8:	4619      	mov	r1, r3
 80017fa:	4807      	ldr	r0, [pc, #28]	; (8001818 <HAL_TIM_MspPostInit+0xa4>)
 80017fc:	f000 fb3e 	bl	8001e7c <HAL_GPIO_Init>
}
 8001800:	bf00      	nop
 8001802:	3720      	adds	r7, #32
 8001804:	46bd      	mov	sp, r7
 8001806:	bd80      	pop	{r7, pc}
 8001808:	40000400 	.word	0x40000400
 800180c:	40021000 	.word	0x40021000
 8001810:	40010800 	.word	0x40010800
 8001814:	40000800 	.word	0x40000800
 8001818:	40010c00 	.word	0x40010c00

0800181c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b08a      	sub	sp, #40	; 0x28
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001824:	f107 0318 	add.w	r3, r7, #24
 8001828:	2200      	movs	r2, #0
 800182a:	601a      	str	r2, [r3, #0]
 800182c:	605a      	str	r2, [r3, #4]
 800182e:	609a      	str	r2, [r3, #8]
 8001830:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	4a3c      	ldr	r2, [pc, #240]	; (8001928 <HAL_UART_MspInit+0x10c>)
 8001838:	4293      	cmp	r3, r2
 800183a:	d132      	bne.n	80018a2 <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800183c:	4b3b      	ldr	r3, [pc, #236]	; (800192c <HAL_UART_MspInit+0x110>)
 800183e:	699b      	ldr	r3, [r3, #24]
 8001840:	4a3a      	ldr	r2, [pc, #232]	; (800192c <HAL_UART_MspInit+0x110>)
 8001842:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001846:	6193      	str	r3, [r2, #24]
 8001848:	4b38      	ldr	r3, [pc, #224]	; (800192c <HAL_UART_MspInit+0x110>)
 800184a:	699b      	ldr	r3, [r3, #24]
 800184c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001850:	617b      	str	r3, [r7, #20]
 8001852:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001854:	4b35      	ldr	r3, [pc, #212]	; (800192c <HAL_UART_MspInit+0x110>)
 8001856:	699b      	ldr	r3, [r3, #24]
 8001858:	4a34      	ldr	r2, [pc, #208]	; (800192c <HAL_UART_MspInit+0x110>)
 800185a:	f043 0304 	orr.w	r3, r3, #4
 800185e:	6193      	str	r3, [r2, #24]
 8001860:	4b32      	ldr	r3, [pc, #200]	; (800192c <HAL_UART_MspInit+0x110>)
 8001862:	699b      	ldr	r3, [r3, #24]
 8001864:	f003 0304 	and.w	r3, r3, #4
 8001868:	613b      	str	r3, [r7, #16]
 800186a:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800186c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001870:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001872:	2302      	movs	r3, #2
 8001874:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001876:	2303      	movs	r3, #3
 8001878:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800187a:	f107 0318 	add.w	r3, r7, #24
 800187e:	4619      	mov	r1, r3
 8001880:	482b      	ldr	r0, [pc, #172]	; (8001930 <HAL_UART_MspInit+0x114>)
 8001882:	f000 fafb 	bl	8001e7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001886:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800188a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800188c:	2300      	movs	r3, #0
 800188e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001890:	2300      	movs	r3, #0
 8001892:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001894:	f107 0318 	add.w	r3, r7, #24
 8001898:	4619      	mov	r1, r3
 800189a:	4825      	ldr	r0, [pc, #148]	; (8001930 <HAL_UART_MspInit+0x114>)
 800189c:	f000 faee 	bl	8001e7c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80018a0:	e03e      	b.n	8001920 <HAL_UART_MspInit+0x104>
  else if(huart->Instance==USART3)
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	4a23      	ldr	r2, [pc, #140]	; (8001934 <HAL_UART_MspInit+0x118>)
 80018a8:	4293      	cmp	r3, r2
 80018aa:	d139      	bne.n	8001920 <HAL_UART_MspInit+0x104>
    __HAL_RCC_USART3_CLK_ENABLE();
 80018ac:	4b1f      	ldr	r3, [pc, #124]	; (800192c <HAL_UART_MspInit+0x110>)
 80018ae:	69db      	ldr	r3, [r3, #28]
 80018b0:	4a1e      	ldr	r2, [pc, #120]	; (800192c <HAL_UART_MspInit+0x110>)
 80018b2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80018b6:	61d3      	str	r3, [r2, #28]
 80018b8:	4b1c      	ldr	r3, [pc, #112]	; (800192c <HAL_UART_MspInit+0x110>)
 80018ba:	69db      	ldr	r3, [r3, #28]
 80018bc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80018c0:	60fb      	str	r3, [r7, #12]
 80018c2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018c4:	4b19      	ldr	r3, [pc, #100]	; (800192c <HAL_UART_MspInit+0x110>)
 80018c6:	699b      	ldr	r3, [r3, #24]
 80018c8:	4a18      	ldr	r2, [pc, #96]	; (800192c <HAL_UART_MspInit+0x110>)
 80018ca:	f043 0308 	orr.w	r3, r3, #8
 80018ce:	6193      	str	r3, [r2, #24]
 80018d0:	4b16      	ldr	r3, [pc, #88]	; (800192c <HAL_UART_MspInit+0x110>)
 80018d2:	699b      	ldr	r3, [r3, #24]
 80018d4:	f003 0308 	and.w	r3, r3, #8
 80018d8:	60bb      	str	r3, [r7, #8]
 80018da:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80018dc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80018e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018e2:	2302      	movs	r3, #2
 80018e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80018e6:	2303      	movs	r3, #3
 80018e8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018ea:	f107 0318 	add.w	r3, r7, #24
 80018ee:	4619      	mov	r1, r3
 80018f0:	4811      	ldr	r0, [pc, #68]	; (8001938 <HAL_UART_MspInit+0x11c>)
 80018f2:	f000 fac3 	bl	8001e7c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80018f6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80018fa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018fc:	2300      	movs	r3, #0
 80018fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001900:	2300      	movs	r3, #0
 8001902:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001904:	f107 0318 	add.w	r3, r7, #24
 8001908:	4619      	mov	r1, r3
 800190a:	480b      	ldr	r0, [pc, #44]	; (8001938 <HAL_UART_MspInit+0x11c>)
 800190c:	f000 fab6 	bl	8001e7c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8001910:	2200      	movs	r2, #0
 8001912:	2105      	movs	r1, #5
 8001914:	2027      	movs	r0, #39	; 0x27
 8001916:	f000 f9d4 	bl	8001cc2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800191a:	2027      	movs	r0, #39	; 0x27
 800191c:	f000 f9ed 	bl	8001cfa <HAL_NVIC_EnableIRQ>
}
 8001920:	bf00      	nop
 8001922:	3728      	adds	r7, #40	; 0x28
 8001924:	46bd      	mov	sp, r7
 8001926:	bd80      	pop	{r7, pc}
 8001928:	40013800 	.word	0x40013800
 800192c:	40021000 	.word	0x40021000
 8001930:	40010800 	.word	0x40010800
 8001934:	40004800 	.word	0x40004800
 8001938:	40010c00 	.word	0x40010c00

0800193c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	b08e      	sub	sp, #56	; 0x38
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001944:	2300      	movs	r3, #0
 8001946:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001948:	2300      	movs	r3, #0
 800194a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 800194c:	2300      	movs	r3, #0
 800194e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 8001952:	4b34      	ldr	r3, [pc, #208]	; (8001a24 <HAL_InitTick+0xe8>)
 8001954:	69db      	ldr	r3, [r3, #28]
 8001956:	4a33      	ldr	r2, [pc, #204]	; (8001a24 <HAL_InitTick+0xe8>)
 8001958:	f043 0301 	orr.w	r3, r3, #1
 800195c:	61d3      	str	r3, [r2, #28]
 800195e:	4b31      	ldr	r3, [pc, #196]	; (8001a24 <HAL_InitTick+0xe8>)
 8001960:	69db      	ldr	r3, [r3, #28]
 8001962:	f003 0301 	and.w	r3, r3, #1
 8001966:	60fb      	str	r3, [r7, #12]
 8001968:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800196a:	f107 0210 	add.w	r2, r7, #16
 800196e:	f107 0314 	add.w	r3, r7, #20
 8001972:	4611      	mov	r1, r2
 8001974:	4618      	mov	r0, r3
 8001976:	f001 f80f 	bl	8002998 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800197a:	6a3b      	ldr	r3, [r7, #32]
 800197c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800197e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001980:	2b00      	cmp	r3, #0
 8001982:	d103      	bne.n	800198c <HAL_InitTick+0x50>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001984:	f000 ffe0 	bl	8002948 <HAL_RCC_GetPCLK1Freq>
 8001988:	6378      	str	r0, [r7, #52]	; 0x34
 800198a:	e004      	b.n	8001996 <HAL_InitTick+0x5a>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800198c:	f000 ffdc 	bl	8002948 <HAL_RCC_GetPCLK1Freq>
 8001990:	4603      	mov	r3, r0
 8001992:	005b      	lsls	r3, r3, #1
 8001994:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001996:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001998:	4a23      	ldr	r2, [pc, #140]	; (8001a28 <HAL_InitTick+0xec>)
 800199a:	fba2 2303 	umull	r2, r3, r2, r3
 800199e:	0c9b      	lsrs	r3, r3, #18
 80019a0:	3b01      	subs	r3, #1
 80019a2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 80019a4:	4b21      	ldr	r3, [pc, #132]	; (8001a2c <HAL_InitTick+0xf0>)
 80019a6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80019aa:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 80019ac:	4b1f      	ldr	r3, [pc, #124]	; (8001a2c <HAL_InitTick+0xf0>)
 80019ae:	f240 32e7 	movw	r2, #999	; 0x3e7
 80019b2:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 80019b4:	4a1d      	ldr	r2, [pc, #116]	; (8001a2c <HAL_InitTick+0xf0>)
 80019b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019b8:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 80019ba:	4b1c      	ldr	r3, [pc, #112]	; (8001a2c <HAL_InitTick+0xf0>)
 80019bc:	2200      	movs	r2, #0
 80019be:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019c0:	4b1a      	ldr	r3, [pc, #104]	; (8001a2c <HAL_InitTick+0xf0>)
 80019c2:	2200      	movs	r2, #0
 80019c4:	609a      	str	r2, [r3, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019c6:	4b19      	ldr	r3, [pc, #100]	; (8001a2c <HAL_InitTick+0xf0>)
 80019c8:	2200      	movs	r2, #0
 80019ca:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim2);
 80019cc:	4817      	ldr	r0, [pc, #92]	; (8001a2c <HAL_InitTick+0xf0>)
 80019ce:	f001 f831 	bl	8002a34 <HAL_TIM_Base_Init>
 80019d2:	4603      	mov	r3, r0
 80019d4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 80019d8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d11b      	bne.n	8001a18 <HAL_InitTick+0xdc>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 80019e0:	4812      	ldr	r0, [pc, #72]	; (8001a2c <HAL_InitTick+0xf0>)
 80019e2:	f001 f877 	bl	8002ad4 <HAL_TIM_Base_Start_IT>
 80019e6:	4603      	mov	r3, r0
 80019e8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 80019ec:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d111      	bne.n	8001a18 <HAL_InitTick+0xdc>
    {
    /* Enable the TIM2 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80019f4:	201c      	movs	r0, #28
 80019f6:	f000 f980 	bl	8001cfa <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	2b0f      	cmp	r3, #15
 80019fe:	d808      	bhi.n	8001a12 <HAL_InitTick+0xd6>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 8001a00:	2200      	movs	r2, #0
 8001a02:	6879      	ldr	r1, [r7, #4]
 8001a04:	201c      	movs	r0, #28
 8001a06:	f000 f95c 	bl	8001cc2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001a0a:	4a09      	ldr	r2, [pc, #36]	; (8001a30 <HAL_InitTick+0xf4>)
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	6013      	str	r3, [r2, #0]
 8001a10:	e002      	b.n	8001a18 <HAL_InitTick+0xdc>
      }
      else
      {
        status = HAL_ERROR;
 8001a12:	2301      	movs	r3, #1
 8001a14:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001a18:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	3738      	adds	r7, #56	; 0x38
 8001a20:	46bd      	mov	sp, r7
 8001a22:	bd80      	pop	{r7, pc}
 8001a24:	40021000 	.word	0x40021000
 8001a28:	431bde83 	.word	0x431bde83
 8001a2c:	200004e4 	.word	0x200004e4
 8001a30:	20000008 	.word	0x20000008

08001a34 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a34:	b480      	push	{r7}
 8001a36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001a38:	e7fe      	b.n	8001a38 <NMI_Handler+0x4>

08001a3a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a3a:	b480      	push	{r7}
 8001a3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a3e:	e7fe      	b.n	8001a3e <HardFault_Handler+0x4>

08001a40 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a40:	b480      	push	{r7}
 8001a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a44:	e7fe      	b.n	8001a44 <MemManage_Handler+0x4>

08001a46 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a46:	b480      	push	{r7}
 8001a48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a4a:	e7fe      	b.n	8001a4a <BusFault_Handler+0x4>

08001a4c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a50:	e7fe      	b.n	8001a50 <UsageFault_Handler+0x4>

08001a52 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a52:	b480      	push	{r7}
 8001a54:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a56:	bf00      	nop
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	bc80      	pop	{r7}
 8001a5c:	4770      	bx	lr
	...

08001a60 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001a64:	4802      	ldr	r0, [pc, #8]	; (8001a70 <TIM1_CC_IRQHandler+0x10>)
 8001a66:	f001 fb39 	bl	80030dc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8001a6a:	bf00      	nop
 8001a6c:	bd80      	pop	{r7, pc}
 8001a6e:	bf00      	nop
 8001a70:	20000360 	.word	0x20000360

08001a74 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001a78:	4802      	ldr	r0, [pc, #8]	; (8001a84 <TIM2_IRQHandler+0x10>)
 8001a7a:	f001 fb2f 	bl	80030dc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001a7e:	bf00      	nop
 8001a80:	bd80      	pop	{r7, pc}
 8001a82:	bf00      	nop
 8001a84:	200004e4 	.word	0x200004e4

08001a88 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001a8c:	4802      	ldr	r0, [pc, #8]	; (8001a98 <USART3_IRQHandler+0x10>)
 8001a8e:	f002 fc19 	bl	80042c4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001a92:	bf00      	nop
 8001a94:	bd80      	pop	{r7, pc}
 8001a96:	bf00      	nop
 8001a98:	20000480 	.word	0x20000480

08001a9c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001a9c:	b480      	push	{r7}
 8001a9e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001aa0:	bf00      	nop
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	bc80      	pop	{r7}
 8001aa6:	4770      	bx	lr

08001aa8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001aa8:	f7ff fff8 	bl	8001a9c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001aac:	480b      	ldr	r0, [pc, #44]	; (8001adc <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001aae:	490c      	ldr	r1, [pc, #48]	; (8001ae0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001ab0:	4a0c      	ldr	r2, [pc, #48]	; (8001ae4 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001ab2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ab4:	e002      	b.n	8001abc <LoopCopyDataInit>

08001ab6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ab6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ab8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001aba:	3304      	adds	r3, #4

08001abc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001abc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001abe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ac0:	d3f9      	bcc.n	8001ab6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ac2:	4a09      	ldr	r2, [pc, #36]	; (8001ae8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001ac4:	4c09      	ldr	r4, [pc, #36]	; (8001aec <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001ac6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ac8:	e001      	b.n	8001ace <LoopFillZerobss>

08001aca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001aca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001acc:	3204      	adds	r2, #4

08001ace <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ace:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ad0:	d3fb      	bcc.n	8001aca <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001ad2:	f004 fd65 	bl	80065a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001ad6:	f7ff f94f 	bl	8000d78 <main>
  bx lr
 8001ada:	4770      	bx	lr
  ldr r0, =_sdata
 8001adc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ae0:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8001ae4:	0800682c 	.word	0x0800682c
  ldr r2, =_sbss
 8001ae8:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8001aec:	20001284 	.word	0x20001284

08001af0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001af0:	e7fe      	b.n	8001af0 <ADC1_2_IRQHandler>
	...

08001af4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001af8:	4b08      	ldr	r3, [pc, #32]	; (8001b1c <HAL_Init+0x28>)
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	4a07      	ldr	r2, [pc, #28]	; (8001b1c <HAL_Init+0x28>)
 8001afe:	f043 0310 	orr.w	r3, r3, #16
 8001b02:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b04:	2003      	movs	r0, #3
 8001b06:	f000 f8d1 	bl	8001cac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b0a:	200f      	movs	r0, #15
 8001b0c:	f7ff ff16 	bl	800193c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b10:	f7ff fd74 	bl	80015fc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b14:	2300      	movs	r3, #0
}
 8001b16:	4618      	mov	r0, r3
 8001b18:	bd80      	pop	{r7, pc}
 8001b1a:	bf00      	nop
 8001b1c:	40022000 	.word	0x40022000

08001b20 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b20:	b480      	push	{r7}
 8001b22:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b24:	4b05      	ldr	r3, [pc, #20]	; (8001b3c <HAL_IncTick+0x1c>)
 8001b26:	781b      	ldrb	r3, [r3, #0]
 8001b28:	461a      	mov	r2, r3
 8001b2a:	4b05      	ldr	r3, [pc, #20]	; (8001b40 <HAL_IncTick+0x20>)
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	4413      	add	r3, r2
 8001b30:	4a03      	ldr	r2, [pc, #12]	; (8001b40 <HAL_IncTick+0x20>)
 8001b32:	6013      	str	r3, [r2, #0]
}
 8001b34:	bf00      	nop
 8001b36:	46bd      	mov	sp, r7
 8001b38:	bc80      	pop	{r7}
 8001b3a:	4770      	bx	lr
 8001b3c:	2000000c 	.word	0x2000000c
 8001b40:	2000052c 	.word	0x2000052c

08001b44 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b44:	b480      	push	{r7}
 8001b46:	af00      	add	r7, sp, #0
  return uwTick;
 8001b48:	4b02      	ldr	r3, [pc, #8]	; (8001b54 <HAL_GetTick+0x10>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
}
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	bc80      	pop	{r7}
 8001b52:	4770      	bx	lr
 8001b54:	2000052c 	.word	0x2000052c

08001b58 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	b085      	sub	sp, #20
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	f003 0307 	and.w	r3, r3, #7
 8001b66:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b68:	4b0c      	ldr	r3, [pc, #48]	; (8001b9c <__NVIC_SetPriorityGrouping+0x44>)
 8001b6a:	68db      	ldr	r3, [r3, #12]
 8001b6c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b6e:	68ba      	ldr	r2, [r7, #8]
 8001b70:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001b74:	4013      	ands	r3, r2
 8001b76:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b7c:	68bb      	ldr	r3, [r7, #8]
 8001b7e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b80:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001b84:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b88:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b8a:	4a04      	ldr	r2, [pc, #16]	; (8001b9c <__NVIC_SetPriorityGrouping+0x44>)
 8001b8c:	68bb      	ldr	r3, [r7, #8]
 8001b8e:	60d3      	str	r3, [r2, #12]
}
 8001b90:	bf00      	nop
 8001b92:	3714      	adds	r7, #20
 8001b94:	46bd      	mov	sp, r7
 8001b96:	bc80      	pop	{r7}
 8001b98:	4770      	bx	lr
 8001b9a:	bf00      	nop
 8001b9c:	e000ed00 	.word	0xe000ed00

08001ba0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ba4:	4b04      	ldr	r3, [pc, #16]	; (8001bb8 <__NVIC_GetPriorityGrouping+0x18>)
 8001ba6:	68db      	ldr	r3, [r3, #12]
 8001ba8:	0a1b      	lsrs	r3, r3, #8
 8001baa:	f003 0307 	and.w	r3, r3, #7
}
 8001bae:	4618      	mov	r0, r3
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	bc80      	pop	{r7}
 8001bb4:	4770      	bx	lr
 8001bb6:	bf00      	nop
 8001bb8:	e000ed00 	.word	0xe000ed00

08001bbc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	b083      	sub	sp, #12
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	4603      	mov	r3, r0
 8001bc4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	db0b      	blt.n	8001be6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001bce:	79fb      	ldrb	r3, [r7, #7]
 8001bd0:	f003 021f 	and.w	r2, r3, #31
 8001bd4:	4906      	ldr	r1, [pc, #24]	; (8001bf0 <__NVIC_EnableIRQ+0x34>)
 8001bd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bda:	095b      	lsrs	r3, r3, #5
 8001bdc:	2001      	movs	r0, #1
 8001bde:	fa00 f202 	lsl.w	r2, r0, r2
 8001be2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001be6:	bf00      	nop
 8001be8:	370c      	adds	r7, #12
 8001bea:	46bd      	mov	sp, r7
 8001bec:	bc80      	pop	{r7}
 8001bee:	4770      	bx	lr
 8001bf0:	e000e100 	.word	0xe000e100

08001bf4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	b083      	sub	sp, #12
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	6039      	str	r1, [r7, #0]
 8001bfe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	db0a      	blt.n	8001c1e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c08:	683b      	ldr	r3, [r7, #0]
 8001c0a:	b2da      	uxtb	r2, r3
 8001c0c:	490c      	ldr	r1, [pc, #48]	; (8001c40 <__NVIC_SetPriority+0x4c>)
 8001c0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c12:	0112      	lsls	r2, r2, #4
 8001c14:	b2d2      	uxtb	r2, r2
 8001c16:	440b      	add	r3, r1
 8001c18:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c1c:	e00a      	b.n	8001c34 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c1e:	683b      	ldr	r3, [r7, #0]
 8001c20:	b2da      	uxtb	r2, r3
 8001c22:	4908      	ldr	r1, [pc, #32]	; (8001c44 <__NVIC_SetPriority+0x50>)
 8001c24:	79fb      	ldrb	r3, [r7, #7]
 8001c26:	f003 030f 	and.w	r3, r3, #15
 8001c2a:	3b04      	subs	r3, #4
 8001c2c:	0112      	lsls	r2, r2, #4
 8001c2e:	b2d2      	uxtb	r2, r2
 8001c30:	440b      	add	r3, r1
 8001c32:	761a      	strb	r2, [r3, #24]
}
 8001c34:	bf00      	nop
 8001c36:	370c      	adds	r7, #12
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	bc80      	pop	{r7}
 8001c3c:	4770      	bx	lr
 8001c3e:	bf00      	nop
 8001c40:	e000e100 	.word	0xe000e100
 8001c44:	e000ed00 	.word	0xe000ed00

08001c48 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c48:	b480      	push	{r7}
 8001c4a:	b089      	sub	sp, #36	; 0x24
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	60f8      	str	r0, [r7, #12]
 8001c50:	60b9      	str	r1, [r7, #8]
 8001c52:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	f003 0307 	and.w	r3, r3, #7
 8001c5a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c5c:	69fb      	ldr	r3, [r7, #28]
 8001c5e:	f1c3 0307 	rsb	r3, r3, #7
 8001c62:	2b04      	cmp	r3, #4
 8001c64:	bf28      	it	cs
 8001c66:	2304      	movcs	r3, #4
 8001c68:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c6a:	69fb      	ldr	r3, [r7, #28]
 8001c6c:	3304      	adds	r3, #4
 8001c6e:	2b06      	cmp	r3, #6
 8001c70:	d902      	bls.n	8001c78 <NVIC_EncodePriority+0x30>
 8001c72:	69fb      	ldr	r3, [r7, #28]
 8001c74:	3b03      	subs	r3, #3
 8001c76:	e000      	b.n	8001c7a <NVIC_EncodePriority+0x32>
 8001c78:	2300      	movs	r3, #0
 8001c7a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c7c:	f04f 32ff 	mov.w	r2, #4294967295
 8001c80:	69bb      	ldr	r3, [r7, #24]
 8001c82:	fa02 f303 	lsl.w	r3, r2, r3
 8001c86:	43da      	mvns	r2, r3
 8001c88:	68bb      	ldr	r3, [r7, #8]
 8001c8a:	401a      	ands	r2, r3
 8001c8c:	697b      	ldr	r3, [r7, #20]
 8001c8e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c90:	f04f 31ff 	mov.w	r1, #4294967295
 8001c94:	697b      	ldr	r3, [r7, #20]
 8001c96:	fa01 f303 	lsl.w	r3, r1, r3
 8001c9a:	43d9      	mvns	r1, r3
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ca0:	4313      	orrs	r3, r2
         );
}
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	3724      	adds	r7, #36	; 0x24
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	bc80      	pop	{r7}
 8001caa:	4770      	bx	lr

08001cac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b082      	sub	sp, #8
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001cb4:	6878      	ldr	r0, [r7, #4]
 8001cb6:	f7ff ff4f 	bl	8001b58 <__NVIC_SetPriorityGrouping>
}
 8001cba:	bf00      	nop
 8001cbc:	3708      	adds	r7, #8
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	bd80      	pop	{r7, pc}

08001cc2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001cc2:	b580      	push	{r7, lr}
 8001cc4:	b086      	sub	sp, #24
 8001cc6:	af00      	add	r7, sp, #0
 8001cc8:	4603      	mov	r3, r0
 8001cca:	60b9      	str	r1, [r7, #8]
 8001ccc:	607a      	str	r2, [r7, #4]
 8001cce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001cd4:	f7ff ff64 	bl	8001ba0 <__NVIC_GetPriorityGrouping>
 8001cd8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001cda:	687a      	ldr	r2, [r7, #4]
 8001cdc:	68b9      	ldr	r1, [r7, #8]
 8001cde:	6978      	ldr	r0, [r7, #20]
 8001ce0:	f7ff ffb2 	bl	8001c48 <NVIC_EncodePriority>
 8001ce4:	4602      	mov	r2, r0
 8001ce6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001cea:	4611      	mov	r1, r2
 8001cec:	4618      	mov	r0, r3
 8001cee:	f7ff ff81 	bl	8001bf4 <__NVIC_SetPriority>
}
 8001cf2:	bf00      	nop
 8001cf4:	3718      	adds	r7, #24
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	bd80      	pop	{r7, pc}

08001cfa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cfa:	b580      	push	{r7, lr}
 8001cfc:	b082      	sub	sp, #8
 8001cfe:	af00      	add	r7, sp, #0
 8001d00:	4603      	mov	r3, r0
 8001d02:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d08:	4618      	mov	r0, r3
 8001d0a:	f7ff ff57 	bl	8001bbc <__NVIC_EnableIRQ>
}
 8001d0e:	bf00      	nop
 8001d10:	3708      	adds	r7, #8
 8001d12:	46bd      	mov	sp, r7
 8001d14:	bd80      	pop	{r7, pc}

08001d16 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001d16:	b480      	push	{r7}
 8001d18:	b085      	sub	sp, #20
 8001d1a:	af00      	add	r7, sp, #0
 8001d1c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001d1e:	2300      	movs	r3, #0
 8001d20:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001d28:	b2db      	uxtb	r3, r3
 8001d2a:	2b02      	cmp	r3, #2
 8001d2c:	d008      	beq.n	8001d40 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	2204      	movs	r2, #4
 8001d32:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	2200      	movs	r2, #0
 8001d38:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001d3c:	2301      	movs	r3, #1
 8001d3e:	e020      	b.n	8001d82 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	681a      	ldr	r2, [r3, #0]
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f022 020e 	bic.w	r2, r2, #14
 8001d4e:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	681a      	ldr	r2, [r3, #0]
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f022 0201 	bic.w	r2, r2, #1
 8001d5e:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d68:	2101      	movs	r1, #1
 8001d6a:	fa01 f202 	lsl.w	r2, r1, r2
 8001d6e:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	2201      	movs	r2, #1
 8001d74:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001d80:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d82:	4618      	mov	r0, r3
 8001d84:	3714      	adds	r7, #20
 8001d86:	46bd      	mov	sp, r7
 8001d88:	bc80      	pop	{r7}
 8001d8a:	4770      	bx	lr

08001d8c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b084      	sub	sp, #16
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001d94:	2300      	movs	r3, #0
 8001d96:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001d9e:	b2db      	uxtb	r3, r3
 8001da0:	2b02      	cmp	r3, #2
 8001da2:	d005      	beq.n	8001db0 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	2204      	movs	r2, #4
 8001da8:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001daa:	2301      	movs	r3, #1
 8001dac:	73fb      	strb	r3, [r7, #15]
 8001dae:	e051      	b.n	8001e54 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	681a      	ldr	r2, [r3, #0]
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f022 020e 	bic.w	r2, r2, #14
 8001dbe:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	681a      	ldr	r2, [r3, #0]
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f022 0201 	bic.w	r2, r2, #1
 8001dce:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	4a22      	ldr	r2, [pc, #136]	; (8001e60 <HAL_DMA_Abort_IT+0xd4>)
 8001dd6:	4293      	cmp	r3, r2
 8001dd8:	d029      	beq.n	8001e2e <HAL_DMA_Abort_IT+0xa2>
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	4a21      	ldr	r2, [pc, #132]	; (8001e64 <HAL_DMA_Abort_IT+0xd8>)
 8001de0:	4293      	cmp	r3, r2
 8001de2:	d022      	beq.n	8001e2a <HAL_DMA_Abort_IT+0x9e>
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	4a1f      	ldr	r2, [pc, #124]	; (8001e68 <HAL_DMA_Abort_IT+0xdc>)
 8001dea:	4293      	cmp	r3, r2
 8001dec:	d01a      	beq.n	8001e24 <HAL_DMA_Abort_IT+0x98>
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	4a1e      	ldr	r2, [pc, #120]	; (8001e6c <HAL_DMA_Abort_IT+0xe0>)
 8001df4:	4293      	cmp	r3, r2
 8001df6:	d012      	beq.n	8001e1e <HAL_DMA_Abort_IT+0x92>
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	4a1c      	ldr	r2, [pc, #112]	; (8001e70 <HAL_DMA_Abort_IT+0xe4>)
 8001dfe:	4293      	cmp	r3, r2
 8001e00:	d00a      	beq.n	8001e18 <HAL_DMA_Abort_IT+0x8c>
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	4a1b      	ldr	r2, [pc, #108]	; (8001e74 <HAL_DMA_Abort_IT+0xe8>)
 8001e08:	4293      	cmp	r3, r2
 8001e0a:	d102      	bne.n	8001e12 <HAL_DMA_Abort_IT+0x86>
 8001e0c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001e10:	e00e      	b.n	8001e30 <HAL_DMA_Abort_IT+0xa4>
 8001e12:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001e16:	e00b      	b.n	8001e30 <HAL_DMA_Abort_IT+0xa4>
 8001e18:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001e1c:	e008      	b.n	8001e30 <HAL_DMA_Abort_IT+0xa4>
 8001e1e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e22:	e005      	b.n	8001e30 <HAL_DMA_Abort_IT+0xa4>
 8001e24:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001e28:	e002      	b.n	8001e30 <HAL_DMA_Abort_IT+0xa4>
 8001e2a:	2310      	movs	r3, #16
 8001e2c:	e000      	b.n	8001e30 <HAL_DMA_Abort_IT+0xa4>
 8001e2e:	2301      	movs	r3, #1
 8001e30:	4a11      	ldr	r2, [pc, #68]	; (8001e78 <HAL_DMA_Abort_IT+0xec>)
 8001e32:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	2201      	movs	r2, #1
 8001e38:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	2200      	movs	r2, #0
 8001e40:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d003      	beq.n	8001e54 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e50:	6878      	ldr	r0, [r7, #4]
 8001e52:	4798      	blx	r3
    } 
  }
  return status;
 8001e54:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e56:	4618      	mov	r0, r3
 8001e58:	3710      	adds	r7, #16
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	bd80      	pop	{r7, pc}
 8001e5e:	bf00      	nop
 8001e60:	40020008 	.word	0x40020008
 8001e64:	4002001c 	.word	0x4002001c
 8001e68:	40020030 	.word	0x40020030
 8001e6c:	40020044 	.word	0x40020044
 8001e70:	40020058 	.word	0x40020058
 8001e74:	4002006c 	.word	0x4002006c
 8001e78:	40020000 	.word	0x40020000

08001e7c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e7c:	b480      	push	{r7}
 8001e7e:	b08b      	sub	sp, #44	; 0x2c
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
 8001e84:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001e86:	2300      	movs	r3, #0
 8001e88:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e8e:	e169      	b.n	8002164 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001e90:	2201      	movs	r2, #1
 8001e92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e94:	fa02 f303 	lsl.w	r3, r2, r3
 8001e98:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001e9a:	683b      	ldr	r3, [r7, #0]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	69fa      	ldr	r2, [r7, #28]
 8001ea0:	4013      	ands	r3, r2
 8001ea2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001ea4:	69ba      	ldr	r2, [r7, #24]
 8001ea6:	69fb      	ldr	r3, [r7, #28]
 8001ea8:	429a      	cmp	r2, r3
 8001eaa:	f040 8158 	bne.w	800215e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001eae:	683b      	ldr	r3, [r7, #0]
 8001eb0:	685b      	ldr	r3, [r3, #4]
 8001eb2:	4a9a      	ldr	r2, [pc, #616]	; (800211c <HAL_GPIO_Init+0x2a0>)
 8001eb4:	4293      	cmp	r3, r2
 8001eb6:	d05e      	beq.n	8001f76 <HAL_GPIO_Init+0xfa>
 8001eb8:	4a98      	ldr	r2, [pc, #608]	; (800211c <HAL_GPIO_Init+0x2a0>)
 8001eba:	4293      	cmp	r3, r2
 8001ebc:	d875      	bhi.n	8001faa <HAL_GPIO_Init+0x12e>
 8001ebe:	4a98      	ldr	r2, [pc, #608]	; (8002120 <HAL_GPIO_Init+0x2a4>)
 8001ec0:	4293      	cmp	r3, r2
 8001ec2:	d058      	beq.n	8001f76 <HAL_GPIO_Init+0xfa>
 8001ec4:	4a96      	ldr	r2, [pc, #600]	; (8002120 <HAL_GPIO_Init+0x2a4>)
 8001ec6:	4293      	cmp	r3, r2
 8001ec8:	d86f      	bhi.n	8001faa <HAL_GPIO_Init+0x12e>
 8001eca:	4a96      	ldr	r2, [pc, #600]	; (8002124 <HAL_GPIO_Init+0x2a8>)
 8001ecc:	4293      	cmp	r3, r2
 8001ece:	d052      	beq.n	8001f76 <HAL_GPIO_Init+0xfa>
 8001ed0:	4a94      	ldr	r2, [pc, #592]	; (8002124 <HAL_GPIO_Init+0x2a8>)
 8001ed2:	4293      	cmp	r3, r2
 8001ed4:	d869      	bhi.n	8001faa <HAL_GPIO_Init+0x12e>
 8001ed6:	4a94      	ldr	r2, [pc, #592]	; (8002128 <HAL_GPIO_Init+0x2ac>)
 8001ed8:	4293      	cmp	r3, r2
 8001eda:	d04c      	beq.n	8001f76 <HAL_GPIO_Init+0xfa>
 8001edc:	4a92      	ldr	r2, [pc, #584]	; (8002128 <HAL_GPIO_Init+0x2ac>)
 8001ede:	4293      	cmp	r3, r2
 8001ee0:	d863      	bhi.n	8001faa <HAL_GPIO_Init+0x12e>
 8001ee2:	4a92      	ldr	r2, [pc, #584]	; (800212c <HAL_GPIO_Init+0x2b0>)
 8001ee4:	4293      	cmp	r3, r2
 8001ee6:	d046      	beq.n	8001f76 <HAL_GPIO_Init+0xfa>
 8001ee8:	4a90      	ldr	r2, [pc, #576]	; (800212c <HAL_GPIO_Init+0x2b0>)
 8001eea:	4293      	cmp	r3, r2
 8001eec:	d85d      	bhi.n	8001faa <HAL_GPIO_Init+0x12e>
 8001eee:	2b12      	cmp	r3, #18
 8001ef0:	d82a      	bhi.n	8001f48 <HAL_GPIO_Init+0xcc>
 8001ef2:	2b12      	cmp	r3, #18
 8001ef4:	d859      	bhi.n	8001faa <HAL_GPIO_Init+0x12e>
 8001ef6:	a201      	add	r2, pc, #4	; (adr r2, 8001efc <HAL_GPIO_Init+0x80>)
 8001ef8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001efc:	08001f77 	.word	0x08001f77
 8001f00:	08001f51 	.word	0x08001f51
 8001f04:	08001f63 	.word	0x08001f63
 8001f08:	08001fa5 	.word	0x08001fa5
 8001f0c:	08001fab 	.word	0x08001fab
 8001f10:	08001fab 	.word	0x08001fab
 8001f14:	08001fab 	.word	0x08001fab
 8001f18:	08001fab 	.word	0x08001fab
 8001f1c:	08001fab 	.word	0x08001fab
 8001f20:	08001fab 	.word	0x08001fab
 8001f24:	08001fab 	.word	0x08001fab
 8001f28:	08001fab 	.word	0x08001fab
 8001f2c:	08001fab 	.word	0x08001fab
 8001f30:	08001fab 	.word	0x08001fab
 8001f34:	08001fab 	.word	0x08001fab
 8001f38:	08001fab 	.word	0x08001fab
 8001f3c:	08001fab 	.word	0x08001fab
 8001f40:	08001f59 	.word	0x08001f59
 8001f44:	08001f6d 	.word	0x08001f6d
 8001f48:	4a79      	ldr	r2, [pc, #484]	; (8002130 <HAL_GPIO_Init+0x2b4>)
 8001f4a:	4293      	cmp	r3, r2
 8001f4c:	d013      	beq.n	8001f76 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001f4e:	e02c      	b.n	8001faa <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001f50:	683b      	ldr	r3, [r7, #0]
 8001f52:	68db      	ldr	r3, [r3, #12]
 8001f54:	623b      	str	r3, [r7, #32]
          break;
 8001f56:	e029      	b.n	8001fac <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	68db      	ldr	r3, [r3, #12]
 8001f5c:	3304      	adds	r3, #4
 8001f5e:	623b      	str	r3, [r7, #32]
          break;
 8001f60:	e024      	b.n	8001fac <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001f62:	683b      	ldr	r3, [r7, #0]
 8001f64:	68db      	ldr	r3, [r3, #12]
 8001f66:	3308      	adds	r3, #8
 8001f68:	623b      	str	r3, [r7, #32]
          break;
 8001f6a:	e01f      	b.n	8001fac <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001f6c:	683b      	ldr	r3, [r7, #0]
 8001f6e:	68db      	ldr	r3, [r3, #12]
 8001f70:	330c      	adds	r3, #12
 8001f72:	623b      	str	r3, [r7, #32]
          break;
 8001f74:	e01a      	b.n	8001fac <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001f76:	683b      	ldr	r3, [r7, #0]
 8001f78:	689b      	ldr	r3, [r3, #8]
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d102      	bne.n	8001f84 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001f7e:	2304      	movs	r3, #4
 8001f80:	623b      	str	r3, [r7, #32]
          break;
 8001f82:	e013      	b.n	8001fac <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001f84:	683b      	ldr	r3, [r7, #0]
 8001f86:	689b      	ldr	r3, [r3, #8]
 8001f88:	2b01      	cmp	r3, #1
 8001f8a:	d105      	bne.n	8001f98 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001f8c:	2308      	movs	r3, #8
 8001f8e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	69fa      	ldr	r2, [r7, #28]
 8001f94:	611a      	str	r2, [r3, #16]
          break;
 8001f96:	e009      	b.n	8001fac <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001f98:	2308      	movs	r3, #8
 8001f9a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	69fa      	ldr	r2, [r7, #28]
 8001fa0:	615a      	str	r2, [r3, #20]
          break;
 8001fa2:	e003      	b.n	8001fac <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	623b      	str	r3, [r7, #32]
          break;
 8001fa8:	e000      	b.n	8001fac <HAL_GPIO_Init+0x130>
          break;
 8001faa:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001fac:	69bb      	ldr	r3, [r7, #24]
 8001fae:	2bff      	cmp	r3, #255	; 0xff
 8001fb0:	d801      	bhi.n	8001fb6 <HAL_GPIO_Init+0x13a>
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	e001      	b.n	8001fba <HAL_GPIO_Init+0x13e>
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	3304      	adds	r3, #4
 8001fba:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001fbc:	69bb      	ldr	r3, [r7, #24]
 8001fbe:	2bff      	cmp	r3, #255	; 0xff
 8001fc0:	d802      	bhi.n	8001fc8 <HAL_GPIO_Init+0x14c>
 8001fc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fc4:	009b      	lsls	r3, r3, #2
 8001fc6:	e002      	b.n	8001fce <HAL_GPIO_Init+0x152>
 8001fc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fca:	3b08      	subs	r3, #8
 8001fcc:	009b      	lsls	r3, r3, #2
 8001fce:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001fd0:	697b      	ldr	r3, [r7, #20]
 8001fd2:	681a      	ldr	r2, [r3, #0]
 8001fd4:	210f      	movs	r1, #15
 8001fd6:	693b      	ldr	r3, [r7, #16]
 8001fd8:	fa01 f303 	lsl.w	r3, r1, r3
 8001fdc:	43db      	mvns	r3, r3
 8001fde:	401a      	ands	r2, r3
 8001fe0:	6a39      	ldr	r1, [r7, #32]
 8001fe2:	693b      	ldr	r3, [r7, #16]
 8001fe4:	fa01 f303 	lsl.w	r3, r1, r3
 8001fe8:	431a      	orrs	r2, r3
 8001fea:	697b      	ldr	r3, [r7, #20]
 8001fec:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001fee:	683b      	ldr	r3, [r7, #0]
 8001ff0:	685b      	ldr	r3, [r3, #4]
 8001ff2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	f000 80b1 	beq.w	800215e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001ffc:	4b4d      	ldr	r3, [pc, #308]	; (8002134 <HAL_GPIO_Init+0x2b8>)
 8001ffe:	699b      	ldr	r3, [r3, #24]
 8002000:	4a4c      	ldr	r2, [pc, #304]	; (8002134 <HAL_GPIO_Init+0x2b8>)
 8002002:	f043 0301 	orr.w	r3, r3, #1
 8002006:	6193      	str	r3, [r2, #24]
 8002008:	4b4a      	ldr	r3, [pc, #296]	; (8002134 <HAL_GPIO_Init+0x2b8>)
 800200a:	699b      	ldr	r3, [r3, #24]
 800200c:	f003 0301 	and.w	r3, r3, #1
 8002010:	60bb      	str	r3, [r7, #8]
 8002012:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002014:	4a48      	ldr	r2, [pc, #288]	; (8002138 <HAL_GPIO_Init+0x2bc>)
 8002016:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002018:	089b      	lsrs	r3, r3, #2
 800201a:	3302      	adds	r3, #2
 800201c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002020:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002022:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002024:	f003 0303 	and.w	r3, r3, #3
 8002028:	009b      	lsls	r3, r3, #2
 800202a:	220f      	movs	r2, #15
 800202c:	fa02 f303 	lsl.w	r3, r2, r3
 8002030:	43db      	mvns	r3, r3
 8002032:	68fa      	ldr	r2, [r7, #12]
 8002034:	4013      	ands	r3, r2
 8002036:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	4a40      	ldr	r2, [pc, #256]	; (800213c <HAL_GPIO_Init+0x2c0>)
 800203c:	4293      	cmp	r3, r2
 800203e:	d013      	beq.n	8002068 <HAL_GPIO_Init+0x1ec>
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	4a3f      	ldr	r2, [pc, #252]	; (8002140 <HAL_GPIO_Init+0x2c4>)
 8002044:	4293      	cmp	r3, r2
 8002046:	d00d      	beq.n	8002064 <HAL_GPIO_Init+0x1e8>
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	4a3e      	ldr	r2, [pc, #248]	; (8002144 <HAL_GPIO_Init+0x2c8>)
 800204c:	4293      	cmp	r3, r2
 800204e:	d007      	beq.n	8002060 <HAL_GPIO_Init+0x1e4>
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	4a3d      	ldr	r2, [pc, #244]	; (8002148 <HAL_GPIO_Init+0x2cc>)
 8002054:	4293      	cmp	r3, r2
 8002056:	d101      	bne.n	800205c <HAL_GPIO_Init+0x1e0>
 8002058:	2303      	movs	r3, #3
 800205a:	e006      	b.n	800206a <HAL_GPIO_Init+0x1ee>
 800205c:	2304      	movs	r3, #4
 800205e:	e004      	b.n	800206a <HAL_GPIO_Init+0x1ee>
 8002060:	2302      	movs	r3, #2
 8002062:	e002      	b.n	800206a <HAL_GPIO_Init+0x1ee>
 8002064:	2301      	movs	r3, #1
 8002066:	e000      	b.n	800206a <HAL_GPIO_Init+0x1ee>
 8002068:	2300      	movs	r3, #0
 800206a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800206c:	f002 0203 	and.w	r2, r2, #3
 8002070:	0092      	lsls	r2, r2, #2
 8002072:	4093      	lsls	r3, r2
 8002074:	68fa      	ldr	r2, [r7, #12]
 8002076:	4313      	orrs	r3, r2
 8002078:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800207a:	492f      	ldr	r1, [pc, #188]	; (8002138 <HAL_GPIO_Init+0x2bc>)
 800207c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800207e:	089b      	lsrs	r3, r3, #2
 8002080:	3302      	adds	r3, #2
 8002082:	68fa      	ldr	r2, [r7, #12]
 8002084:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002088:	683b      	ldr	r3, [r7, #0]
 800208a:	685b      	ldr	r3, [r3, #4]
 800208c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002090:	2b00      	cmp	r3, #0
 8002092:	d006      	beq.n	80020a2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002094:	4b2d      	ldr	r3, [pc, #180]	; (800214c <HAL_GPIO_Init+0x2d0>)
 8002096:	689a      	ldr	r2, [r3, #8]
 8002098:	492c      	ldr	r1, [pc, #176]	; (800214c <HAL_GPIO_Init+0x2d0>)
 800209a:	69bb      	ldr	r3, [r7, #24]
 800209c:	4313      	orrs	r3, r2
 800209e:	608b      	str	r3, [r1, #8]
 80020a0:	e006      	b.n	80020b0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80020a2:	4b2a      	ldr	r3, [pc, #168]	; (800214c <HAL_GPIO_Init+0x2d0>)
 80020a4:	689a      	ldr	r2, [r3, #8]
 80020a6:	69bb      	ldr	r3, [r7, #24]
 80020a8:	43db      	mvns	r3, r3
 80020aa:	4928      	ldr	r1, [pc, #160]	; (800214c <HAL_GPIO_Init+0x2d0>)
 80020ac:	4013      	ands	r3, r2
 80020ae:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	685b      	ldr	r3, [r3, #4]
 80020b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d006      	beq.n	80020ca <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80020bc:	4b23      	ldr	r3, [pc, #140]	; (800214c <HAL_GPIO_Init+0x2d0>)
 80020be:	68da      	ldr	r2, [r3, #12]
 80020c0:	4922      	ldr	r1, [pc, #136]	; (800214c <HAL_GPIO_Init+0x2d0>)
 80020c2:	69bb      	ldr	r3, [r7, #24]
 80020c4:	4313      	orrs	r3, r2
 80020c6:	60cb      	str	r3, [r1, #12]
 80020c8:	e006      	b.n	80020d8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80020ca:	4b20      	ldr	r3, [pc, #128]	; (800214c <HAL_GPIO_Init+0x2d0>)
 80020cc:	68da      	ldr	r2, [r3, #12]
 80020ce:	69bb      	ldr	r3, [r7, #24]
 80020d0:	43db      	mvns	r3, r3
 80020d2:	491e      	ldr	r1, [pc, #120]	; (800214c <HAL_GPIO_Init+0x2d0>)
 80020d4:	4013      	ands	r3, r2
 80020d6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	685b      	ldr	r3, [r3, #4]
 80020dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d006      	beq.n	80020f2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80020e4:	4b19      	ldr	r3, [pc, #100]	; (800214c <HAL_GPIO_Init+0x2d0>)
 80020e6:	685a      	ldr	r2, [r3, #4]
 80020e8:	4918      	ldr	r1, [pc, #96]	; (800214c <HAL_GPIO_Init+0x2d0>)
 80020ea:	69bb      	ldr	r3, [r7, #24]
 80020ec:	4313      	orrs	r3, r2
 80020ee:	604b      	str	r3, [r1, #4]
 80020f0:	e006      	b.n	8002100 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80020f2:	4b16      	ldr	r3, [pc, #88]	; (800214c <HAL_GPIO_Init+0x2d0>)
 80020f4:	685a      	ldr	r2, [r3, #4]
 80020f6:	69bb      	ldr	r3, [r7, #24]
 80020f8:	43db      	mvns	r3, r3
 80020fa:	4914      	ldr	r1, [pc, #80]	; (800214c <HAL_GPIO_Init+0x2d0>)
 80020fc:	4013      	ands	r3, r2
 80020fe:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	685b      	ldr	r3, [r3, #4]
 8002104:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002108:	2b00      	cmp	r3, #0
 800210a:	d021      	beq.n	8002150 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800210c:	4b0f      	ldr	r3, [pc, #60]	; (800214c <HAL_GPIO_Init+0x2d0>)
 800210e:	681a      	ldr	r2, [r3, #0]
 8002110:	490e      	ldr	r1, [pc, #56]	; (800214c <HAL_GPIO_Init+0x2d0>)
 8002112:	69bb      	ldr	r3, [r7, #24]
 8002114:	4313      	orrs	r3, r2
 8002116:	600b      	str	r3, [r1, #0]
 8002118:	e021      	b.n	800215e <HAL_GPIO_Init+0x2e2>
 800211a:	bf00      	nop
 800211c:	10320000 	.word	0x10320000
 8002120:	10310000 	.word	0x10310000
 8002124:	10220000 	.word	0x10220000
 8002128:	10210000 	.word	0x10210000
 800212c:	10120000 	.word	0x10120000
 8002130:	10110000 	.word	0x10110000
 8002134:	40021000 	.word	0x40021000
 8002138:	40010000 	.word	0x40010000
 800213c:	40010800 	.word	0x40010800
 8002140:	40010c00 	.word	0x40010c00
 8002144:	40011000 	.word	0x40011000
 8002148:	40011400 	.word	0x40011400
 800214c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002150:	4b0b      	ldr	r3, [pc, #44]	; (8002180 <HAL_GPIO_Init+0x304>)
 8002152:	681a      	ldr	r2, [r3, #0]
 8002154:	69bb      	ldr	r3, [r7, #24]
 8002156:	43db      	mvns	r3, r3
 8002158:	4909      	ldr	r1, [pc, #36]	; (8002180 <HAL_GPIO_Init+0x304>)
 800215a:	4013      	ands	r3, r2
 800215c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800215e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002160:	3301      	adds	r3, #1
 8002162:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	681a      	ldr	r2, [r3, #0]
 8002168:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800216a:	fa22 f303 	lsr.w	r3, r2, r3
 800216e:	2b00      	cmp	r3, #0
 8002170:	f47f ae8e 	bne.w	8001e90 <HAL_GPIO_Init+0x14>
  }
}
 8002174:	bf00      	nop
 8002176:	bf00      	nop
 8002178:	372c      	adds	r7, #44	; 0x2c
 800217a:	46bd      	mov	sp, r7
 800217c:	bc80      	pop	{r7}
 800217e:	4770      	bx	lr
 8002180:	40010400 	.word	0x40010400

08002184 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002184:	b480      	push	{r7}
 8002186:	b083      	sub	sp, #12
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
 800218c:	460b      	mov	r3, r1
 800218e:	807b      	strh	r3, [r7, #2]
 8002190:	4613      	mov	r3, r2
 8002192:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002194:	787b      	ldrb	r3, [r7, #1]
 8002196:	2b00      	cmp	r3, #0
 8002198:	d003      	beq.n	80021a2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800219a:	887a      	ldrh	r2, [r7, #2]
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80021a0:	e003      	b.n	80021aa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80021a2:	887b      	ldrh	r3, [r7, #2]
 80021a4:	041a      	lsls	r2, r3, #16
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	611a      	str	r2, [r3, #16]
}
 80021aa:	bf00      	nop
 80021ac:	370c      	adds	r7, #12
 80021ae:	46bd      	mov	sp, r7
 80021b0:	bc80      	pop	{r7}
 80021b2:	4770      	bx	lr

080021b4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b086      	sub	sp, #24
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d101      	bne.n	80021c6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80021c2:	2301      	movs	r3, #1
 80021c4:	e272      	b.n	80026ac <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f003 0301 	and.w	r3, r3, #1
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	f000 8087 	beq.w	80022e2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80021d4:	4b92      	ldr	r3, [pc, #584]	; (8002420 <HAL_RCC_OscConfig+0x26c>)
 80021d6:	685b      	ldr	r3, [r3, #4]
 80021d8:	f003 030c 	and.w	r3, r3, #12
 80021dc:	2b04      	cmp	r3, #4
 80021de:	d00c      	beq.n	80021fa <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80021e0:	4b8f      	ldr	r3, [pc, #572]	; (8002420 <HAL_RCC_OscConfig+0x26c>)
 80021e2:	685b      	ldr	r3, [r3, #4]
 80021e4:	f003 030c 	and.w	r3, r3, #12
 80021e8:	2b08      	cmp	r3, #8
 80021ea:	d112      	bne.n	8002212 <HAL_RCC_OscConfig+0x5e>
 80021ec:	4b8c      	ldr	r3, [pc, #560]	; (8002420 <HAL_RCC_OscConfig+0x26c>)
 80021ee:	685b      	ldr	r3, [r3, #4]
 80021f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80021f8:	d10b      	bne.n	8002212 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021fa:	4b89      	ldr	r3, [pc, #548]	; (8002420 <HAL_RCC_OscConfig+0x26c>)
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002202:	2b00      	cmp	r3, #0
 8002204:	d06c      	beq.n	80022e0 <HAL_RCC_OscConfig+0x12c>
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	685b      	ldr	r3, [r3, #4]
 800220a:	2b00      	cmp	r3, #0
 800220c:	d168      	bne.n	80022e0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800220e:	2301      	movs	r3, #1
 8002210:	e24c      	b.n	80026ac <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	685b      	ldr	r3, [r3, #4]
 8002216:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800221a:	d106      	bne.n	800222a <HAL_RCC_OscConfig+0x76>
 800221c:	4b80      	ldr	r3, [pc, #512]	; (8002420 <HAL_RCC_OscConfig+0x26c>)
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	4a7f      	ldr	r2, [pc, #508]	; (8002420 <HAL_RCC_OscConfig+0x26c>)
 8002222:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002226:	6013      	str	r3, [r2, #0]
 8002228:	e02e      	b.n	8002288 <HAL_RCC_OscConfig+0xd4>
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	685b      	ldr	r3, [r3, #4]
 800222e:	2b00      	cmp	r3, #0
 8002230:	d10c      	bne.n	800224c <HAL_RCC_OscConfig+0x98>
 8002232:	4b7b      	ldr	r3, [pc, #492]	; (8002420 <HAL_RCC_OscConfig+0x26c>)
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	4a7a      	ldr	r2, [pc, #488]	; (8002420 <HAL_RCC_OscConfig+0x26c>)
 8002238:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800223c:	6013      	str	r3, [r2, #0]
 800223e:	4b78      	ldr	r3, [pc, #480]	; (8002420 <HAL_RCC_OscConfig+0x26c>)
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	4a77      	ldr	r2, [pc, #476]	; (8002420 <HAL_RCC_OscConfig+0x26c>)
 8002244:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002248:	6013      	str	r3, [r2, #0]
 800224a:	e01d      	b.n	8002288 <HAL_RCC_OscConfig+0xd4>
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	685b      	ldr	r3, [r3, #4]
 8002250:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002254:	d10c      	bne.n	8002270 <HAL_RCC_OscConfig+0xbc>
 8002256:	4b72      	ldr	r3, [pc, #456]	; (8002420 <HAL_RCC_OscConfig+0x26c>)
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	4a71      	ldr	r2, [pc, #452]	; (8002420 <HAL_RCC_OscConfig+0x26c>)
 800225c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002260:	6013      	str	r3, [r2, #0]
 8002262:	4b6f      	ldr	r3, [pc, #444]	; (8002420 <HAL_RCC_OscConfig+0x26c>)
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	4a6e      	ldr	r2, [pc, #440]	; (8002420 <HAL_RCC_OscConfig+0x26c>)
 8002268:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800226c:	6013      	str	r3, [r2, #0]
 800226e:	e00b      	b.n	8002288 <HAL_RCC_OscConfig+0xd4>
 8002270:	4b6b      	ldr	r3, [pc, #428]	; (8002420 <HAL_RCC_OscConfig+0x26c>)
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	4a6a      	ldr	r2, [pc, #424]	; (8002420 <HAL_RCC_OscConfig+0x26c>)
 8002276:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800227a:	6013      	str	r3, [r2, #0]
 800227c:	4b68      	ldr	r3, [pc, #416]	; (8002420 <HAL_RCC_OscConfig+0x26c>)
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	4a67      	ldr	r2, [pc, #412]	; (8002420 <HAL_RCC_OscConfig+0x26c>)
 8002282:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002286:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	685b      	ldr	r3, [r3, #4]
 800228c:	2b00      	cmp	r3, #0
 800228e:	d013      	beq.n	80022b8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002290:	f7ff fc58 	bl	8001b44 <HAL_GetTick>
 8002294:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002296:	e008      	b.n	80022aa <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002298:	f7ff fc54 	bl	8001b44 <HAL_GetTick>
 800229c:	4602      	mov	r2, r0
 800229e:	693b      	ldr	r3, [r7, #16]
 80022a0:	1ad3      	subs	r3, r2, r3
 80022a2:	2b64      	cmp	r3, #100	; 0x64
 80022a4:	d901      	bls.n	80022aa <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80022a6:	2303      	movs	r3, #3
 80022a8:	e200      	b.n	80026ac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022aa:	4b5d      	ldr	r3, [pc, #372]	; (8002420 <HAL_RCC_OscConfig+0x26c>)
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d0f0      	beq.n	8002298 <HAL_RCC_OscConfig+0xe4>
 80022b6:	e014      	b.n	80022e2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022b8:	f7ff fc44 	bl	8001b44 <HAL_GetTick>
 80022bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022be:	e008      	b.n	80022d2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80022c0:	f7ff fc40 	bl	8001b44 <HAL_GetTick>
 80022c4:	4602      	mov	r2, r0
 80022c6:	693b      	ldr	r3, [r7, #16]
 80022c8:	1ad3      	subs	r3, r2, r3
 80022ca:	2b64      	cmp	r3, #100	; 0x64
 80022cc:	d901      	bls.n	80022d2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80022ce:	2303      	movs	r3, #3
 80022d0:	e1ec      	b.n	80026ac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022d2:	4b53      	ldr	r3, [pc, #332]	; (8002420 <HAL_RCC_OscConfig+0x26c>)
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d1f0      	bne.n	80022c0 <HAL_RCC_OscConfig+0x10c>
 80022de:	e000      	b.n	80022e2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f003 0302 	and.w	r3, r3, #2
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d063      	beq.n	80023b6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80022ee:	4b4c      	ldr	r3, [pc, #304]	; (8002420 <HAL_RCC_OscConfig+0x26c>)
 80022f0:	685b      	ldr	r3, [r3, #4]
 80022f2:	f003 030c 	and.w	r3, r3, #12
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d00b      	beq.n	8002312 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80022fa:	4b49      	ldr	r3, [pc, #292]	; (8002420 <HAL_RCC_OscConfig+0x26c>)
 80022fc:	685b      	ldr	r3, [r3, #4]
 80022fe:	f003 030c 	and.w	r3, r3, #12
 8002302:	2b08      	cmp	r3, #8
 8002304:	d11c      	bne.n	8002340 <HAL_RCC_OscConfig+0x18c>
 8002306:	4b46      	ldr	r3, [pc, #280]	; (8002420 <HAL_RCC_OscConfig+0x26c>)
 8002308:	685b      	ldr	r3, [r3, #4]
 800230a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800230e:	2b00      	cmp	r3, #0
 8002310:	d116      	bne.n	8002340 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002312:	4b43      	ldr	r3, [pc, #268]	; (8002420 <HAL_RCC_OscConfig+0x26c>)
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f003 0302 	and.w	r3, r3, #2
 800231a:	2b00      	cmp	r3, #0
 800231c:	d005      	beq.n	800232a <HAL_RCC_OscConfig+0x176>
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	691b      	ldr	r3, [r3, #16]
 8002322:	2b01      	cmp	r3, #1
 8002324:	d001      	beq.n	800232a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002326:	2301      	movs	r3, #1
 8002328:	e1c0      	b.n	80026ac <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800232a:	4b3d      	ldr	r3, [pc, #244]	; (8002420 <HAL_RCC_OscConfig+0x26c>)
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	695b      	ldr	r3, [r3, #20]
 8002336:	00db      	lsls	r3, r3, #3
 8002338:	4939      	ldr	r1, [pc, #228]	; (8002420 <HAL_RCC_OscConfig+0x26c>)
 800233a:	4313      	orrs	r3, r2
 800233c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800233e:	e03a      	b.n	80023b6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	691b      	ldr	r3, [r3, #16]
 8002344:	2b00      	cmp	r3, #0
 8002346:	d020      	beq.n	800238a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002348:	4b36      	ldr	r3, [pc, #216]	; (8002424 <HAL_RCC_OscConfig+0x270>)
 800234a:	2201      	movs	r2, #1
 800234c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800234e:	f7ff fbf9 	bl	8001b44 <HAL_GetTick>
 8002352:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002354:	e008      	b.n	8002368 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002356:	f7ff fbf5 	bl	8001b44 <HAL_GetTick>
 800235a:	4602      	mov	r2, r0
 800235c:	693b      	ldr	r3, [r7, #16]
 800235e:	1ad3      	subs	r3, r2, r3
 8002360:	2b02      	cmp	r3, #2
 8002362:	d901      	bls.n	8002368 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002364:	2303      	movs	r3, #3
 8002366:	e1a1      	b.n	80026ac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002368:	4b2d      	ldr	r3, [pc, #180]	; (8002420 <HAL_RCC_OscConfig+0x26c>)
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f003 0302 	and.w	r3, r3, #2
 8002370:	2b00      	cmp	r3, #0
 8002372:	d0f0      	beq.n	8002356 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002374:	4b2a      	ldr	r3, [pc, #168]	; (8002420 <HAL_RCC_OscConfig+0x26c>)
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	695b      	ldr	r3, [r3, #20]
 8002380:	00db      	lsls	r3, r3, #3
 8002382:	4927      	ldr	r1, [pc, #156]	; (8002420 <HAL_RCC_OscConfig+0x26c>)
 8002384:	4313      	orrs	r3, r2
 8002386:	600b      	str	r3, [r1, #0]
 8002388:	e015      	b.n	80023b6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800238a:	4b26      	ldr	r3, [pc, #152]	; (8002424 <HAL_RCC_OscConfig+0x270>)
 800238c:	2200      	movs	r2, #0
 800238e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002390:	f7ff fbd8 	bl	8001b44 <HAL_GetTick>
 8002394:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002396:	e008      	b.n	80023aa <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002398:	f7ff fbd4 	bl	8001b44 <HAL_GetTick>
 800239c:	4602      	mov	r2, r0
 800239e:	693b      	ldr	r3, [r7, #16]
 80023a0:	1ad3      	subs	r3, r2, r3
 80023a2:	2b02      	cmp	r3, #2
 80023a4:	d901      	bls.n	80023aa <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80023a6:	2303      	movs	r3, #3
 80023a8:	e180      	b.n	80026ac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023aa:	4b1d      	ldr	r3, [pc, #116]	; (8002420 <HAL_RCC_OscConfig+0x26c>)
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f003 0302 	and.w	r3, r3, #2
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d1f0      	bne.n	8002398 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f003 0308 	and.w	r3, r3, #8
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d03a      	beq.n	8002438 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	699b      	ldr	r3, [r3, #24]
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d019      	beq.n	80023fe <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80023ca:	4b17      	ldr	r3, [pc, #92]	; (8002428 <HAL_RCC_OscConfig+0x274>)
 80023cc:	2201      	movs	r2, #1
 80023ce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023d0:	f7ff fbb8 	bl	8001b44 <HAL_GetTick>
 80023d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80023d6:	e008      	b.n	80023ea <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80023d8:	f7ff fbb4 	bl	8001b44 <HAL_GetTick>
 80023dc:	4602      	mov	r2, r0
 80023de:	693b      	ldr	r3, [r7, #16]
 80023e0:	1ad3      	subs	r3, r2, r3
 80023e2:	2b02      	cmp	r3, #2
 80023e4:	d901      	bls.n	80023ea <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80023e6:	2303      	movs	r3, #3
 80023e8:	e160      	b.n	80026ac <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80023ea:	4b0d      	ldr	r3, [pc, #52]	; (8002420 <HAL_RCC_OscConfig+0x26c>)
 80023ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023ee:	f003 0302 	and.w	r3, r3, #2
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d0f0      	beq.n	80023d8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80023f6:	2001      	movs	r0, #1
 80023f8:	f000 fafe 	bl	80029f8 <RCC_Delay>
 80023fc:	e01c      	b.n	8002438 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80023fe:	4b0a      	ldr	r3, [pc, #40]	; (8002428 <HAL_RCC_OscConfig+0x274>)
 8002400:	2200      	movs	r2, #0
 8002402:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002404:	f7ff fb9e 	bl	8001b44 <HAL_GetTick>
 8002408:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800240a:	e00f      	b.n	800242c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800240c:	f7ff fb9a 	bl	8001b44 <HAL_GetTick>
 8002410:	4602      	mov	r2, r0
 8002412:	693b      	ldr	r3, [r7, #16]
 8002414:	1ad3      	subs	r3, r2, r3
 8002416:	2b02      	cmp	r3, #2
 8002418:	d908      	bls.n	800242c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800241a:	2303      	movs	r3, #3
 800241c:	e146      	b.n	80026ac <HAL_RCC_OscConfig+0x4f8>
 800241e:	bf00      	nop
 8002420:	40021000 	.word	0x40021000
 8002424:	42420000 	.word	0x42420000
 8002428:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800242c:	4b92      	ldr	r3, [pc, #584]	; (8002678 <HAL_RCC_OscConfig+0x4c4>)
 800242e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002430:	f003 0302 	and.w	r3, r3, #2
 8002434:	2b00      	cmp	r3, #0
 8002436:	d1e9      	bne.n	800240c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f003 0304 	and.w	r3, r3, #4
 8002440:	2b00      	cmp	r3, #0
 8002442:	f000 80a6 	beq.w	8002592 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002446:	2300      	movs	r3, #0
 8002448:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800244a:	4b8b      	ldr	r3, [pc, #556]	; (8002678 <HAL_RCC_OscConfig+0x4c4>)
 800244c:	69db      	ldr	r3, [r3, #28]
 800244e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002452:	2b00      	cmp	r3, #0
 8002454:	d10d      	bne.n	8002472 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002456:	4b88      	ldr	r3, [pc, #544]	; (8002678 <HAL_RCC_OscConfig+0x4c4>)
 8002458:	69db      	ldr	r3, [r3, #28]
 800245a:	4a87      	ldr	r2, [pc, #540]	; (8002678 <HAL_RCC_OscConfig+0x4c4>)
 800245c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002460:	61d3      	str	r3, [r2, #28]
 8002462:	4b85      	ldr	r3, [pc, #532]	; (8002678 <HAL_RCC_OscConfig+0x4c4>)
 8002464:	69db      	ldr	r3, [r3, #28]
 8002466:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800246a:	60bb      	str	r3, [r7, #8]
 800246c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800246e:	2301      	movs	r3, #1
 8002470:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002472:	4b82      	ldr	r3, [pc, #520]	; (800267c <HAL_RCC_OscConfig+0x4c8>)
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800247a:	2b00      	cmp	r3, #0
 800247c:	d118      	bne.n	80024b0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800247e:	4b7f      	ldr	r3, [pc, #508]	; (800267c <HAL_RCC_OscConfig+0x4c8>)
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	4a7e      	ldr	r2, [pc, #504]	; (800267c <HAL_RCC_OscConfig+0x4c8>)
 8002484:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002488:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800248a:	f7ff fb5b 	bl	8001b44 <HAL_GetTick>
 800248e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002490:	e008      	b.n	80024a4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002492:	f7ff fb57 	bl	8001b44 <HAL_GetTick>
 8002496:	4602      	mov	r2, r0
 8002498:	693b      	ldr	r3, [r7, #16]
 800249a:	1ad3      	subs	r3, r2, r3
 800249c:	2b64      	cmp	r3, #100	; 0x64
 800249e:	d901      	bls.n	80024a4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80024a0:	2303      	movs	r3, #3
 80024a2:	e103      	b.n	80026ac <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024a4:	4b75      	ldr	r3, [pc, #468]	; (800267c <HAL_RCC_OscConfig+0x4c8>)
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d0f0      	beq.n	8002492 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	68db      	ldr	r3, [r3, #12]
 80024b4:	2b01      	cmp	r3, #1
 80024b6:	d106      	bne.n	80024c6 <HAL_RCC_OscConfig+0x312>
 80024b8:	4b6f      	ldr	r3, [pc, #444]	; (8002678 <HAL_RCC_OscConfig+0x4c4>)
 80024ba:	6a1b      	ldr	r3, [r3, #32]
 80024bc:	4a6e      	ldr	r2, [pc, #440]	; (8002678 <HAL_RCC_OscConfig+0x4c4>)
 80024be:	f043 0301 	orr.w	r3, r3, #1
 80024c2:	6213      	str	r3, [r2, #32]
 80024c4:	e02d      	b.n	8002522 <HAL_RCC_OscConfig+0x36e>
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	68db      	ldr	r3, [r3, #12]
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d10c      	bne.n	80024e8 <HAL_RCC_OscConfig+0x334>
 80024ce:	4b6a      	ldr	r3, [pc, #424]	; (8002678 <HAL_RCC_OscConfig+0x4c4>)
 80024d0:	6a1b      	ldr	r3, [r3, #32]
 80024d2:	4a69      	ldr	r2, [pc, #420]	; (8002678 <HAL_RCC_OscConfig+0x4c4>)
 80024d4:	f023 0301 	bic.w	r3, r3, #1
 80024d8:	6213      	str	r3, [r2, #32]
 80024da:	4b67      	ldr	r3, [pc, #412]	; (8002678 <HAL_RCC_OscConfig+0x4c4>)
 80024dc:	6a1b      	ldr	r3, [r3, #32]
 80024de:	4a66      	ldr	r2, [pc, #408]	; (8002678 <HAL_RCC_OscConfig+0x4c4>)
 80024e0:	f023 0304 	bic.w	r3, r3, #4
 80024e4:	6213      	str	r3, [r2, #32]
 80024e6:	e01c      	b.n	8002522 <HAL_RCC_OscConfig+0x36e>
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	68db      	ldr	r3, [r3, #12]
 80024ec:	2b05      	cmp	r3, #5
 80024ee:	d10c      	bne.n	800250a <HAL_RCC_OscConfig+0x356>
 80024f0:	4b61      	ldr	r3, [pc, #388]	; (8002678 <HAL_RCC_OscConfig+0x4c4>)
 80024f2:	6a1b      	ldr	r3, [r3, #32]
 80024f4:	4a60      	ldr	r2, [pc, #384]	; (8002678 <HAL_RCC_OscConfig+0x4c4>)
 80024f6:	f043 0304 	orr.w	r3, r3, #4
 80024fa:	6213      	str	r3, [r2, #32]
 80024fc:	4b5e      	ldr	r3, [pc, #376]	; (8002678 <HAL_RCC_OscConfig+0x4c4>)
 80024fe:	6a1b      	ldr	r3, [r3, #32]
 8002500:	4a5d      	ldr	r2, [pc, #372]	; (8002678 <HAL_RCC_OscConfig+0x4c4>)
 8002502:	f043 0301 	orr.w	r3, r3, #1
 8002506:	6213      	str	r3, [r2, #32]
 8002508:	e00b      	b.n	8002522 <HAL_RCC_OscConfig+0x36e>
 800250a:	4b5b      	ldr	r3, [pc, #364]	; (8002678 <HAL_RCC_OscConfig+0x4c4>)
 800250c:	6a1b      	ldr	r3, [r3, #32]
 800250e:	4a5a      	ldr	r2, [pc, #360]	; (8002678 <HAL_RCC_OscConfig+0x4c4>)
 8002510:	f023 0301 	bic.w	r3, r3, #1
 8002514:	6213      	str	r3, [r2, #32]
 8002516:	4b58      	ldr	r3, [pc, #352]	; (8002678 <HAL_RCC_OscConfig+0x4c4>)
 8002518:	6a1b      	ldr	r3, [r3, #32]
 800251a:	4a57      	ldr	r2, [pc, #348]	; (8002678 <HAL_RCC_OscConfig+0x4c4>)
 800251c:	f023 0304 	bic.w	r3, r3, #4
 8002520:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	68db      	ldr	r3, [r3, #12]
 8002526:	2b00      	cmp	r3, #0
 8002528:	d015      	beq.n	8002556 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800252a:	f7ff fb0b 	bl	8001b44 <HAL_GetTick>
 800252e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002530:	e00a      	b.n	8002548 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002532:	f7ff fb07 	bl	8001b44 <HAL_GetTick>
 8002536:	4602      	mov	r2, r0
 8002538:	693b      	ldr	r3, [r7, #16]
 800253a:	1ad3      	subs	r3, r2, r3
 800253c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002540:	4293      	cmp	r3, r2
 8002542:	d901      	bls.n	8002548 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002544:	2303      	movs	r3, #3
 8002546:	e0b1      	b.n	80026ac <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002548:	4b4b      	ldr	r3, [pc, #300]	; (8002678 <HAL_RCC_OscConfig+0x4c4>)
 800254a:	6a1b      	ldr	r3, [r3, #32]
 800254c:	f003 0302 	and.w	r3, r3, #2
 8002550:	2b00      	cmp	r3, #0
 8002552:	d0ee      	beq.n	8002532 <HAL_RCC_OscConfig+0x37e>
 8002554:	e014      	b.n	8002580 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002556:	f7ff faf5 	bl	8001b44 <HAL_GetTick>
 800255a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800255c:	e00a      	b.n	8002574 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800255e:	f7ff faf1 	bl	8001b44 <HAL_GetTick>
 8002562:	4602      	mov	r2, r0
 8002564:	693b      	ldr	r3, [r7, #16]
 8002566:	1ad3      	subs	r3, r2, r3
 8002568:	f241 3288 	movw	r2, #5000	; 0x1388
 800256c:	4293      	cmp	r3, r2
 800256e:	d901      	bls.n	8002574 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002570:	2303      	movs	r3, #3
 8002572:	e09b      	b.n	80026ac <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002574:	4b40      	ldr	r3, [pc, #256]	; (8002678 <HAL_RCC_OscConfig+0x4c4>)
 8002576:	6a1b      	ldr	r3, [r3, #32]
 8002578:	f003 0302 	and.w	r3, r3, #2
 800257c:	2b00      	cmp	r3, #0
 800257e:	d1ee      	bne.n	800255e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002580:	7dfb      	ldrb	r3, [r7, #23]
 8002582:	2b01      	cmp	r3, #1
 8002584:	d105      	bne.n	8002592 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002586:	4b3c      	ldr	r3, [pc, #240]	; (8002678 <HAL_RCC_OscConfig+0x4c4>)
 8002588:	69db      	ldr	r3, [r3, #28]
 800258a:	4a3b      	ldr	r2, [pc, #236]	; (8002678 <HAL_RCC_OscConfig+0x4c4>)
 800258c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002590:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	69db      	ldr	r3, [r3, #28]
 8002596:	2b00      	cmp	r3, #0
 8002598:	f000 8087 	beq.w	80026aa <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800259c:	4b36      	ldr	r3, [pc, #216]	; (8002678 <HAL_RCC_OscConfig+0x4c4>)
 800259e:	685b      	ldr	r3, [r3, #4]
 80025a0:	f003 030c 	and.w	r3, r3, #12
 80025a4:	2b08      	cmp	r3, #8
 80025a6:	d061      	beq.n	800266c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	69db      	ldr	r3, [r3, #28]
 80025ac:	2b02      	cmp	r3, #2
 80025ae:	d146      	bne.n	800263e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025b0:	4b33      	ldr	r3, [pc, #204]	; (8002680 <HAL_RCC_OscConfig+0x4cc>)
 80025b2:	2200      	movs	r2, #0
 80025b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025b6:	f7ff fac5 	bl	8001b44 <HAL_GetTick>
 80025ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025bc:	e008      	b.n	80025d0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025be:	f7ff fac1 	bl	8001b44 <HAL_GetTick>
 80025c2:	4602      	mov	r2, r0
 80025c4:	693b      	ldr	r3, [r7, #16]
 80025c6:	1ad3      	subs	r3, r2, r3
 80025c8:	2b02      	cmp	r3, #2
 80025ca:	d901      	bls.n	80025d0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80025cc:	2303      	movs	r3, #3
 80025ce:	e06d      	b.n	80026ac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025d0:	4b29      	ldr	r3, [pc, #164]	; (8002678 <HAL_RCC_OscConfig+0x4c4>)
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d1f0      	bne.n	80025be <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	6a1b      	ldr	r3, [r3, #32]
 80025e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80025e4:	d108      	bne.n	80025f8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80025e6:	4b24      	ldr	r3, [pc, #144]	; (8002678 <HAL_RCC_OscConfig+0x4c4>)
 80025e8:	685b      	ldr	r3, [r3, #4]
 80025ea:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	689b      	ldr	r3, [r3, #8]
 80025f2:	4921      	ldr	r1, [pc, #132]	; (8002678 <HAL_RCC_OscConfig+0x4c4>)
 80025f4:	4313      	orrs	r3, r2
 80025f6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80025f8:	4b1f      	ldr	r3, [pc, #124]	; (8002678 <HAL_RCC_OscConfig+0x4c4>)
 80025fa:	685b      	ldr	r3, [r3, #4]
 80025fc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	6a19      	ldr	r1, [r3, #32]
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002608:	430b      	orrs	r3, r1
 800260a:	491b      	ldr	r1, [pc, #108]	; (8002678 <HAL_RCC_OscConfig+0x4c4>)
 800260c:	4313      	orrs	r3, r2
 800260e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002610:	4b1b      	ldr	r3, [pc, #108]	; (8002680 <HAL_RCC_OscConfig+0x4cc>)
 8002612:	2201      	movs	r2, #1
 8002614:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002616:	f7ff fa95 	bl	8001b44 <HAL_GetTick>
 800261a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800261c:	e008      	b.n	8002630 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800261e:	f7ff fa91 	bl	8001b44 <HAL_GetTick>
 8002622:	4602      	mov	r2, r0
 8002624:	693b      	ldr	r3, [r7, #16]
 8002626:	1ad3      	subs	r3, r2, r3
 8002628:	2b02      	cmp	r3, #2
 800262a:	d901      	bls.n	8002630 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800262c:	2303      	movs	r3, #3
 800262e:	e03d      	b.n	80026ac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002630:	4b11      	ldr	r3, [pc, #68]	; (8002678 <HAL_RCC_OscConfig+0x4c4>)
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002638:	2b00      	cmp	r3, #0
 800263a:	d0f0      	beq.n	800261e <HAL_RCC_OscConfig+0x46a>
 800263c:	e035      	b.n	80026aa <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800263e:	4b10      	ldr	r3, [pc, #64]	; (8002680 <HAL_RCC_OscConfig+0x4cc>)
 8002640:	2200      	movs	r2, #0
 8002642:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002644:	f7ff fa7e 	bl	8001b44 <HAL_GetTick>
 8002648:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800264a:	e008      	b.n	800265e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800264c:	f7ff fa7a 	bl	8001b44 <HAL_GetTick>
 8002650:	4602      	mov	r2, r0
 8002652:	693b      	ldr	r3, [r7, #16]
 8002654:	1ad3      	subs	r3, r2, r3
 8002656:	2b02      	cmp	r3, #2
 8002658:	d901      	bls.n	800265e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800265a:	2303      	movs	r3, #3
 800265c:	e026      	b.n	80026ac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800265e:	4b06      	ldr	r3, [pc, #24]	; (8002678 <HAL_RCC_OscConfig+0x4c4>)
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002666:	2b00      	cmp	r3, #0
 8002668:	d1f0      	bne.n	800264c <HAL_RCC_OscConfig+0x498>
 800266a:	e01e      	b.n	80026aa <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	69db      	ldr	r3, [r3, #28]
 8002670:	2b01      	cmp	r3, #1
 8002672:	d107      	bne.n	8002684 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002674:	2301      	movs	r3, #1
 8002676:	e019      	b.n	80026ac <HAL_RCC_OscConfig+0x4f8>
 8002678:	40021000 	.word	0x40021000
 800267c:	40007000 	.word	0x40007000
 8002680:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002684:	4b0b      	ldr	r3, [pc, #44]	; (80026b4 <HAL_RCC_OscConfig+0x500>)
 8002686:	685b      	ldr	r3, [r3, #4]
 8002688:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	6a1b      	ldr	r3, [r3, #32]
 8002694:	429a      	cmp	r2, r3
 8002696:	d106      	bne.n	80026a6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026a2:	429a      	cmp	r2, r3
 80026a4:	d001      	beq.n	80026aa <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80026a6:	2301      	movs	r3, #1
 80026a8:	e000      	b.n	80026ac <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80026aa:	2300      	movs	r3, #0
}
 80026ac:	4618      	mov	r0, r3
 80026ae:	3718      	adds	r7, #24
 80026b0:	46bd      	mov	sp, r7
 80026b2:	bd80      	pop	{r7, pc}
 80026b4:	40021000 	.word	0x40021000

080026b8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	b084      	sub	sp, #16
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]
 80026c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d101      	bne.n	80026cc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80026c8:	2301      	movs	r3, #1
 80026ca:	e0d0      	b.n	800286e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80026cc:	4b6a      	ldr	r3, [pc, #424]	; (8002878 <HAL_RCC_ClockConfig+0x1c0>)
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f003 0307 	and.w	r3, r3, #7
 80026d4:	683a      	ldr	r2, [r7, #0]
 80026d6:	429a      	cmp	r2, r3
 80026d8:	d910      	bls.n	80026fc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026da:	4b67      	ldr	r3, [pc, #412]	; (8002878 <HAL_RCC_ClockConfig+0x1c0>)
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f023 0207 	bic.w	r2, r3, #7
 80026e2:	4965      	ldr	r1, [pc, #404]	; (8002878 <HAL_RCC_ClockConfig+0x1c0>)
 80026e4:	683b      	ldr	r3, [r7, #0]
 80026e6:	4313      	orrs	r3, r2
 80026e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80026ea:	4b63      	ldr	r3, [pc, #396]	; (8002878 <HAL_RCC_ClockConfig+0x1c0>)
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f003 0307 	and.w	r3, r3, #7
 80026f2:	683a      	ldr	r2, [r7, #0]
 80026f4:	429a      	cmp	r2, r3
 80026f6:	d001      	beq.n	80026fc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80026f8:	2301      	movs	r3, #1
 80026fa:	e0b8      	b.n	800286e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f003 0302 	and.w	r3, r3, #2
 8002704:	2b00      	cmp	r3, #0
 8002706:	d020      	beq.n	800274a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f003 0304 	and.w	r3, r3, #4
 8002710:	2b00      	cmp	r3, #0
 8002712:	d005      	beq.n	8002720 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002714:	4b59      	ldr	r3, [pc, #356]	; (800287c <HAL_RCC_ClockConfig+0x1c4>)
 8002716:	685b      	ldr	r3, [r3, #4]
 8002718:	4a58      	ldr	r2, [pc, #352]	; (800287c <HAL_RCC_ClockConfig+0x1c4>)
 800271a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800271e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f003 0308 	and.w	r3, r3, #8
 8002728:	2b00      	cmp	r3, #0
 800272a:	d005      	beq.n	8002738 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800272c:	4b53      	ldr	r3, [pc, #332]	; (800287c <HAL_RCC_ClockConfig+0x1c4>)
 800272e:	685b      	ldr	r3, [r3, #4]
 8002730:	4a52      	ldr	r2, [pc, #328]	; (800287c <HAL_RCC_ClockConfig+0x1c4>)
 8002732:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002736:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002738:	4b50      	ldr	r3, [pc, #320]	; (800287c <HAL_RCC_ClockConfig+0x1c4>)
 800273a:	685b      	ldr	r3, [r3, #4]
 800273c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	689b      	ldr	r3, [r3, #8]
 8002744:	494d      	ldr	r1, [pc, #308]	; (800287c <HAL_RCC_ClockConfig+0x1c4>)
 8002746:	4313      	orrs	r3, r2
 8002748:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f003 0301 	and.w	r3, r3, #1
 8002752:	2b00      	cmp	r3, #0
 8002754:	d040      	beq.n	80027d8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	685b      	ldr	r3, [r3, #4]
 800275a:	2b01      	cmp	r3, #1
 800275c:	d107      	bne.n	800276e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800275e:	4b47      	ldr	r3, [pc, #284]	; (800287c <HAL_RCC_ClockConfig+0x1c4>)
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002766:	2b00      	cmp	r3, #0
 8002768:	d115      	bne.n	8002796 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800276a:	2301      	movs	r3, #1
 800276c:	e07f      	b.n	800286e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	685b      	ldr	r3, [r3, #4]
 8002772:	2b02      	cmp	r3, #2
 8002774:	d107      	bne.n	8002786 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002776:	4b41      	ldr	r3, [pc, #260]	; (800287c <HAL_RCC_ClockConfig+0x1c4>)
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800277e:	2b00      	cmp	r3, #0
 8002780:	d109      	bne.n	8002796 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002782:	2301      	movs	r3, #1
 8002784:	e073      	b.n	800286e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002786:	4b3d      	ldr	r3, [pc, #244]	; (800287c <HAL_RCC_ClockConfig+0x1c4>)
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f003 0302 	and.w	r3, r3, #2
 800278e:	2b00      	cmp	r3, #0
 8002790:	d101      	bne.n	8002796 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002792:	2301      	movs	r3, #1
 8002794:	e06b      	b.n	800286e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002796:	4b39      	ldr	r3, [pc, #228]	; (800287c <HAL_RCC_ClockConfig+0x1c4>)
 8002798:	685b      	ldr	r3, [r3, #4]
 800279a:	f023 0203 	bic.w	r2, r3, #3
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	685b      	ldr	r3, [r3, #4]
 80027a2:	4936      	ldr	r1, [pc, #216]	; (800287c <HAL_RCC_ClockConfig+0x1c4>)
 80027a4:	4313      	orrs	r3, r2
 80027a6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80027a8:	f7ff f9cc 	bl	8001b44 <HAL_GetTick>
 80027ac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027ae:	e00a      	b.n	80027c6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027b0:	f7ff f9c8 	bl	8001b44 <HAL_GetTick>
 80027b4:	4602      	mov	r2, r0
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	1ad3      	subs	r3, r2, r3
 80027ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80027be:	4293      	cmp	r3, r2
 80027c0:	d901      	bls.n	80027c6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80027c2:	2303      	movs	r3, #3
 80027c4:	e053      	b.n	800286e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027c6:	4b2d      	ldr	r3, [pc, #180]	; (800287c <HAL_RCC_ClockConfig+0x1c4>)
 80027c8:	685b      	ldr	r3, [r3, #4]
 80027ca:	f003 020c 	and.w	r2, r3, #12
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	685b      	ldr	r3, [r3, #4]
 80027d2:	009b      	lsls	r3, r3, #2
 80027d4:	429a      	cmp	r2, r3
 80027d6:	d1eb      	bne.n	80027b0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80027d8:	4b27      	ldr	r3, [pc, #156]	; (8002878 <HAL_RCC_ClockConfig+0x1c0>)
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f003 0307 	and.w	r3, r3, #7
 80027e0:	683a      	ldr	r2, [r7, #0]
 80027e2:	429a      	cmp	r2, r3
 80027e4:	d210      	bcs.n	8002808 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027e6:	4b24      	ldr	r3, [pc, #144]	; (8002878 <HAL_RCC_ClockConfig+0x1c0>)
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f023 0207 	bic.w	r2, r3, #7
 80027ee:	4922      	ldr	r1, [pc, #136]	; (8002878 <HAL_RCC_ClockConfig+0x1c0>)
 80027f0:	683b      	ldr	r3, [r7, #0]
 80027f2:	4313      	orrs	r3, r2
 80027f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80027f6:	4b20      	ldr	r3, [pc, #128]	; (8002878 <HAL_RCC_ClockConfig+0x1c0>)
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f003 0307 	and.w	r3, r3, #7
 80027fe:	683a      	ldr	r2, [r7, #0]
 8002800:	429a      	cmp	r2, r3
 8002802:	d001      	beq.n	8002808 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002804:	2301      	movs	r3, #1
 8002806:	e032      	b.n	800286e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f003 0304 	and.w	r3, r3, #4
 8002810:	2b00      	cmp	r3, #0
 8002812:	d008      	beq.n	8002826 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002814:	4b19      	ldr	r3, [pc, #100]	; (800287c <HAL_RCC_ClockConfig+0x1c4>)
 8002816:	685b      	ldr	r3, [r3, #4]
 8002818:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	68db      	ldr	r3, [r3, #12]
 8002820:	4916      	ldr	r1, [pc, #88]	; (800287c <HAL_RCC_ClockConfig+0x1c4>)
 8002822:	4313      	orrs	r3, r2
 8002824:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f003 0308 	and.w	r3, r3, #8
 800282e:	2b00      	cmp	r3, #0
 8002830:	d009      	beq.n	8002846 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002832:	4b12      	ldr	r3, [pc, #72]	; (800287c <HAL_RCC_ClockConfig+0x1c4>)
 8002834:	685b      	ldr	r3, [r3, #4]
 8002836:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	691b      	ldr	r3, [r3, #16]
 800283e:	00db      	lsls	r3, r3, #3
 8002840:	490e      	ldr	r1, [pc, #56]	; (800287c <HAL_RCC_ClockConfig+0x1c4>)
 8002842:	4313      	orrs	r3, r2
 8002844:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002846:	f000 f821 	bl	800288c <HAL_RCC_GetSysClockFreq>
 800284a:	4602      	mov	r2, r0
 800284c:	4b0b      	ldr	r3, [pc, #44]	; (800287c <HAL_RCC_ClockConfig+0x1c4>)
 800284e:	685b      	ldr	r3, [r3, #4]
 8002850:	091b      	lsrs	r3, r3, #4
 8002852:	f003 030f 	and.w	r3, r3, #15
 8002856:	490a      	ldr	r1, [pc, #40]	; (8002880 <HAL_RCC_ClockConfig+0x1c8>)
 8002858:	5ccb      	ldrb	r3, [r1, r3]
 800285a:	fa22 f303 	lsr.w	r3, r2, r3
 800285e:	4a09      	ldr	r2, [pc, #36]	; (8002884 <HAL_RCC_ClockConfig+0x1cc>)
 8002860:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002862:	4b09      	ldr	r3, [pc, #36]	; (8002888 <HAL_RCC_ClockConfig+0x1d0>)
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	4618      	mov	r0, r3
 8002868:	f7ff f868 	bl	800193c <HAL_InitTick>

  return HAL_OK;
 800286c:	2300      	movs	r3, #0
}
 800286e:	4618      	mov	r0, r3
 8002870:	3710      	adds	r7, #16
 8002872:	46bd      	mov	sp, r7
 8002874:	bd80      	pop	{r7, pc}
 8002876:	bf00      	nop
 8002878:	40022000 	.word	0x40022000
 800287c:	40021000 	.word	0x40021000
 8002880:	08006798 	.word	0x08006798
 8002884:	20000004 	.word	0x20000004
 8002888:	20000008 	.word	0x20000008

0800288c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800288c:	b480      	push	{r7}
 800288e:	b087      	sub	sp, #28
 8002890:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002892:	2300      	movs	r3, #0
 8002894:	60fb      	str	r3, [r7, #12]
 8002896:	2300      	movs	r3, #0
 8002898:	60bb      	str	r3, [r7, #8]
 800289a:	2300      	movs	r3, #0
 800289c:	617b      	str	r3, [r7, #20]
 800289e:	2300      	movs	r3, #0
 80028a0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80028a2:	2300      	movs	r3, #0
 80028a4:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80028a6:	4b1e      	ldr	r3, [pc, #120]	; (8002920 <HAL_RCC_GetSysClockFreq+0x94>)
 80028a8:	685b      	ldr	r3, [r3, #4]
 80028aa:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	f003 030c 	and.w	r3, r3, #12
 80028b2:	2b04      	cmp	r3, #4
 80028b4:	d002      	beq.n	80028bc <HAL_RCC_GetSysClockFreq+0x30>
 80028b6:	2b08      	cmp	r3, #8
 80028b8:	d003      	beq.n	80028c2 <HAL_RCC_GetSysClockFreq+0x36>
 80028ba:	e027      	b.n	800290c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80028bc:	4b19      	ldr	r3, [pc, #100]	; (8002924 <HAL_RCC_GetSysClockFreq+0x98>)
 80028be:	613b      	str	r3, [r7, #16]
      break;
 80028c0:	e027      	b.n	8002912 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	0c9b      	lsrs	r3, r3, #18
 80028c6:	f003 030f 	and.w	r3, r3, #15
 80028ca:	4a17      	ldr	r2, [pc, #92]	; (8002928 <HAL_RCC_GetSysClockFreq+0x9c>)
 80028cc:	5cd3      	ldrb	r3, [r2, r3]
 80028ce:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d010      	beq.n	80028fc <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80028da:	4b11      	ldr	r3, [pc, #68]	; (8002920 <HAL_RCC_GetSysClockFreq+0x94>)
 80028dc:	685b      	ldr	r3, [r3, #4]
 80028de:	0c5b      	lsrs	r3, r3, #17
 80028e0:	f003 0301 	and.w	r3, r3, #1
 80028e4:	4a11      	ldr	r2, [pc, #68]	; (800292c <HAL_RCC_GetSysClockFreq+0xa0>)
 80028e6:	5cd3      	ldrb	r3, [r2, r3]
 80028e8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	4a0d      	ldr	r2, [pc, #52]	; (8002924 <HAL_RCC_GetSysClockFreq+0x98>)
 80028ee:	fb03 f202 	mul.w	r2, r3, r2
 80028f2:	68bb      	ldr	r3, [r7, #8]
 80028f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80028f8:	617b      	str	r3, [r7, #20]
 80028fa:	e004      	b.n	8002906 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	4a0c      	ldr	r2, [pc, #48]	; (8002930 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002900:	fb02 f303 	mul.w	r3, r2, r3
 8002904:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002906:	697b      	ldr	r3, [r7, #20]
 8002908:	613b      	str	r3, [r7, #16]
      break;
 800290a:	e002      	b.n	8002912 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800290c:	4b05      	ldr	r3, [pc, #20]	; (8002924 <HAL_RCC_GetSysClockFreq+0x98>)
 800290e:	613b      	str	r3, [r7, #16]
      break;
 8002910:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002912:	693b      	ldr	r3, [r7, #16]
}
 8002914:	4618      	mov	r0, r3
 8002916:	371c      	adds	r7, #28
 8002918:	46bd      	mov	sp, r7
 800291a:	bc80      	pop	{r7}
 800291c:	4770      	bx	lr
 800291e:	bf00      	nop
 8002920:	40021000 	.word	0x40021000
 8002924:	007a1200 	.word	0x007a1200
 8002928:	080067b0 	.word	0x080067b0
 800292c:	080067c0 	.word	0x080067c0
 8002930:	003d0900 	.word	0x003d0900

08002934 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002934:	b480      	push	{r7}
 8002936:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002938:	4b02      	ldr	r3, [pc, #8]	; (8002944 <HAL_RCC_GetHCLKFreq+0x10>)
 800293a:	681b      	ldr	r3, [r3, #0]
}
 800293c:	4618      	mov	r0, r3
 800293e:	46bd      	mov	sp, r7
 8002940:	bc80      	pop	{r7}
 8002942:	4770      	bx	lr
 8002944:	20000004 	.word	0x20000004

08002948 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002948:	b580      	push	{r7, lr}
 800294a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800294c:	f7ff fff2 	bl	8002934 <HAL_RCC_GetHCLKFreq>
 8002950:	4602      	mov	r2, r0
 8002952:	4b05      	ldr	r3, [pc, #20]	; (8002968 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002954:	685b      	ldr	r3, [r3, #4]
 8002956:	0a1b      	lsrs	r3, r3, #8
 8002958:	f003 0307 	and.w	r3, r3, #7
 800295c:	4903      	ldr	r1, [pc, #12]	; (800296c <HAL_RCC_GetPCLK1Freq+0x24>)
 800295e:	5ccb      	ldrb	r3, [r1, r3]
 8002960:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002964:	4618      	mov	r0, r3
 8002966:	bd80      	pop	{r7, pc}
 8002968:	40021000 	.word	0x40021000
 800296c:	080067a8 	.word	0x080067a8

08002970 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002970:	b580      	push	{r7, lr}
 8002972:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002974:	f7ff ffde 	bl	8002934 <HAL_RCC_GetHCLKFreq>
 8002978:	4602      	mov	r2, r0
 800297a:	4b05      	ldr	r3, [pc, #20]	; (8002990 <HAL_RCC_GetPCLK2Freq+0x20>)
 800297c:	685b      	ldr	r3, [r3, #4]
 800297e:	0adb      	lsrs	r3, r3, #11
 8002980:	f003 0307 	and.w	r3, r3, #7
 8002984:	4903      	ldr	r1, [pc, #12]	; (8002994 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002986:	5ccb      	ldrb	r3, [r1, r3]
 8002988:	fa22 f303 	lsr.w	r3, r2, r3
}
 800298c:	4618      	mov	r0, r3
 800298e:	bd80      	pop	{r7, pc}
 8002990:	40021000 	.word	0x40021000
 8002994:	080067a8 	.word	0x080067a8

08002998 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002998:	b480      	push	{r7}
 800299a:	b083      	sub	sp, #12
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]
 80029a0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	220f      	movs	r2, #15
 80029a6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80029a8:	4b11      	ldr	r3, [pc, #68]	; (80029f0 <HAL_RCC_GetClockConfig+0x58>)
 80029aa:	685b      	ldr	r3, [r3, #4]
 80029ac:	f003 0203 	and.w	r2, r3, #3
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80029b4:	4b0e      	ldr	r3, [pc, #56]	; (80029f0 <HAL_RCC_GetClockConfig+0x58>)
 80029b6:	685b      	ldr	r3, [r3, #4]
 80029b8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80029c0:	4b0b      	ldr	r3, [pc, #44]	; (80029f0 <HAL_RCC_GetClockConfig+0x58>)
 80029c2:	685b      	ldr	r3, [r3, #4]
 80029c4:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80029cc:	4b08      	ldr	r3, [pc, #32]	; (80029f0 <HAL_RCC_GetClockConfig+0x58>)
 80029ce:	685b      	ldr	r3, [r3, #4]
 80029d0:	08db      	lsrs	r3, r3, #3
 80029d2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80029da:	4b06      	ldr	r3, [pc, #24]	; (80029f4 <HAL_RCC_GetClockConfig+0x5c>)
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f003 0207 	and.w	r2, r3, #7
 80029e2:	683b      	ldr	r3, [r7, #0]
 80029e4:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 80029e6:	bf00      	nop
 80029e8:	370c      	adds	r7, #12
 80029ea:	46bd      	mov	sp, r7
 80029ec:	bc80      	pop	{r7}
 80029ee:	4770      	bx	lr
 80029f0:	40021000 	.word	0x40021000
 80029f4:	40022000 	.word	0x40022000

080029f8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80029f8:	b480      	push	{r7}
 80029fa:	b085      	sub	sp, #20
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002a00:	4b0a      	ldr	r3, [pc, #40]	; (8002a2c <RCC_Delay+0x34>)
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	4a0a      	ldr	r2, [pc, #40]	; (8002a30 <RCC_Delay+0x38>)
 8002a06:	fba2 2303 	umull	r2, r3, r2, r3
 8002a0a:	0a5b      	lsrs	r3, r3, #9
 8002a0c:	687a      	ldr	r2, [r7, #4]
 8002a0e:	fb02 f303 	mul.w	r3, r2, r3
 8002a12:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002a14:	bf00      	nop
  }
  while (Delay --);
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	1e5a      	subs	r2, r3, #1
 8002a1a:	60fa      	str	r2, [r7, #12]
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d1f9      	bne.n	8002a14 <RCC_Delay+0x1c>
}
 8002a20:	bf00      	nop
 8002a22:	bf00      	nop
 8002a24:	3714      	adds	r7, #20
 8002a26:	46bd      	mov	sp, r7
 8002a28:	bc80      	pop	{r7}
 8002a2a:	4770      	bx	lr
 8002a2c:	20000004 	.word	0x20000004
 8002a30:	10624dd3 	.word	0x10624dd3

08002a34 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002a34:	b580      	push	{r7, lr}
 8002a36:	b082      	sub	sp, #8
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d101      	bne.n	8002a46 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002a42:	2301      	movs	r3, #1
 8002a44:	e041      	b.n	8002aca <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a4c:	b2db      	uxtb	r3, r3
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d106      	bne.n	8002a60 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	2200      	movs	r2, #0
 8002a56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002a5a:	6878      	ldr	r0, [r7, #4]
 8002a5c:	f7fe fe6c 	bl	8001738 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	2202      	movs	r2, #2
 8002a64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681a      	ldr	r2, [r3, #0]
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	3304      	adds	r3, #4
 8002a70:	4619      	mov	r1, r3
 8002a72:	4610      	mov	r0, r2
 8002a74:	f000 fe7a 	bl	800376c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	2201      	movs	r2, #1
 8002a7c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	2201      	movs	r2, #1
 8002a84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	2201      	movs	r2, #1
 8002a8c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	2201      	movs	r2, #1
 8002a94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	2201      	movs	r2, #1
 8002a9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	2201      	movs	r2, #1
 8002aa4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	2201      	movs	r2, #1
 8002aac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	2201      	movs	r2, #1
 8002ab4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	2201      	movs	r2, #1
 8002abc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	2201      	movs	r2, #1
 8002ac4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002ac8:	2300      	movs	r3, #0
}
 8002aca:	4618      	mov	r0, r3
 8002acc:	3708      	adds	r7, #8
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	bd80      	pop	{r7, pc}
	...

08002ad4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002ad4:	b480      	push	{r7}
 8002ad6:	b085      	sub	sp, #20
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ae2:	b2db      	uxtb	r3, r3
 8002ae4:	2b01      	cmp	r3, #1
 8002ae6:	d001      	beq.n	8002aec <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002ae8:	2301      	movs	r3, #1
 8002aea:	e03a      	b.n	8002b62 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	2202      	movs	r2, #2
 8002af0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	68da      	ldr	r2, [r3, #12]
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f042 0201 	orr.w	r2, r2, #1
 8002b02:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	4a18      	ldr	r2, [pc, #96]	; (8002b6c <HAL_TIM_Base_Start_IT+0x98>)
 8002b0a:	4293      	cmp	r3, r2
 8002b0c:	d00e      	beq.n	8002b2c <HAL_TIM_Base_Start_IT+0x58>
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b16:	d009      	beq.n	8002b2c <HAL_TIM_Base_Start_IT+0x58>
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	4a14      	ldr	r2, [pc, #80]	; (8002b70 <HAL_TIM_Base_Start_IT+0x9c>)
 8002b1e:	4293      	cmp	r3, r2
 8002b20:	d004      	beq.n	8002b2c <HAL_TIM_Base_Start_IT+0x58>
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	4a13      	ldr	r2, [pc, #76]	; (8002b74 <HAL_TIM_Base_Start_IT+0xa0>)
 8002b28:	4293      	cmp	r3, r2
 8002b2a:	d111      	bne.n	8002b50 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	689b      	ldr	r3, [r3, #8]
 8002b32:	f003 0307 	and.w	r3, r3, #7
 8002b36:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	2b06      	cmp	r3, #6
 8002b3c:	d010      	beq.n	8002b60 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	681a      	ldr	r2, [r3, #0]
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f042 0201 	orr.w	r2, r2, #1
 8002b4c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b4e:	e007      	b.n	8002b60 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	681a      	ldr	r2, [r3, #0]
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f042 0201 	orr.w	r2, r2, #1
 8002b5e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002b60:	2300      	movs	r3, #0
}
 8002b62:	4618      	mov	r0, r3
 8002b64:	3714      	adds	r7, #20
 8002b66:	46bd      	mov	sp, r7
 8002b68:	bc80      	pop	{r7}
 8002b6a:	4770      	bx	lr
 8002b6c:	40012c00 	.word	0x40012c00
 8002b70:	40000400 	.word	0x40000400
 8002b74:	40000800 	.word	0x40000800

08002b78 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	b082      	sub	sp, #8
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d101      	bne.n	8002b8a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002b86:	2301      	movs	r3, #1
 8002b88:	e041      	b.n	8002c0e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b90:	b2db      	uxtb	r3, r3
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d106      	bne.n	8002ba4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	2200      	movs	r2, #0
 8002b9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002b9e:	6878      	ldr	r0, [r7, #4]
 8002ba0:	f7fe fdac 	bl	80016fc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	2202      	movs	r2, #2
 8002ba8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681a      	ldr	r2, [r3, #0]
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	3304      	adds	r3, #4
 8002bb4:	4619      	mov	r1, r3
 8002bb6:	4610      	mov	r0, r2
 8002bb8:	f000 fdd8 	bl	800376c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	2201      	movs	r2, #1
 8002bc0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	2201      	movs	r2, #1
 8002bc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	2201      	movs	r2, #1
 8002bd0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2201      	movs	r2, #1
 8002bd8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	2201      	movs	r2, #1
 8002be0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	2201      	movs	r2, #1
 8002be8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	2201      	movs	r2, #1
 8002bf0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	2201      	movs	r2, #1
 8002bf8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	2201      	movs	r2, #1
 8002c00:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	2201      	movs	r2, #1
 8002c08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002c0c:	2300      	movs	r3, #0
}
 8002c0e:	4618      	mov	r0, r3
 8002c10:	3708      	adds	r7, #8
 8002c12:	46bd      	mov	sp, r7
 8002c14:	bd80      	pop	{r7, pc}
	...

08002c18 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	b084      	sub	sp, #16
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
 8002c20:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002c22:	683b      	ldr	r3, [r7, #0]
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d109      	bne.n	8002c3c <HAL_TIM_PWM_Start+0x24>
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002c2e:	b2db      	uxtb	r3, r3
 8002c30:	2b01      	cmp	r3, #1
 8002c32:	bf14      	ite	ne
 8002c34:	2301      	movne	r3, #1
 8002c36:	2300      	moveq	r3, #0
 8002c38:	b2db      	uxtb	r3, r3
 8002c3a:	e022      	b.n	8002c82 <HAL_TIM_PWM_Start+0x6a>
 8002c3c:	683b      	ldr	r3, [r7, #0]
 8002c3e:	2b04      	cmp	r3, #4
 8002c40:	d109      	bne.n	8002c56 <HAL_TIM_PWM_Start+0x3e>
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002c48:	b2db      	uxtb	r3, r3
 8002c4a:	2b01      	cmp	r3, #1
 8002c4c:	bf14      	ite	ne
 8002c4e:	2301      	movne	r3, #1
 8002c50:	2300      	moveq	r3, #0
 8002c52:	b2db      	uxtb	r3, r3
 8002c54:	e015      	b.n	8002c82 <HAL_TIM_PWM_Start+0x6a>
 8002c56:	683b      	ldr	r3, [r7, #0]
 8002c58:	2b08      	cmp	r3, #8
 8002c5a:	d109      	bne.n	8002c70 <HAL_TIM_PWM_Start+0x58>
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002c62:	b2db      	uxtb	r3, r3
 8002c64:	2b01      	cmp	r3, #1
 8002c66:	bf14      	ite	ne
 8002c68:	2301      	movne	r3, #1
 8002c6a:	2300      	moveq	r3, #0
 8002c6c:	b2db      	uxtb	r3, r3
 8002c6e:	e008      	b.n	8002c82 <HAL_TIM_PWM_Start+0x6a>
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002c76:	b2db      	uxtb	r3, r3
 8002c78:	2b01      	cmp	r3, #1
 8002c7a:	bf14      	ite	ne
 8002c7c:	2301      	movne	r3, #1
 8002c7e:	2300      	moveq	r3, #0
 8002c80:	b2db      	uxtb	r3, r3
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d001      	beq.n	8002c8a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002c86:	2301      	movs	r3, #1
 8002c88:	e05e      	b.n	8002d48 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002c8a:	683b      	ldr	r3, [r7, #0]
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d104      	bne.n	8002c9a <HAL_TIM_PWM_Start+0x82>
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	2202      	movs	r2, #2
 8002c94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002c98:	e013      	b.n	8002cc2 <HAL_TIM_PWM_Start+0xaa>
 8002c9a:	683b      	ldr	r3, [r7, #0]
 8002c9c:	2b04      	cmp	r3, #4
 8002c9e:	d104      	bne.n	8002caa <HAL_TIM_PWM_Start+0x92>
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	2202      	movs	r2, #2
 8002ca4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002ca8:	e00b      	b.n	8002cc2 <HAL_TIM_PWM_Start+0xaa>
 8002caa:	683b      	ldr	r3, [r7, #0]
 8002cac:	2b08      	cmp	r3, #8
 8002cae:	d104      	bne.n	8002cba <HAL_TIM_PWM_Start+0xa2>
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	2202      	movs	r2, #2
 8002cb4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002cb8:	e003      	b.n	8002cc2 <HAL_TIM_PWM_Start+0xaa>
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	2202      	movs	r2, #2
 8002cbe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	2201      	movs	r2, #1
 8002cc8:	6839      	ldr	r1, [r7, #0]
 8002cca:	4618      	mov	r0, r3
 8002ccc:	f001 f8db 	bl	8003e86 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	4a1e      	ldr	r2, [pc, #120]	; (8002d50 <HAL_TIM_PWM_Start+0x138>)
 8002cd6:	4293      	cmp	r3, r2
 8002cd8:	d107      	bne.n	8002cea <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002ce8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	4a18      	ldr	r2, [pc, #96]	; (8002d50 <HAL_TIM_PWM_Start+0x138>)
 8002cf0:	4293      	cmp	r3, r2
 8002cf2:	d00e      	beq.n	8002d12 <HAL_TIM_PWM_Start+0xfa>
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002cfc:	d009      	beq.n	8002d12 <HAL_TIM_PWM_Start+0xfa>
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	4a14      	ldr	r2, [pc, #80]	; (8002d54 <HAL_TIM_PWM_Start+0x13c>)
 8002d04:	4293      	cmp	r3, r2
 8002d06:	d004      	beq.n	8002d12 <HAL_TIM_PWM_Start+0xfa>
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	4a12      	ldr	r2, [pc, #72]	; (8002d58 <HAL_TIM_PWM_Start+0x140>)
 8002d0e:	4293      	cmp	r3, r2
 8002d10:	d111      	bne.n	8002d36 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	689b      	ldr	r3, [r3, #8]
 8002d18:	f003 0307 	and.w	r3, r3, #7
 8002d1c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	2b06      	cmp	r3, #6
 8002d22:	d010      	beq.n	8002d46 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	681a      	ldr	r2, [r3, #0]
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f042 0201 	orr.w	r2, r2, #1
 8002d32:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d34:	e007      	b.n	8002d46 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	681a      	ldr	r2, [r3, #0]
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f042 0201 	orr.w	r2, r2, #1
 8002d44:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002d46:	2300      	movs	r3, #0
}
 8002d48:	4618      	mov	r0, r3
 8002d4a:	3710      	adds	r7, #16
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	bd80      	pop	{r7, pc}
 8002d50:	40012c00 	.word	0x40012c00
 8002d54:	40000400 	.word	0x40000400
 8002d58:	40000800 	.word	0x40000800

08002d5c <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	b082      	sub	sp, #8
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	6078      	str	r0, [r7, #4]
 8002d64:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	6839      	ldr	r1, [r7, #0]
 8002d6e:	4618      	mov	r0, r3
 8002d70:	f001 f889 	bl	8003e86 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	4a29      	ldr	r2, [pc, #164]	; (8002e20 <HAL_TIM_PWM_Stop+0xc4>)
 8002d7a:	4293      	cmp	r3, r2
 8002d7c:	d117      	bne.n	8002dae <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	6a1a      	ldr	r2, [r3, #32]
 8002d84:	f241 1311 	movw	r3, #4369	; 0x1111
 8002d88:	4013      	ands	r3, r2
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d10f      	bne.n	8002dae <HAL_TIM_PWM_Stop+0x52>
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	6a1a      	ldr	r2, [r3, #32]
 8002d94:	f240 4344 	movw	r3, #1092	; 0x444
 8002d98:	4013      	ands	r3, r2
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d107      	bne.n	8002dae <HAL_TIM_PWM_Stop+0x52>
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002dac:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	6a1a      	ldr	r2, [r3, #32]
 8002db4:	f241 1311 	movw	r3, #4369	; 0x1111
 8002db8:	4013      	ands	r3, r2
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d10f      	bne.n	8002dde <HAL_TIM_PWM_Stop+0x82>
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	6a1a      	ldr	r2, [r3, #32]
 8002dc4:	f240 4344 	movw	r3, #1092	; 0x444
 8002dc8:	4013      	ands	r3, r2
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d107      	bne.n	8002dde <HAL_TIM_PWM_Stop+0x82>
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	681a      	ldr	r2, [r3, #0]
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f022 0201 	bic.w	r2, r2, #1
 8002ddc:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8002dde:	683b      	ldr	r3, [r7, #0]
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d104      	bne.n	8002dee <HAL_TIM_PWM_Stop+0x92>
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	2201      	movs	r2, #1
 8002de8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002dec:	e013      	b.n	8002e16 <HAL_TIM_PWM_Stop+0xba>
 8002dee:	683b      	ldr	r3, [r7, #0]
 8002df0:	2b04      	cmp	r3, #4
 8002df2:	d104      	bne.n	8002dfe <HAL_TIM_PWM_Stop+0xa2>
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	2201      	movs	r2, #1
 8002df8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002dfc:	e00b      	b.n	8002e16 <HAL_TIM_PWM_Stop+0xba>
 8002dfe:	683b      	ldr	r3, [r7, #0]
 8002e00:	2b08      	cmp	r3, #8
 8002e02:	d104      	bne.n	8002e0e <HAL_TIM_PWM_Stop+0xb2>
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	2201      	movs	r2, #1
 8002e08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002e0c:	e003      	b.n	8002e16 <HAL_TIM_PWM_Stop+0xba>
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	2201      	movs	r2, #1
 8002e12:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 8002e16:	2300      	movs	r3, #0
}
 8002e18:	4618      	mov	r0, r3
 8002e1a:	3708      	adds	r7, #8
 8002e1c:	46bd      	mov	sp, r7
 8002e1e:	bd80      	pop	{r7, pc}
 8002e20:	40012c00 	.word	0x40012c00

08002e24 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8002e24:	b580      	push	{r7, lr}
 8002e26:	b082      	sub	sp, #8
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d101      	bne.n	8002e36 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8002e32:	2301      	movs	r3, #1
 8002e34:	e041      	b.n	8002eba <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e3c:	b2db      	uxtb	r3, r3
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d106      	bne.n	8002e50 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	2200      	movs	r2, #0
 8002e46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8002e4a:	6878      	ldr	r0, [r7, #4]
 8002e4c:	f7fe fc0e 	bl	800166c <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	2202      	movs	r2, #2
 8002e54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681a      	ldr	r2, [r3, #0]
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	3304      	adds	r3, #4
 8002e60:	4619      	mov	r1, r3
 8002e62:	4610      	mov	r0, r2
 8002e64:	f000 fc82 	bl	800376c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	2201      	movs	r2, #1
 8002e6c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	2201      	movs	r2, #1
 8002e74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	2201      	movs	r2, #1
 8002e7c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	2201      	movs	r2, #1
 8002e84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	2201      	movs	r2, #1
 8002e8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	2201      	movs	r2, #1
 8002e94:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	2201      	movs	r2, #1
 8002e9c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	2201      	movs	r2, #1
 8002ea4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	2201      	movs	r2, #1
 8002eac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	2201      	movs	r2, #1
 8002eb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002eb8:	2300      	movs	r3, #0
}
 8002eba:	4618      	mov	r0, r3
 8002ebc:	3708      	adds	r7, #8
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	bd80      	pop	{r7, pc}
	...

08002ec4 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	b084      	sub	sp, #16
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	6078      	str	r0, [r7, #4]
 8002ecc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002ece:	2300      	movs	r3, #0
 8002ed0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8002ed2:	683b      	ldr	r3, [r7, #0]
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d104      	bne.n	8002ee2 <HAL_TIM_IC_Start_IT+0x1e>
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002ede:	b2db      	uxtb	r3, r3
 8002ee0:	e013      	b.n	8002f0a <HAL_TIM_IC_Start_IT+0x46>
 8002ee2:	683b      	ldr	r3, [r7, #0]
 8002ee4:	2b04      	cmp	r3, #4
 8002ee6:	d104      	bne.n	8002ef2 <HAL_TIM_IC_Start_IT+0x2e>
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002eee:	b2db      	uxtb	r3, r3
 8002ef0:	e00b      	b.n	8002f0a <HAL_TIM_IC_Start_IT+0x46>
 8002ef2:	683b      	ldr	r3, [r7, #0]
 8002ef4:	2b08      	cmp	r3, #8
 8002ef6:	d104      	bne.n	8002f02 <HAL_TIM_IC_Start_IT+0x3e>
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002efe:	b2db      	uxtb	r3, r3
 8002f00:	e003      	b.n	8002f0a <HAL_TIM_IC_Start_IT+0x46>
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002f08:	b2db      	uxtb	r3, r3
 8002f0a:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8002f0c:	683b      	ldr	r3, [r7, #0]
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d104      	bne.n	8002f1c <HAL_TIM_IC_Start_IT+0x58>
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002f18:	b2db      	uxtb	r3, r3
 8002f1a:	e013      	b.n	8002f44 <HAL_TIM_IC_Start_IT+0x80>
 8002f1c:	683b      	ldr	r3, [r7, #0]
 8002f1e:	2b04      	cmp	r3, #4
 8002f20:	d104      	bne.n	8002f2c <HAL_TIM_IC_Start_IT+0x68>
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8002f28:	b2db      	uxtb	r3, r3
 8002f2a:	e00b      	b.n	8002f44 <HAL_TIM_IC_Start_IT+0x80>
 8002f2c:	683b      	ldr	r3, [r7, #0]
 8002f2e:	2b08      	cmp	r3, #8
 8002f30:	d104      	bne.n	8002f3c <HAL_TIM_IC_Start_IT+0x78>
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002f38:	b2db      	uxtb	r3, r3
 8002f3a:	e003      	b.n	8002f44 <HAL_TIM_IC_Start_IT+0x80>
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002f42:	b2db      	uxtb	r3, r3
 8002f44:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8002f46:	7bbb      	ldrb	r3, [r7, #14]
 8002f48:	2b01      	cmp	r3, #1
 8002f4a:	d102      	bne.n	8002f52 <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8002f4c:	7b7b      	ldrb	r3, [r7, #13]
 8002f4e:	2b01      	cmp	r3, #1
 8002f50:	d001      	beq.n	8002f56 <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 8002f52:	2301      	movs	r3, #1
 8002f54:	e0b8      	b.n	80030c8 <HAL_TIM_IC_Start_IT+0x204>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002f56:	683b      	ldr	r3, [r7, #0]
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d104      	bne.n	8002f66 <HAL_TIM_IC_Start_IT+0xa2>
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	2202      	movs	r2, #2
 8002f60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002f64:	e013      	b.n	8002f8e <HAL_TIM_IC_Start_IT+0xca>
 8002f66:	683b      	ldr	r3, [r7, #0]
 8002f68:	2b04      	cmp	r3, #4
 8002f6a:	d104      	bne.n	8002f76 <HAL_TIM_IC_Start_IT+0xb2>
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	2202      	movs	r2, #2
 8002f70:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002f74:	e00b      	b.n	8002f8e <HAL_TIM_IC_Start_IT+0xca>
 8002f76:	683b      	ldr	r3, [r7, #0]
 8002f78:	2b08      	cmp	r3, #8
 8002f7a:	d104      	bne.n	8002f86 <HAL_TIM_IC_Start_IT+0xc2>
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	2202      	movs	r2, #2
 8002f80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002f84:	e003      	b.n	8002f8e <HAL_TIM_IC_Start_IT+0xca>
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	2202      	movs	r2, #2
 8002f8a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002f8e:	683b      	ldr	r3, [r7, #0]
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d104      	bne.n	8002f9e <HAL_TIM_IC_Start_IT+0xda>
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	2202      	movs	r2, #2
 8002f98:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002f9c:	e013      	b.n	8002fc6 <HAL_TIM_IC_Start_IT+0x102>
 8002f9e:	683b      	ldr	r3, [r7, #0]
 8002fa0:	2b04      	cmp	r3, #4
 8002fa2:	d104      	bne.n	8002fae <HAL_TIM_IC_Start_IT+0xea>
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	2202      	movs	r2, #2
 8002fa8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002fac:	e00b      	b.n	8002fc6 <HAL_TIM_IC_Start_IT+0x102>
 8002fae:	683b      	ldr	r3, [r7, #0]
 8002fb0:	2b08      	cmp	r3, #8
 8002fb2:	d104      	bne.n	8002fbe <HAL_TIM_IC_Start_IT+0xfa>
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	2202      	movs	r2, #2
 8002fb8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002fbc:	e003      	b.n	8002fc6 <HAL_TIM_IC_Start_IT+0x102>
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	2202      	movs	r2, #2
 8002fc2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 8002fc6:	683b      	ldr	r3, [r7, #0]
 8002fc8:	2b0c      	cmp	r3, #12
 8002fca:	d841      	bhi.n	8003050 <HAL_TIM_IC_Start_IT+0x18c>
 8002fcc:	a201      	add	r2, pc, #4	; (adr r2, 8002fd4 <HAL_TIM_IC_Start_IT+0x110>)
 8002fce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fd2:	bf00      	nop
 8002fd4:	08003009 	.word	0x08003009
 8002fd8:	08003051 	.word	0x08003051
 8002fdc:	08003051 	.word	0x08003051
 8002fe0:	08003051 	.word	0x08003051
 8002fe4:	0800301b 	.word	0x0800301b
 8002fe8:	08003051 	.word	0x08003051
 8002fec:	08003051 	.word	0x08003051
 8002ff0:	08003051 	.word	0x08003051
 8002ff4:	0800302d 	.word	0x0800302d
 8002ff8:	08003051 	.word	0x08003051
 8002ffc:	08003051 	.word	0x08003051
 8003000:	08003051 	.word	0x08003051
 8003004:	0800303f 	.word	0x0800303f
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	68da      	ldr	r2, [r3, #12]
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f042 0202 	orr.w	r2, r2, #2
 8003016:	60da      	str	r2, [r3, #12]
      break;
 8003018:	e01d      	b.n	8003056 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	68da      	ldr	r2, [r3, #12]
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f042 0204 	orr.w	r2, r2, #4
 8003028:	60da      	str	r2, [r3, #12]
      break;
 800302a:	e014      	b.n	8003056 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	68da      	ldr	r2, [r3, #12]
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f042 0208 	orr.w	r2, r2, #8
 800303a:	60da      	str	r2, [r3, #12]
      break;
 800303c:	e00b      	b.n	8003056 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	68da      	ldr	r2, [r3, #12]
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f042 0210 	orr.w	r2, r2, #16
 800304c:	60da      	str	r2, [r3, #12]
      break;
 800304e:	e002      	b.n	8003056 <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8003050:	2301      	movs	r3, #1
 8003052:	73fb      	strb	r3, [r7, #15]
      break;
 8003054:	bf00      	nop
  }

  if (status == HAL_OK)
 8003056:	7bfb      	ldrb	r3, [r7, #15]
 8003058:	2b00      	cmp	r3, #0
 800305a:	d134      	bne.n	80030c6 <HAL_TIM_IC_Start_IT+0x202>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	2201      	movs	r2, #1
 8003062:	6839      	ldr	r1, [r7, #0]
 8003064:	4618      	mov	r0, r3
 8003066:	f000 ff0e 	bl	8003e86 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	4a18      	ldr	r2, [pc, #96]	; (80030d0 <HAL_TIM_IC_Start_IT+0x20c>)
 8003070:	4293      	cmp	r3, r2
 8003072:	d00e      	beq.n	8003092 <HAL_TIM_IC_Start_IT+0x1ce>
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800307c:	d009      	beq.n	8003092 <HAL_TIM_IC_Start_IT+0x1ce>
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	4a14      	ldr	r2, [pc, #80]	; (80030d4 <HAL_TIM_IC_Start_IT+0x210>)
 8003084:	4293      	cmp	r3, r2
 8003086:	d004      	beq.n	8003092 <HAL_TIM_IC_Start_IT+0x1ce>
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	4a12      	ldr	r2, [pc, #72]	; (80030d8 <HAL_TIM_IC_Start_IT+0x214>)
 800308e:	4293      	cmp	r3, r2
 8003090:	d111      	bne.n	80030b6 <HAL_TIM_IC_Start_IT+0x1f2>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	689b      	ldr	r3, [r3, #8]
 8003098:	f003 0307 	and.w	r3, r3, #7
 800309c:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800309e:	68bb      	ldr	r3, [r7, #8]
 80030a0:	2b06      	cmp	r3, #6
 80030a2:	d010      	beq.n	80030c6 <HAL_TIM_IC_Start_IT+0x202>
      {
        __HAL_TIM_ENABLE(htim);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	681a      	ldr	r2, [r3, #0]
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f042 0201 	orr.w	r2, r2, #1
 80030b2:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80030b4:	e007      	b.n	80030c6 <HAL_TIM_IC_Start_IT+0x202>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	681a      	ldr	r2, [r3, #0]
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f042 0201 	orr.w	r2, r2, #1
 80030c4:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 80030c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80030c8:	4618      	mov	r0, r3
 80030ca:	3710      	adds	r7, #16
 80030cc:	46bd      	mov	sp, r7
 80030ce:	bd80      	pop	{r7, pc}
 80030d0:	40012c00 	.word	0x40012c00
 80030d4:	40000400 	.word	0x40000400
 80030d8:	40000800 	.word	0x40000800

080030dc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80030dc:	b580      	push	{r7, lr}
 80030de:	b082      	sub	sp, #8
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	691b      	ldr	r3, [r3, #16]
 80030ea:	f003 0302 	and.w	r3, r3, #2
 80030ee:	2b02      	cmp	r3, #2
 80030f0:	d122      	bne.n	8003138 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	68db      	ldr	r3, [r3, #12]
 80030f8:	f003 0302 	and.w	r3, r3, #2
 80030fc:	2b02      	cmp	r3, #2
 80030fe:	d11b      	bne.n	8003138 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f06f 0202 	mvn.w	r2, #2
 8003108:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	2201      	movs	r2, #1
 800310e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	699b      	ldr	r3, [r3, #24]
 8003116:	f003 0303 	and.w	r3, r3, #3
 800311a:	2b00      	cmp	r3, #0
 800311c:	d003      	beq.n	8003126 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800311e:	6878      	ldr	r0, [r7, #4]
 8003120:	f7fd fd3a 	bl	8000b98 <HAL_TIM_IC_CaptureCallback>
 8003124:	e005      	b.n	8003132 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003126:	6878      	ldr	r0, [r7, #4]
 8003128:	f000 fb05 	bl	8003736 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800312c:	6878      	ldr	r0, [r7, #4]
 800312e:	f000 fb0b 	bl	8003748 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	2200      	movs	r2, #0
 8003136:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	691b      	ldr	r3, [r3, #16]
 800313e:	f003 0304 	and.w	r3, r3, #4
 8003142:	2b04      	cmp	r3, #4
 8003144:	d122      	bne.n	800318c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	68db      	ldr	r3, [r3, #12]
 800314c:	f003 0304 	and.w	r3, r3, #4
 8003150:	2b04      	cmp	r3, #4
 8003152:	d11b      	bne.n	800318c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f06f 0204 	mvn.w	r2, #4
 800315c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	2202      	movs	r2, #2
 8003162:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	699b      	ldr	r3, [r3, #24]
 800316a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800316e:	2b00      	cmp	r3, #0
 8003170:	d003      	beq.n	800317a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003172:	6878      	ldr	r0, [r7, #4]
 8003174:	f7fd fd10 	bl	8000b98 <HAL_TIM_IC_CaptureCallback>
 8003178:	e005      	b.n	8003186 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800317a:	6878      	ldr	r0, [r7, #4]
 800317c:	f000 fadb 	bl	8003736 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003180:	6878      	ldr	r0, [r7, #4]
 8003182:	f000 fae1 	bl	8003748 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	2200      	movs	r2, #0
 800318a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	691b      	ldr	r3, [r3, #16]
 8003192:	f003 0308 	and.w	r3, r3, #8
 8003196:	2b08      	cmp	r3, #8
 8003198:	d122      	bne.n	80031e0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	68db      	ldr	r3, [r3, #12]
 80031a0:	f003 0308 	and.w	r3, r3, #8
 80031a4:	2b08      	cmp	r3, #8
 80031a6:	d11b      	bne.n	80031e0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f06f 0208 	mvn.w	r2, #8
 80031b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	2204      	movs	r2, #4
 80031b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	69db      	ldr	r3, [r3, #28]
 80031be:	f003 0303 	and.w	r3, r3, #3
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d003      	beq.n	80031ce <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80031c6:	6878      	ldr	r0, [r7, #4]
 80031c8:	f7fd fce6 	bl	8000b98 <HAL_TIM_IC_CaptureCallback>
 80031cc:	e005      	b.n	80031da <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80031ce:	6878      	ldr	r0, [r7, #4]
 80031d0:	f000 fab1 	bl	8003736 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80031d4:	6878      	ldr	r0, [r7, #4]
 80031d6:	f000 fab7 	bl	8003748 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	2200      	movs	r2, #0
 80031de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	691b      	ldr	r3, [r3, #16]
 80031e6:	f003 0310 	and.w	r3, r3, #16
 80031ea:	2b10      	cmp	r3, #16
 80031ec:	d122      	bne.n	8003234 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	68db      	ldr	r3, [r3, #12]
 80031f4:	f003 0310 	and.w	r3, r3, #16
 80031f8:	2b10      	cmp	r3, #16
 80031fa:	d11b      	bne.n	8003234 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f06f 0210 	mvn.w	r2, #16
 8003204:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	2208      	movs	r2, #8
 800320a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	69db      	ldr	r3, [r3, #28]
 8003212:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003216:	2b00      	cmp	r3, #0
 8003218:	d003      	beq.n	8003222 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800321a:	6878      	ldr	r0, [r7, #4]
 800321c:	f7fd fcbc 	bl	8000b98 <HAL_TIM_IC_CaptureCallback>
 8003220:	e005      	b.n	800322e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003222:	6878      	ldr	r0, [r7, #4]
 8003224:	f000 fa87 	bl	8003736 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003228:	6878      	ldr	r0, [r7, #4]
 800322a:	f000 fa8d 	bl	8003748 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	2200      	movs	r2, #0
 8003232:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	691b      	ldr	r3, [r3, #16]
 800323a:	f003 0301 	and.w	r3, r3, #1
 800323e:	2b01      	cmp	r3, #1
 8003240:	d10e      	bne.n	8003260 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	68db      	ldr	r3, [r3, #12]
 8003248:	f003 0301 	and.w	r3, r3, #1
 800324c:	2b01      	cmp	r3, #1
 800324e:	d107      	bne.n	8003260 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f06f 0201 	mvn.w	r2, #1
 8003258:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800325a:	6878      	ldr	r0, [r7, #4]
 800325c:	f7fe f9b9 	bl	80015d2 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	691b      	ldr	r3, [r3, #16]
 8003266:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800326a:	2b80      	cmp	r3, #128	; 0x80
 800326c:	d10e      	bne.n	800328c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	68db      	ldr	r3, [r3, #12]
 8003274:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003278:	2b80      	cmp	r3, #128	; 0x80
 800327a:	d107      	bne.n	800328c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003284:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003286:	6878      	ldr	r0, [r7, #4]
 8003288:	f000 fe89 	bl	8003f9e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	691b      	ldr	r3, [r3, #16]
 8003292:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003296:	2b40      	cmp	r3, #64	; 0x40
 8003298:	d10e      	bne.n	80032b8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	68db      	ldr	r3, [r3, #12]
 80032a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032a4:	2b40      	cmp	r3, #64	; 0x40
 80032a6:	d107      	bne.n	80032b8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80032b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80032b2:	6878      	ldr	r0, [r7, #4]
 80032b4:	f000 fa51 	bl	800375a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	691b      	ldr	r3, [r3, #16]
 80032be:	f003 0320 	and.w	r3, r3, #32
 80032c2:	2b20      	cmp	r3, #32
 80032c4:	d10e      	bne.n	80032e4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	68db      	ldr	r3, [r3, #12]
 80032cc:	f003 0320 	and.w	r3, r3, #32
 80032d0:	2b20      	cmp	r3, #32
 80032d2:	d107      	bne.n	80032e4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f06f 0220 	mvn.w	r2, #32
 80032dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80032de:	6878      	ldr	r0, [r7, #4]
 80032e0:	f000 fe54 	bl	8003f8c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80032e4:	bf00      	nop
 80032e6:	3708      	adds	r7, #8
 80032e8:	46bd      	mov	sp, r7
 80032ea:	bd80      	pop	{r7, pc}

080032ec <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80032ec:	b580      	push	{r7, lr}
 80032ee:	b086      	sub	sp, #24
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	60f8      	str	r0, [r7, #12]
 80032f4:	60b9      	str	r1, [r7, #8]
 80032f6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80032f8:	2300      	movs	r3, #0
 80032fa:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003302:	2b01      	cmp	r3, #1
 8003304:	d101      	bne.n	800330a <HAL_TIM_IC_ConfigChannel+0x1e>
 8003306:	2302      	movs	r3, #2
 8003308:	e088      	b.n	800341c <HAL_TIM_IC_ConfigChannel+0x130>
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	2201      	movs	r2, #1
 800330e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	2b00      	cmp	r3, #0
 8003316:	d11b      	bne.n	8003350 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	6818      	ldr	r0, [r3, #0]
 800331c:	68bb      	ldr	r3, [r7, #8]
 800331e:	6819      	ldr	r1, [r3, #0]
 8003320:	68bb      	ldr	r3, [r7, #8]
 8003322:	685a      	ldr	r2, [r3, #4]
 8003324:	68bb      	ldr	r3, [r7, #8]
 8003326:	68db      	ldr	r3, [r3, #12]
 8003328:	f000 fc0a 	bl	8003b40 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	699a      	ldr	r2, [r3, #24]
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f022 020c 	bic.w	r2, r2, #12
 800333a:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	6999      	ldr	r1, [r3, #24]
 8003342:	68bb      	ldr	r3, [r7, #8]
 8003344:	689a      	ldr	r2, [r3, #8]
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	430a      	orrs	r2, r1
 800334c:	619a      	str	r2, [r3, #24]
 800334e:	e060      	b.n	8003412 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	2b04      	cmp	r3, #4
 8003354:	d11c      	bne.n	8003390 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	6818      	ldr	r0, [r3, #0]
 800335a:	68bb      	ldr	r3, [r7, #8]
 800335c:	6819      	ldr	r1, [r3, #0]
 800335e:	68bb      	ldr	r3, [r7, #8]
 8003360:	685a      	ldr	r2, [r3, #4]
 8003362:	68bb      	ldr	r3, [r7, #8]
 8003364:	68db      	ldr	r3, [r3, #12]
 8003366:	f000 fc73 	bl	8003c50 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	699a      	ldr	r2, [r3, #24]
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8003378:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	6999      	ldr	r1, [r3, #24]
 8003380:	68bb      	ldr	r3, [r7, #8]
 8003382:	689b      	ldr	r3, [r3, #8]
 8003384:	021a      	lsls	r2, r3, #8
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	430a      	orrs	r2, r1
 800338c:	619a      	str	r2, [r3, #24]
 800338e:	e040      	b.n	8003412 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	2b08      	cmp	r3, #8
 8003394:	d11b      	bne.n	80033ce <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	6818      	ldr	r0, [r3, #0]
 800339a:	68bb      	ldr	r3, [r7, #8]
 800339c:	6819      	ldr	r1, [r3, #0]
 800339e:	68bb      	ldr	r3, [r7, #8]
 80033a0:	685a      	ldr	r2, [r3, #4]
 80033a2:	68bb      	ldr	r3, [r7, #8]
 80033a4:	68db      	ldr	r3, [r3, #12]
 80033a6:	f000 fcbe 	bl	8003d26 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	69da      	ldr	r2, [r3, #28]
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f022 020c 	bic.w	r2, r2, #12
 80033b8:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	69d9      	ldr	r1, [r3, #28]
 80033c0:	68bb      	ldr	r3, [r7, #8]
 80033c2:	689a      	ldr	r2, [r3, #8]
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	430a      	orrs	r2, r1
 80033ca:	61da      	str	r2, [r3, #28]
 80033cc:	e021      	b.n	8003412 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	2b0c      	cmp	r3, #12
 80033d2:	d11c      	bne.n	800340e <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	6818      	ldr	r0, [r3, #0]
 80033d8:	68bb      	ldr	r3, [r7, #8]
 80033da:	6819      	ldr	r1, [r3, #0]
 80033dc:	68bb      	ldr	r3, [r7, #8]
 80033de:	685a      	ldr	r2, [r3, #4]
 80033e0:	68bb      	ldr	r3, [r7, #8]
 80033e2:	68db      	ldr	r3, [r3, #12]
 80033e4:	f000 fcda 	bl	8003d9c <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	69da      	ldr	r2, [r3, #28]
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80033f6:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	69d9      	ldr	r1, [r3, #28]
 80033fe:	68bb      	ldr	r3, [r7, #8]
 8003400:	689b      	ldr	r3, [r3, #8]
 8003402:	021a      	lsls	r2, r3, #8
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	430a      	orrs	r2, r1
 800340a:	61da      	str	r2, [r3, #28]
 800340c:	e001      	b.n	8003412 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 800340e:	2301      	movs	r3, #1
 8003410:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	2200      	movs	r2, #0
 8003416:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800341a:	7dfb      	ldrb	r3, [r7, #23]
}
 800341c:	4618      	mov	r0, r3
 800341e:	3718      	adds	r7, #24
 8003420:	46bd      	mov	sp, r7
 8003422:	bd80      	pop	{r7, pc}

08003424 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003424:	b580      	push	{r7, lr}
 8003426:	b086      	sub	sp, #24
 8003428:	af00      	add	r7, sp, #0
 800342a:	60f8      	str	r0, [r7, #12]
 800342c:	60b9      	str	r1, [r7, #8]
 800342e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003430:	2300      	movs	r3, #0
 8003432:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800343a:	2b01      	cmp	r3, #1
 800343c:	d101      	bne.n	8003442 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800343e:	2302      	movs	r3, #2
 8003440:	e0ae      	b.n	80035a0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	2201      	movs	r2, #1
 8003446:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	2b0c      	cmp	r3, #12
 800344e:	f200 809f 	bhi.w	8003590 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003452:	a201      	add	r2, pc, #4	; (adr r2, 8003458 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003454:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003458:	0800348d 	.word	0x0800348d
 800345c:	08003591 	.word	0x08003591
 8003460:	08003591 	.word	0x08003591
 8003464:	08003591 	.word	0x08003591
 8003468:	080034cd 	.word	0x080034cd
 800346c:	08003591 	.word	0x08003591
 8003470:	08003591 	.word	0x08003591
 8003474:	08003591 	.word	0x08003591
 8003478:	0800350f 	.word	0x0800350f
 800347c:	08003591 	.word	0x08003591
 8003480:	08003591 	.word	0x08003591
 8003484:	08003591 	.word	0x08003591
 8003488:	0800354f 	.word	0x0800354f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	68b9      	ldr	r1, [r7, #8]
 8003492:	4618      	mov	r0, r3
 8003494:	f000 f9cc 	bl	8003830 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	699a      	ldr	r2, [r3, #24]
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f042 0208 	orr.w	r2, r2, #8
 80034a6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	699a      	ldr	r2, [r3, #24]
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f022 0204 	bic.w	r2, r2, #4
 80034b6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	6999      	ldr	r1, [r3, #24]
 80034be:	68bb      	ldr	r3, [r7, #8]
 80034c0:	691a      	ldr	r2, [r3, #16]
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	430a      	orrs	r2, r1
 80034c8:	619a      	str	r2, [r3, #24]
      break;
 80034ca:	e064      	b.n	8003596 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	68b9      	ldr	r1, [r7, #8]
 80034d2:	4618      	mov	r0, r3
 80034d4:	f000 fa12 	bl	80038fc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	699a      	ldr	r2, [r3, #24]
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80034e6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	699a      	ldr	r2, [r3, #24]
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80034f6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	6999      	ldr	r1, [r3, #24]
 80034fe:	68bb      	ldr	r3, [r7, #8]
 8003500:	691b      	ldr	r3, [r3, #16]
 8003502:	021a      	lsls	r2, r3, #8
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	430a      	orrs	r2, r1
 800350a:	619a      	str	r2, [r3, #24]
      break;
 800350c:	e043      	b.n	8003596 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	68b9      	ldr	r1, [r7, #8]
 8003514:	4618      	mov	r0, r3
 8003516:	f000 fa5b 	bl	80039d0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	69da      	ldr	r2, [r3, #28]
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f042 0208 	orr.w	r2, r2, #8
 8003528:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	69da      	ldr	r2, [r3, #28]
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f022 0204 	bic.w	r2, r2, #4
 8003538:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	69d9      	ldr	r1, [r3, #28]
 8003540:	68bb      	ldr	r3, [r7, #8]
 8003542:	691a      	ldr	r2, [r3, #16]
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	430a      	orrs	r2, r1
 800354a:	61da      	str	r2, [r3, #28]
      break;
 800354c:	e023      	b.n	8003596 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	68b9      	ldr	r1, [r7, #8]
 8003554:	4618      	mov	r0, r3
 8003556:	f000 faa5 	bl	8003aa4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	69da      	ldr	r2, [r3, #28]
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003568:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	69da      	ldr	r2, [r3, #28]
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003578:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	69d9      	ldr	r1, [r3, #28]
 8003580:	68bb      	ldr	r3, [r7, #8]
 8003582:	691b      	ldr	r3, [r3, #16]
 8003584:	021a      	lsls	r2, r3, #8
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	430a      	orrs	r2, r1
 800358c:	61da      	str	r2, [r3, #28]
      break;
 800358e:	e002      	b.n	8003596 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003590:	2301      	movs	r3, #1
 8003592:	75fb      	strb	r3, [r7, #23]
      break;
 8003594:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	2200      	movs	r2, #0
 800359a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800359e:	7dfb      	ldrb	r3, [r7, #23]
}
 80035a0:	4618      	mov	r0, r3
 80035a2:	3718      	adds	r7, #24
 80035a4:	46bd      	mov	sp, r7
 80035a6:	bd80      	pop	{r7, pc}

080035a8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80035a8:	b580      	push	{r7, lr}
 80035aa:	b084      	sub	sp, #16
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	6078      	str	r0, [r7, #4]
 80035b0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80035b2:	2300      	movs	r3, #0
 80035b4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80035bc:	2b01      	cmp	r3, #1
 80035be:	d101      	bne.n	80035c4 <HAL_TIM_ConfigClockSource+0x1c>
 80035c0:	2302      	movs	r3, #2
 80035c2:	e0b4      	b.n	800372e <HAL_TIM_ConfigClockSource+0x186>
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	2201      	movs	r2, #1
 80035c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	2202      	movs	r2, #2
 80035d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	689b      	ldr	r3, [r3, #8]
 80035da:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80035dc:	68bb      	ldr	r3, [r7, #8]
 80035de:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80035e2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80035e4:	68bb      	ldr	r3, [r7, #8]
 80035e6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80035ea:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	68ba      	ldr	r2, [r7, #8]
 80035f2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80035f4:	683b      	ldr	r3, [r7, #0]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80035fc:	d03e      	beq.n	800367c <HAL_TIM_ConfigClockSource+0xd4>
 80035fe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003602:	f200 8087 	bhi.w	8003714 <HAL_TIM_ConfigClockSource+0x16c>
 8003606:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800360a:	f000 8086 	beq.w	800371a <HAL_TIM_ConfigClockSource+0x172>
 800360e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003612:	d87f      	bhi.n	8003714 <HAL_TIM_ConfigClockSource+0x16c>
 8003614:	2b70      	cmp	r3, #112	; 0x70
 8003616:	d01a      	beq.n	800364e <HAL_TIM_ConfigClockSource+0xa6>
 8003618:	2b70      	cmp	r3, #112	; 0x70
 800361a:	d87b      	bhi.n	8003714 <HAL_TIM_ConfigClockSource+0x16c>
 800361c:	2b60      	cmp	r3, #96	; 0x60
 800361e:	d050      	beq.n	80036c2 <HAL_TIM_ConfigClockSource+0x11a>
 8003620:	2b60      	cmp	r3, #96	; 0x60
 8003622:	d877      	bhi.n	8003714 <HAL_TIM_ConfigClockSource+0x16c>
 8003624:	2b50      	cmp	r3, #80	; 0x50
 8003626:	d03c      	beq.n	80036a2 <HAL_TIM_ConfigClockSource+0xfa>
 8003628:	2b50      	cmp	r3, #80	; 0x50
 800362a:	d873      	bhi.n	8003714 <HAL_TIM_ConfigClockSource+0x16c>
 800362c:	2b40      	cmp	r3, #64	; 0x40
 800362e:	d058      	beq.n	80036e2 <HAL_TIM_ConfigClockSource+0x13a>
 8003630:	2b40      	cmp	r3, #64	; 0x40
 8003632:	d86f      	bhi.n	8003714 <HAL_TIM_ConfigClockSource+0x16c>
 8003634:	2b30      	cmp	r3, #48	; 0x30
 8003636:	d064      	beq.n	8003702 <HAL_TIM_ConfigClockSource+0x15a>
 8003638:	2b30      	cmp	r3, #48	; 0x30
 800363a:	d86b      	bhi.n	8003714 <HAL_TIM_ConfigClockSource+0x16c>
 800363c:	2b20      	cmp	r3, #32
 800363e:	d060      	beq.n	8003702 <HAL_TIM_ConfigClockSource+0x15a>
 8003640:	2b20      	cmp	r3, #32
 8003642:	d867      	bhi.n	8003714 <HAL_TIM_ConfigClockSource+0x16c>
 8003644:	2b00      	cmp	r3, #0
 8003646:	d05c      	beq.n	8003702 <HAL_TIM_ConfigClockSource+0x15a>
 8003648:	2b10      	cmp	r3, #16
 800364a:	d05a      	beq.n	8003702 <HAL_TIM_ConfigClockSource+0x15a>
 800364c:	e062      	b.n	8003714 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	6818      	ldr	r0, [r3, #0]
 8003652:	683b      	ldr	r3, [r7, #0]
 8003654:	6899      	ldr	r1, [r3, #8]
 8003656:	683b      	ldr	r3, [r7, #0]
 8003658:	685a      	ldr	r2, [r3, #4]
 800365a:	683b      	ldr	r3, [r7, #0]
 800365c:	68db      	ldr	r3, [r3, #12]
 800365e:	f000 fbf3 	bl	8003e48 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	689b      	ldr	r3, [r3, #8]
 8003668:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800366a:	68bb      	ldr	r3, [r7, #8]
 800366c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003670:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	68ba      	ldr	r2, [r7, #8]
 8003678:	609a      	str	r2, [r3, #8]
      break;
 800367a:	e04f      	b.n	800371c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	6818      	ldr	r0, [r3, #0]
 8003680:	683b      	ldr	r3, [r7, #0]
 8003682:	6899      	ldr	r1, [r3, #8]
 8003684:	683b      	ldr	r3, [r7, #0]
 8003686:	685a      	ldr	r2, [r3, #4]
 8003688:	683b      	ldr	r3, [r7, #0]
 800368a:	68db      	ldr	r3, [r3, #12]
 800368c:	f000 fbdc 	bl	8003e48 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	689a      	ldr	r2, [r3, #8]
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800369e:	609a      	str	r2, [r3, #8]
      break;
 80036a0:	e03c      	b.n	800371c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	6818      	ldr	r0, [r3, #0]
 80036a6:	683b      	ldr	r3, [r7, #0]
 80036a8:	6859      	ldr	r1, [r3, #4]
 80036aa:	683b      	ldr	r3, [r7, #0]
 80036ac:	68db      	ldr	r3, [r3, #12]
 80036ae:	461a      	mov	r2, r3
 80036b0:	f000 faa0 	bl	8003bf4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	2150      	movs	r1, #80	; 0x50
 80036ba:	4618      	mov	r0, r3
 80036bc:	f000 fbaa 	bl	8003e14 <TIM_ITRx_SetConfig>
      break;
 80036c0:	e02c      	b.n	800371c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	6818      	ldr	r0, [r3, #0]
 80036c6:	683b      	ldr	r3, [r7, #0]
 80036c8:	6859      	ldr	r1, [r3, #4]
 80036ca:	683b      	ldr	r3, [r7, #0]
 80036cc:	68db      	ldr	r3, [r3, #12]
 80036ce:	461a      	mov	r2, r3
 80036d0:	f000 fafa 	bl	8003cc8 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	2160      	movs	r1, #96	; 0x60
 80036da:	4618      	mov	r0, r3
 80036dc:	f000 fb9a 	bl	8003e14 <TIM_ITRx_SetConfig>
      break;
 80036e0:	e01c      	b.n	800371c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	6818      	ldr	r0, [r3, #0]
 80036e6:	683b      	ldr	r3, [r7, #0]
 80036e8:	6859      	ldr	r1, [r3, #4]
 80036ea:	683b      	ldr	r3, [r7, #0]
 80036ec:	68db      	ldr	r3, [r3, #12]
 80036ee:	461a      	mov	r2, r3
 80036f0:	f000 fa80 	bl	8003bf4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	2140      	movs	r1, #64	; 0x40
 80036fa:	4618      	mov	r0, r3
 80036fc:	f000 fb8a 	bl	8003e14 <TIM_ITRx_SetConfig>
      break;
 8003700:	e00c      	b.n	800371c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681a      	ldr	r2, [r3, #0]
 8003706:	683b      	ldr	r3, [r7, #0]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	4619      	mov	r1, r3
 800370c:	4610      	mov	r0, r2
 800370e:	f000 fb81 	bl	8003e14 <TIM_ITRx_SetConfig>
      break;
 8003712:	e003      	b.n	800371c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003714:	2301      	movs	r3, #1
 8003716:	73fb      	strb	r3, [r7, #15]
      break;
 8003718:	e000      	b.n	800371c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800371a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	2201      	movs	r2, #1
 8003720:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	2200      	movs	r2, #0
 8003728:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800372c:	7bfb      	ldrb	r3, [r7, #15]
}
 800372e:	4618      	mov	r0, r3
 8003730:	3710      	adds	r7, #16
 8003732:	46bd      	mov	sp, r7
 8003734:	bd80      	pop	{r7, pc}

08003736 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003736:	b480      	push	{r7}
 8003738:	b083      	sub	sp, #12
 800373a:	af00      	add	r7, sp, #0
 800373c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800373e:	bf00      	nop
 8003740:	370c      	adds	r7, #12
 8003742:	46bd      	mov	sp, r7
 8003744:	bc80      	pop	{r7}
 8003746:	4770      	bx	lr

08003748 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003748:	b480      	push	{r7}
 800374a:	b083      	sub	sp, #12
 800374c:	af00      	add	r7, sp, #0
 800374e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003750:	bf00      	nop
 8003752:	370c      	adds	r7, #12
 8003754:	46bd      	mov	sp, r7
 8003756:	bc80      	pop	{r7}
 8003758:	4770      	bx	lr

0800375a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800375a:	b480      	push	{r7}
 800375c:	b083      	sub	sp, #12
 800375e:	af00      	add	r7, sp, #0
 8003760:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003762:	bf00      	nop
 8003764:	370c      	adds	r7, #12
 8003766:	46bd      	mov	sp, r7
 8003768:	bc80      	pop	{r7}
 800376a:	4770      	bx	lr

0800376c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800376c:	b480      	push	{r7}
 800376e:	b085      	sub	sp, #20
 8003770:	af00      	add	r7, sp, #0
 8003772:	6078      	str	r0, [r7, #4]
 8003774:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	4a29      	ldr	r2, [pc, #164]	; (8003824 <TIM_Base_SetConfig+0xb8>)
 8003780:	4293      	cmp	r3, r2
 8003782:	d00b      	beq.n	800379c <TIM_Base_SetConfig+0x30>
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800378a:	d007      	beq.n	800379c <TIM_Base_SetConfig+0x30>
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	4a26      	ldr	r2, [pc, #152]	; (8003828 <TIM_Base_SetConfig+0xbc>)
 8003790:	4293      	cmp	r3, r2
 8003792:	d003      	beq.n	800379c <TIM_Base_SetConfig+0x30>
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	4a25      	ldr	r2, [pc, #148]	; (800382c <TIM_Base_SetConfig+0xc0>)
 8003798:	4293      	cmp	r3, r2
 800379a:	d108      	bne.n	80037ae <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80037a2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80037a4:	683b      	ldr	r3, [r7, #0]
 80037a6:	685b      	ldr	r3, [r3, #4]
 80037a8:	68fa      	ldr	r2, [r7, #12]
 80037aa:	4313      	orrs	r3, r2
 80037ac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	4a1c      	ldr	r2, [pc, #112]	; (8003824 <TIM_Base_SetConfig+0xb8>)
 80037b2:	4293      	cmp	r3, r2
 80037b4:	d00b      	beq.n	80037ce <TIM_Base_SetConfig+0x62>
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037bc:	d007      	beq.n	80037ce <TIM_Base_SetConfig+0x62>
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	4a19      	ldr	r2, [pc, #100]	; (8003828 <TIM_Base_SetConfig+0xbc>)
 80037c2:	4293      	cmp	r3, r2
 80037c4:	d003      	beq.n	80037ce <TIM_Base_SetConfig+0x62>
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	4a18      	ldr	r2, [pc, #96]	; (800382c <TIM_Base_SetConfig+0xc0>)
 80037ca:	4293      	cmp	r3, r2
 80037cc:	d108      	bne.n	80037e0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80037d4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80037d6:	683b      	ldr	r3, [r7, #0]
 80037d8:	68db      	ldr	r3, [r3, #12]
 80037da:	68fa      	ldr	r2, [r7, #12]
 80037dc:	4313      	orrs	r3, r2
 80037de:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80037e6:	683b      	ldr	r3, [r7, #0]
 80037e8:	695b      	ldr	r3, [r3, #20]
 80037ea:	4313      	orrs	r3, r2
 80037ec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	68fa      	ldr	r2, [r7, #12]
 80037f2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80037f4:	683b      	ldr	r3, [r7, #0]
 80037f6:	689a      	ldr	r2, [r3, #8]
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80037fc:	683b      	ldr	r3, [r7, #0]
 80037fe:	681a      	ldr	r2, [r3, #0]
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	4a07      	ldr	r2, [pc, #28]	; (8003824 <TIM_Base_SetConfig+0xb8>)
 8003808:	4293      	cmp	r3, r2
 800380a:	d103      	bne.n	8003814 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800380c:	683b      	ldr	r3, [r7, #0]
 800380e:	691a      	ldr	r2, [r3, #16]
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	2201      	movs	r2, #1
 8003818:	615a      	str	r2, [r3, #20]
}
 800381a:	bf00      	nop
 800381c:	3714      	adds	r7, #20
 800381e:	46bd      	mov	sp, r7
 8003820:	bc80      	pop	{r7}
 8003822:	4770      	bx	lr
 8003824:	40012c00 	.word	0x40012c00
 8003828:	40000400 	.word	0x40000400
 800382c:	40000800 	.word	0x40000800

08003830 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003830:	b480      	push	{r7}
 8003832:	b087      	sub	sp, #28
 8003834:	af00      	add	r7, sp, #0
 8003836:	6078      	str	r0, [r7, #4]
 8003838:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	6a1b      	ldr	r3, [r3, #32]
 800383e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	6a1b      	ldr	r3, [r3, #32]
 8003844:	f023 0201 	bic.w	r2, r3, #1
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	685b      	ldr	r3, [r3, #4]
 8003850:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	699b      	ldr	r3, [r3, #24]
 8003856:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800385e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	f023 0303 	bic.w	r3, r3, #3
 8003866:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003868:	683b      	ldr	r3, [r7, #0]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	68fa      	ldr	r2, [r7, #12]
 800386e:	4313      	orrs	r3, r2
 8003870:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003872:	697b      	ldr	r3, [r7, #20]
 8003874:	f023 0302 	bic.w	r3, r3, #2
 8003878:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800387a:	683b      	ldr	r3, [r7, #0]
 800387c:	689b      	ldr	r3, [r3, #8]
 800387e:	697a      	ldr	r2, [r7, #20]
 8003880:	4313      	orrs	r3, r2
 8003882:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	4a1c      	ldr	r2, [pc, #112]	; (80038f8 <TIM_OC1_SetConfig+0xc8>)
 8003888:	4293      	cmp	r3, r2
 800388a:	d10c      	bne.n	80038a6 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800388c:	697b      	ldr	r3, [r7, #20]
 800388e:	f023 0308 	bic.w	r3, r3, #8
 8003892:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003894:	683b      	ldr	r3, [r7, #0]
 8003896:	68db      	ldr	r3, [r3, #12]
 8003898:	697a      	ldr	r2, [r7, #20]
 800389a:	4313      	orrs	r3, r2
 800389c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800389e:	697b      	ldr	r3, [r7, #20]
 80038a0:	f023 0304 	bic.w	r3, r3, #4
 80038a4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	4a13      	ldr	r2, [pc, #76]	; (80038f8 <TIM_OC1_SetConfig+0xc8>)
 80038aa:	4293      	cmp	r3, r2
 80038ac:	d111      	bne.n	80038d2 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80038ae:	693b      	ldr	r3, [r7, #16]
 80038b0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80038b4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80038b6:	693b      	ldr	r3, [r7, #16]
 80038b8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80038bc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80038be:	683b      	ldr	r3, [r7, #0]
 80038c0:	695b      	ldr	r3, [r3, #20]
 80038c2:	693a      	ldr	r2, [r7, #16]
 80038c4:	4313      	orrs	r3, r2
 80038c6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80038c8:	683b      	ldr	r3, [r7, #0]
 80038ca:	699b      	ldr	r3, [r3, #24]
 80038cc:	693a      	ldr	r2, [r7, #16]
 80038ce:	4313      	orrs	r3, r2
 80038d0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	693a      	ldr	r2, [r7, #16]
 80038d6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	68fa      	ldr	r2, [r7, #12]
 80038dc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80038de:	683b      	ldr	r3, [r7, #0]
 80038e0:	685a      	ldr	r2, [r3, #4]
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	697a      	ldr	r2, [r7, #20]
 80038ea:	621a      	str	r2, [r3, #32]
}
 80038ec:	bf00      	nop
 80038ee:	371c      	adds	r7, #28
 80038f0:	46bd      	mov	sp, r7
 80038f2:	bc80      	pop	{r7}
 80038f4:	4770      	bx	lr
 80038f6:	bf00      	nop
 80038f8:	40012c00 	.word	0x40012c00

080038fc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80038fc:	b480      	push	{r7}
 80038fe:	b087      	sub	sp, #28
 8003900:	af00      	add	r7, sp, #0
 8003902:	6078      	str	r0, [r7, #4]
 8003904:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	6a1b      	ldr	r3, [r3, #32]
 800390a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	6a1b      	ldr	r3, [r3, #32]
 8003910:	f023 0210 	bic.w	r2, r3, #16
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	685b      	ldr	r3, [r3, #4]
 800391c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	699b      	ldr	r3, [r3, #24]
 8003922:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800392a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003932:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003934:	683b      	ldr	r3, [r7, #0]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	021b      	lsls	r3, r3, #8
 800393a:	68fa      	ldr	r2, [r7, #12]
 800393c:	4313      	orrs	r3, r2
 800393e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003940:	697b      	ldr	r3, [r7, #20]
 8003942:	f023 0320 	bic.w	r3, r3, #32
 8003946:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003948:	683b      	ldr	r3, [r7, #0]
 800394a:	689b      	ldr	r3, [r3, #8]
 800394c:	011b      	lsls	r3, r3, #4
 800394e:	697a      	ldr	r2, [r7, #20]
 8003950:	4313      	orrs	r3, r2
 8003952:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	4a1d      	ldr	r2, [pc, #116]	; (80039cc <TIM_OC2_SetConfig+0xd0>)
 8003958:	4293      	cmp	r3, r2
 800395a:	d10d      	bne.n	8003978 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800395c:	697b      	ldr	r3, [r7, #20]
 800395e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003962:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003964:	683b      	ldr	r3, [r7, #0]
 8003966:	68db      	ldr	r3, [r3, #12]
 8003968:	011b      	lsls	r3, r3, #4
 800396a:	697a      	ldr	r2, [r7, #20]
 800396c:	4313      	orrs	r3, r2
 800396e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003970:	697b      	ldr	r3, [r7, #20]
 8003972:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003976:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	4a14      	ldr	r2, [pc, #80]	; (80039cc <TIM_OC2_SetConfig+0xd0>)
 800397c:	4293      	cmp	r3, r2
 800397e:	d113      	bne.n	80039a8 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003980:	693b      	ldr	r3, [r7, #16]
 8003982:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003986:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003988:	693b      	ldr	r3, [r7, #16]
 800398a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800398e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003990:	683b      	ldr	r3, [r7, #0]
 8003992:	695b      	ldr	r3, [r3, #20]
 8003994:	009b      	lsls	r3, r3, #2
 8003996:	693a      	ldr	r2, [r7, #16]
 8003998:	4313      	orrs	r3, r2
 800399a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800399c:	683b      	ldr	r3, [r7, #0]
 800399e:	699b      	ldr	r3, [r3, #24]
 80039a0:	009b      	lsls	r3, r3, #2
 80039a2:	693a      	ldr	r2, [r7, #16]
 80039a4:	4313      	orrs	r3, r2
 80039a6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	693a      	ldr	r2, [r7, #16]
 80039ac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	68fa      	ldr	r2, [r7, #12]
 80039b2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80039b4:	683b      	ldr	r3, [r7, #0]
 80039b6:	685a      	ldr	r2, [r3, #4]
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	697a      	ldr	r2, [r7, #20]
 80039c0:	621a      	str	r2, [r3, #32]
}
 80039c2:	bf00      	nop
 80039c4:	371c      	adds	r7, #28
 80039c6:	46bd      	mov	sp, r7
 80039c8:	bc80      	pop	{r7}
 80039ca:	4770      	bx	lr
 80039cc:	40012c00 	.word	0x40012c00

080039d0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80039d0:	b480      	push	{r7}
 80039d2:	b087      	sub	sp, #28
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	6078      	str	r0, [r7, #4]
 80039d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	6a1b      	ldr	r3, [r3, #32]
 80039de:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	6a1b      	ldr	r3, [r3, #32]
 80039e4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	685b      	ldr	r3, [r3, #4]
 80039f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	69db      	ldr	r3, [r3, #28]
 80039f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	f023 0303 	bic.w	r3, r3, #3
 8003a06:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003a08:	683b      	ldr	r3, [r7, #0]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	68fa      	ldr	r2, [r7, #12]
 8003a0e:	4313      	orrs	r3, r2
 8003a10:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003a12:	697b      	ldr	r3, [r7, #20]
 8003a14:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003a18:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003a1a:	683b      	ldr	r3, [r7, #0]
 8003a1c:	689b      	ldr	r3, [r3, #8]
 8003a1e:	021b      	lsls	r3, r3, #8
 8003a20:	697a      	ldr	r2, [r7, #20]
 8003a22:	4313      	orrs	r3, r2
 8003a24:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	4a1d      	ldr	r2, [pc, #116]	; (8003aa0 <TIM_OC3_SetConfig+0xd0>)
 8003a2a:	4293      	cmp	r3, r2
 8003a2c:	d10d      	bne.n	8003a4a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003a2e:	697b      	ldr	r3, [r7, #20]
 8003a30:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003a34:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003a36:	683b      	ldr	r3, [r7, #0]
 8003a38:	68db      	ldr	r3, [r3, #12]
 8003a3a:	021b      	lsls	r3, r3, #8
 8003a3c:	697a      	ldr	r2, [r7, #20]
 8003a3e:	4313      	orrs	r3, r2
 8003a40:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003a42:	697b      	ldr	r3, [r7, #20]
 8003a44:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003a48:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	4a14      	ldr	r2, [pc, #80]	; (8003aa0 <TIM_OC3_SetConfig+0xd0>)
 8003a4e:	4293      	cmp	r3, r2
 8003a50:	d113      	bne.n	8003a7a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003a52:	693b      	ldr	r3, [r7, #16]
 8003a54:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003a58:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003a5a:	693b      	ldr	r3, [r7, #16]
 8003a5c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003a60:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003a62:	683b      	ldr	r3, [r7, #0]
 8003a64:	695b      	ldr	r3, [r3, #20]
 8003a66:	011b      	lsls	r3, r3, #4
 8003a68:	693a      	ldr	r2, [r7, #16]
 8003a6a:	4313      	orrs	r3, r2
 8003a6c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003a6e:	683b      	ldr	r3, [r7, #0]
 8003a70:	699b      	ldr	r3, [r3, #24]
 8003a72:	011b      	lsls	r3, r3, #4
 8003a74:	693a      	ldr	r2, [r7, #16]
 8003a76:	4313      	orrs	r3, r2
 8003a78:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	693a      	ldr	r2, [r7, #16]
 8003a7e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	68fa      	ldr	r2, [r7, #12]
 8003a84:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003a86:	683b      	ldr	r3, [r7, #0]
 8003a88:	685a      	ldr	r2, [r3, #4]
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	697a      	ldr	r2, [r7, #20]
 8003a92:	621a      	str	r2, [r3, #32]
}
 8003a94:	bf00      	nop
 8003a96:	371c      	adds	r7, #28
 8003a98:	46bd      	mov	sp, r7
 8003a9a:	bc80      	pop	{r7}
 8003a9c:	4770      	bx	lr
 8003a9e:	bf00      	nop
 8003aa0:	40012c00 	.word	0x40012c00

08003aa4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003aa4:	b480      	push	{r7}
 8003aa6:	b087      	sub	sp, #28
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	6078      	str	r0, [r7, #4]
 8003aac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	6a1b      	ldr	r3, [r3, #32]
 8003ab2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	6a1b      	ldr	r3, [r3, #32]
 8003ab8:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	685b      	ldr	r3, [r3, #4]
 8003ac4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	69db      	ldr	r3, [r3, #28]
 8003aca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003ad2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ada:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003adc:	683b      	ldr	r3, [r7, #0]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	021b      	lsls	r3, r3, #8
 8003ae2:	68fa      	ldr	r2, [r7, #12]
 8003ae4:	4313      	orrs	r3, r2
 8003ae6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003ae8:	693b      	ldr	r3, [r7, #16]
 8003aea:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003aee:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003af0:	683b      	ldr	r3, [r7, #0]
 8003af2:	689b      	ldr	r3, [r3, #8]
 8003af4:	031b      	lsls	r3, r3, #12
 8003af6:	693a      	ldr	r2, [r7, #16]
 8003af8:	4313      	orrs	r3, r2
 8003afa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	4a0f      	ldr	r2, [pc, #60]	; (8003b3c <TIM_OC4_SetConfig+0x98>)
 8003b00:	4293      	cmp	r3, r2
 8003b02:	d109      	bne.n	8003b18 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003b04:	697b      	ldr	r3, [r7, #20]
 8003b06:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003b0a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003b0c:	683b      	ldr	r3, [r7, #0]
 8003b0e:	695b      	ldr	r3, [r3, #20]
 8003b10:	019b      	lsls	r3, r3, #6
 8003b12:	697a      	ldr	r2, [r7, #20]
 8003b14:	4313      	orrs	r3, r2
 8003b16:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	697a      	ldr	r2, [r7, #20]
 8003b1c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	68fa      	ldr	r2, [r7, #12]
 8003b22:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003b24:	683b      	ldr	r3, [r7, #0]
 8003b26:	685a      	ldr	r2, [r3, #4]
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	693a      	ldr	r2, [r7, #16]
 8003b30:	621a      	str	r2, [r3, #32]
}
 8003b32:	bf00      	nop
 8003b34:	371c      	adds	r7, #28
 8003b36:	46bd      	mov	sp, r7
 8003b38:	bc80      	pop	{r7}
 8003b3a:	4770      	bx	lr
 8003b3c:	40012c00 	.word	0x40012c00

08003b40 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8003b40:	b480      	push	{r7}
 8003b42:	b087      	sub	sp, #28
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	60f8      	str	r0, [r7, #12]
 8003b48:	60b9      	str	r1, [r7, #8]
 8003b4a:	607a      	str	r2, [r7, #4]
 8003b4c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	6a1b      	ldr	r3, [r3, #32]
 8003b52:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	6a1b      	ldr	r3, [r3, #32]
 8003b58:	f023 0201 	bic.w	r2, r3, #1
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	699b      	ldr	r3, [r3, #24]
 8003b64:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	4a1f      	ldr	r2, [pc, #124]	; (8003be8 <TIM_TI1_SetConfig+0xa8>)
 8003b6a:	4293      	cmp	r3, r2
 8003b6c:	d00b      	beq.n	8003b86 <TIM_TI1_SetConfig+0x46>
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b74:	d007      	beq.n	8003b86 <TIM_TI1_SetConfig+0x46>
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	4a1c      	ldr	r2, [pc, #112]	; (8003bec <TIM_TI1_SetConfig+0xac>)
 8003b7a:	4293      	cmp	r3, r2
 8003b7c:	d003      	beq.n	8003b86 <TIM_TI1_SetConfig+0x46>
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	4a1b      	ldr	r2, [pc, #108]	; (8003bf0 <TIM_TI1_SetConfig+0xb0>)
 8003b82:	4293      	cmp	r3, r2
 8003b84:	d101      	bne.n	8003b8a <TIM_TI1_SetConfig+0x4a>
 8003b86:	2301      	movs	r3, #1
 8003b88:	e000      	b.n	8003b8c <TIM_TI1_SetConfig+0x4c>
 8003b8a:	2300      	movs	r3, #0
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d008      	beq.n	8003ba2 <TIM_TI1_SetConfig+0x62>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8003b90:	697b      	ldr	r3, [r7, #20]
 8003b92:	f023 0303 	bic.w	r3, r3, #3
 8003b96:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8003b98:	697a      	ldr	r2, [r7, #20]
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	4313      	orrs	r3, r2
 8003b9e:	617b      	str	r3, [r7, #20]
 8003ba0:	e003      	b.n	8003baa <TIM_TI1_SetConfig+0x6a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8003ba2:	697b      	ldr	r3, [r7, #20]
 8003ba4:	f043 0301 	orr.w	r3, r3, #1
 8003ba8:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003baa:	697b      	ldr	r3, [r7, #20]
 8003bac:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003bb0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8003bb2:	683b      	ldr	r3, [r7, #0]
 8003bb4:	011b      	lsls	r3, r3, #4
 8003bb6:	b2db      	uxtb	r3, r3
 8003bb8:	697a      	ldr	r2, [r7, #20]
 8003bba:	4313      	orrs	r3, r2
 8003bbc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003bbe:	693b      	ldr	r3, [r7, #16]
 8003bc0:	f023 030a 	bic.w	r3, r3, #10
 8003bc4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8003bc6:	68bb      	ldr	r3, [r7, #8]
 8003bc8:	f003 030a 	and.w	r3, r3, #10
 8003bcc:	693a      	ldr	r2, [r7, #16]
 8003bce:	4313      	orrs	r3, r2
 8003bd0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	697a      	ldr	r2, [r7, #20]
 8003bd6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	693a      	ldr	r2, [r7, #16]
 8003bdc:	621a      	str	r2, [r3, #32]
}
 8003bde:	bf00      	nop
 8003be0:	371c      	adds	r7, #28
 8003be2:	46bd      	mov	sp, r7
 8003be4:	bc80      	pop	{r7}
 8003be6:	4770      	bx	lr
 8003be8:	40012c00 	.word	0x40012c00
 8003bec:	40000400 	.word	0x40000400
 8003bf0:	40000800 	.word	0x40000800

08003bf4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003bf4:	b480      	push	{r7}
 8003bf6:	b087      	sub	sp, #28
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	60f8      	str	r0, [r7, #12]
 8003bfc:	60b9      	str	r1, [r7, #8]
 8003bfe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	6a1b      	ldr	r3, [r3, #32]
 8003c04:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	6a1b      	ldr	r3, [r3, #32]
 8003c0a:	f023 0201 	bic.w	r2, r3, #1
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	699b      	ldr	r3, [r3, #24]
 8003c16:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003c18:	693b      	ldr	r3, [r7, #16]
 8003c1a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003c1e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	011b      	lsls	r3, r3, #4
 8003c24:	693a      	ldr	r2, [r7, #16]
 8003c26:	4313      	orrs	r3, r2
 8003c28:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003c2a:	697b      	ldr	r3, [r7, #20]
 8003c2c:	f023 030a 	bic.w	r3, r3, #10
 8003c30:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003c32:	697a      	ldr	r2, [r7, #20]
 8003c34:	68bb      	ldr	r3, [r7, #8]
 8003c36:	4313      	orrs	r3, r2
 8003c38:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	693a      	ldr	r2, [r7, #16]
 8003c3e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	697a      	ldr	r2, [r7, #20]
 8003c44:	621a      	str	r2, [r3, #32]
}
 8003c46:	bf00      	nop
 8003c48:	371c      	adds	r7, #28
 8003c4a:	46bd      	mov	sp, r7
 8003c4c:	bc80      	pop	{r7}
 8003c4e:	4770      	bx	lr

08003c50 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003c50:	b480      	push	{r7}
 8003c52:	b087      	sub	sp, #28
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	60f8      	str	r0, [r7, #12]
 8003c58:	60b9      	str	r1, [r7, #8]
 8003c5a:	607a      	str	r2, [r7, #4]
 8003c5c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	6a1b      	ldr	r3, [r3, #32]
 8003c62:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	6a1b      	ldr	r3, [r3, #32]
 8003c68:	f023 0210 	bic.w	r2, r3, #16
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	699b      	ldr	r3, [r3, #24]
 8003c74:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8003c76:	693b      	ldr	r3, [r7, #16]
 8003c78:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c7c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	021b      	lsls	r3, r3, #8
 8003c82:	693a      	ldr	r2, [r7, #16]
 8003c84:	4313      	orrs	r3, r2
 8003c86:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003c88:	693b      	ldr	r3, [r7, #16]
 8003c8a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003c8e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8003c90:	683b      	ldr	r3, [r7, #0]
 8003c92:	031b      	lsls	r3, r3, #12
 8003c94:	b29b      	uxth	r3, r3
 8003c96:	693a      	ldr	r2, [r7, #16]
 8003c98:	4313      	orrs	r3, r2
 8003c9a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003c9c:	697b      	ldr	r3, [r7, #20]
 8003c9e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003ca2:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8003ca4:	68bb      	ldr	r3, [r7, #8]
 8003ca6:	011b      	lsls	r3, r3, #4
 8003ca8:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8003cac:	697a      	ldr	r2, [r7, #20]
 8003cae:	4313      	orrs	r3, r2
 8003cb0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	693a      	ldr	r2, [r7, #16]
 8003cb6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	697a      	ldr	r2, [r7, #20]
 8003cbc:	621a      	str	r2, [r3, #32]
}
 8003cbe:	bf00      	nop
 8003cc0:	371c      	adds	r7, #28
 8003cc2:	46bd      	mov	sp, r7
 8003cc4:	bc80      	pop	{r7}
 8003cc6:	4770      	bx	lr

08003cc8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003cc8:	b480      	push	{r7}
 8003cca:	b087      	sub	sp, #28
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	60f8      	str	r0, [r7, #12]
 8003cd0:	60b9      	str	r1, [r7, #8]
 8003cd2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	6a1b      	ldr	r3, [r3, #32]
 8003cd8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	6a1b      	ldr	r3, [r3, #32]
 8003cde:	f023 0210 	bic.w	r2, r3, #16
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	699b      	ldr	r3, [r3, #24]
 8003cea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003cec:	693b      	ldr	r3, [r7, #16]
 8003cee:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003cf2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	031b      	lsls	r3, r3, #12
 8003cf8:	693a      	ldr	r2, [r7, #16]
 8003cfa:	4313      	orrs	r3, r2
 8003cfc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003cfe:	697b      	ldr	r3, [r7, #20]
 8003d00:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003d04:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003d06:	68bb      	ldr	r3, [r7, #8]
 8003d08:	011b      	lsls	r3, r3, #4
 8003d0a:	697a      	ldr	r2, [r7, #20]
 8003d0c:	4313      	orrs	r3, r2
 8003d0e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	693a      	ldr	r2, [r7, #16]
 8003d14:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	697a      	ldr	r2, [r7, #20]
 8003d1a:	621a      	str	r2, [r3, #32]
}
 8003d1c:	bf00      	nop
 8003d1e:	371c      	adds	r7, #28
 8003d20:	46bd      	mov	sp, r7
 8003d22:	bc80      	pop	{r7}
 8003d24:	4770      	bx	lr

08003d26 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003d26:	b480      	push	{r7}
 8003d28:	b087      	sub	sp, #28
 8003d2a:	af00      	add	r7, sp, #0
 8003d2c:	60f8      	str	r0, [r7, #12]
 8003d2e:	60b9      	str	r1, [r7, #8]
 8003d30:	607a      	str	r2, [r7, #4]
 8003d32:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	6a1b      	ldr	r3, [r3, #32]
 8003d38:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	6a1b      	ldr	r3, [r3, #32]
 8003d3e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	69db      	ldr	r3, [r3, #28]
 8003d4a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8003d4c:	693b      	ldr	r3, [r7, #16]
 8003d4e:	f023 0303 	bic.w	r3, r3, #3
 8003d52:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8003d54:	693a      	ldr	r2, [r7, #16]
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	4313      	orrs	r3, r2
 8003d5a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8003d5c:	693b      	ldr	r3, [r7, #16]
 8003d5e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003d62:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8003d64:	683b      	ldr	r3, [r7, #0]
 8003d66:	011b      	lsls	r3, r3, #4
 8003d68:	b2db      	uxtb	r3, r3
 8003d6a:	693a      	ldr	r2, [r7, #16]
 8003d6c:	4313      	orrs	r3, r2
 8003d6e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P);
 8003d70:	697b      	ldr	r3, [r7, #20]
 8003d72:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003d76:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 8003d78:	68bb      	ldr	r3, [r7, #8]
 8003d7a:	021b      	lsls	r3, r3, #8
 8003d7c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003d80:	697a      	ldr	r2, [r7, #20]
 8003d82:	4313      	orrs	r3, r2
 8003d84:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	693a      	ldr	r2, [r7, #16]
 8003d8a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	697a      	ldr	r2, [r7, #20]
 8003d90:	621a      	str	r2, [r3, #32]
}
 8003d92:	bf00      	nop
 8003d94:	371c      	adds	r7, #28
 8003d96:	46bd      	mov	sp, r7
 8003d98:	bc80      	pop	{r7}
 8003d9a:	4770      	bx	lr

08003d9c <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003d9c:	b480      	push	{r7}
 8003d9e:	b087      	sub	sp, #28
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	60f8      	str	r0, [r7, #12]
 8003da4:	60b9      	str	r1, [r7, #8]
 8003da6:	607a      	str	r2, [r7, #4]
 8003da8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	6a1b      	ldr	r3, [r3, #32]
 8003dae:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	6a1b      	ldr	r3, [r3, #32]
 8003db4:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	69db      	ldr	r3, [r3, #28]
 8003dc0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8003dc2:	693b      	ldr	r3, [r7, #16]
 8003dc4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003dc8:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	021b      	lsls	r3, r3, #8
 8003dce:	693a      	ldr	r2, [r7, #16]
 8003dd0:	4313      	orrs	r3, r2
 8003dd2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8003dd4:	693b      	ldr	r3, [r7, #16]
 8003dd6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003dda:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8003ddc:	683b      	ldr	r3, [r7, #0]
 8003dde:	031b      	lsls	r3, r3, #12
 8003de0:	b29b      	uxth	r3, r3
 8003de2:	693a      	ldr	r2, [r7, #16]
 8003de4:	4313      	orrs	r3, r2
 8003de6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P);
 8003de8:	697b      	ldr	r3, [r7, #20]
 8003dea:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003dee:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 8003df0:	68bb      	ldr	r3, [r7, #8]
 8003df2:	031b      	lsls	r3, r3, #12
 8003df4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003df8:	697a      	ldr	r2, [r7, #20]
 8003dfa:	4313      	orrs	r3, r2
 8003dfc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	693a      	ldr	r2, [r7, #16]
 8003e02:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	697a      	ldr	r2, [r7, #20]
 8003e08:	621a      	str	r2, [r3, #32]
}
 8003e0a:	bf00      	nop
 8003e0c:	371c      	adds	r7, #28
 8003e0e:	46bd      	mov	sp, r7
 8003e10:	bc80      	pop	{r7}
 8003e12:	4770      	bx	lr

08003e14 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003e14:	b480      	push	{r7}
 8003e16:	b085      	sub	sp, #20
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	6078      	str	r0, [r7, #4]
 8003e1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	689b      	ldr	r3, [r3, #8]
 8003e22:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e2a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003e2c:	683a      	ldr	r2, [r7, #0]
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	4313      	orrs	r3, r2
 8003e32:	f043 0307 	orr.w	r3, r3, #7
 8003e36:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	68fa      	ldr	r2, [r7, #12]
 8003e3c:	609a      	str	r2, [r3, #8]
}
 8003e3e:	bf00      	nop
 8003e40:	3714      	adds	r7, #20
 8003e42:	46bd      	mov	sp, r7
 8003e44:	bc80      	pop	{r7}
 8003e46:	4770      	bx	lr

08003e48 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003e48:	b480      	push	{r7}
 8003e4a:	b087      	sub	sp, #28
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	60f8      	str	r0, [r7, #12]
 8003e50:	60b9      	str	r1, [r7, #8]
 8003e52:	607a      	str	r2, [r7, #4]
 8003e54:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	689b      	ldr	r3, [r3, #8]
 8003e5a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003e5c:	697b      	ldr	r3, [r7, #20]
 8003e5e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003e62:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003e64:	683b      	ldr	r3, [r7, #0]
 8003e66:	021a      	lsls	r2, r3, #8
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	431a      	orrs	r2, r3
 8003e6c:	68bb      	ldr	r3, [r7, #8]
 8003e6e:	4313      	orrs	r3, r2
 8003e70:	697a      	ldr	r2, [r7, #20]
 8003e72:	4313      	orrs	r3, r2
 8003e74:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	697a      	ldr	r2, [r7, #20]
 8003e7a:	609a      	str	r2, [r3, #8]
}
 8003e7c:	bf00      	nop
 8003e7e:	371c      	adds	r7, #28
 8003e80:	46bd      	mov	sp, r7
 8003e82:	bc80      	pop	{r7}
 8003e84:	4770      	bx	lr

08003e86 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003e86:	b480      	push	{r7}
 8003e88:	b087      	sub	sp, #28
 8003e8a:	af00      	add	r7, sp, #0
 8003e8c:	60f8      	str	r0, [r7, #12]
 8003e8e:	60b9      	str	r1, [r7, #8]
 8003e90:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003e92:	68bb      	ldr	r3, [r7, #8]
 8003e94:	f003 031f 	and.w	r3, r3, #31
 8003e98:	2201      	movs	r2, #1
 8003e9a:	fa02 f303 	lsl.w	r3, r2, r3
 8003e9e:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	6a1a      	ldr	r2, [r3, #32]
 8003ea4:	697b      	ldr	r3, [r7, #20]
 8003ea6:	43db      	mvns	r3, r3
 8003ea8:	401a      	ands	r2, r3
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	6a1a      	ldr	r2, [r3, #32]
 8003eb2:	68bb      	ldr	r3, [r7, #8]
 8003eb4:	f003 031f 	and.w	r3, r3, #31
 8003eb8:	6879      	ldr	r1, [r7, #4]
 8003eba:	fa01 f303 	lsl.w	r3, r1, r3
 8003ebe:	431a      	orrs	r2, r3
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	621a      	str	r2, [r3, #32]
}
 8003ec4:	bf00      	nop
 8003ec6:	371c      	adds	r7, #28
 8003ec8:	46bd      	mov	sp, r7
 8003eca:	bc80      	pop	{r7}
 8003ecc:	4770      	bx	lr
	...

08003ed0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003ed0:	b480      	push	{r7}
 8003ed2:	b085      	sub	sp, #20
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	6078      	str	r0, [r7, #4]
 8003ed8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ee0:	2b01      	cmp	r3, #1
 8003ee2:	d101      	bne.n	8003ee8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003ee4:	2302      	movs	r3, #2
 8003ee6:	e046      	b.n	8003f76 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	2201      	movs	r2, #1
 8003eec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	2202      	movs	r2, #2
 8003ef4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	685b      	ldr	r3, [r3, #4]
 8003efe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	689b      	ldr	r3, [r3, #8]
 8003f06:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f0e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003f10:	683b      	ldr	r3, [r7, #0]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	68fa      	ldr	r2, [r7, #12]
 8003f16:	4313      	orrs	r3, r2
 8003f18:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	68fa      	ldr	r2, [r7, #12]
 8003f20:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	4a16      	ldr	r2, [pc, #88]	; (8003f80 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003f28:	4293      	cmp	r3, r2
 8003f2a:	d00e      	beq.n	8003f4a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f34:	d009      	beq.n	8003f4a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	4a12      	ldr	r2, [pc, #72]	; (8003f84 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003f3c:	4293      	cmp	r3, r2
 8003f3e:	d004      	beq.n	8003f4a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	4a10      	ldr	r2, [pc, #64]	; (8003f88 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003f46:	4293      	cmp	r3, r2
 8003f48:	d10c      	bne.n	8003f64 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003f4a:	68bb      	ldr	r3, [r7, #8]
 8003f4c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003f50:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003f52:	683b      	ldr	r3, [r7, #0]
 8003f54:	685b      	ldr	r3, [r3, #4]
 8003f56:	68ba      	ldr	r2, [r7, #8]
 8003f58:	4313      	orrs	r3, r2
 8003f5a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	68ba      	ldr	r2, [r7, #8]
 8003f62:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	2201      	movs	r2, #1
 8003f68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	2200      	movs	r2, #0
 8003f70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003f74:	2300      	movs	r3, #0
}
 8003f76:	4618      	mov	r0, r3
 8003f78:	3714      	adds	r7, #20
 8003f7a:	46bd      	mov	sp, r7
 8003f7c:	bc80      	pop	{r7}
 8003f7e:	4770      	bx	lr
 8003f80:	40012c00 	.word	0x40012c00
 8003f84:	40000400 	.word	0x40000400
 8003f88:	40000800 	.word	0x40000800

08003f8c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003f8c:	b480      	push	{r7}
 8003f8e:	b083      	sub	sp, #12
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003f94:	bf00      	nop
 8003f96:	370c      	adds	r7, #12
 8003f98:	46bd      	mov	sp, r7
 8003f9a:	bc80      	pop	{r7}
 8003f9c:	4770      	bx	lr

08003f9e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003f9e:	b480      	push	{r7}
 8003fa0:	b083      	sub	sp, #12
 8003fa2:	af00      	add	r7, sp, #0
 8003fa4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003fa6:	bf00      	nop
 8003fa8:	370c      	adds	r7, #12
 8003faa:	46bd      	mov	sp, r7
 8003fac:	bc80      	pop	{r7}
 8003fae:	4770      	bx	lr

08003fb0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003fb0:	b580      	push	{r7, lr}
 8003fb2:	b082      	sub	sp, #8
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d101      	bne.n	8003fc2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003fbe:	2301      	movs	r3, #1
 8003fc0:	e042      	b.n	8004048 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003fc8:	b2db      	uxtb	r3, r3
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d106      	bne.n	8003fdc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	2200      	movs	r2, #0
 8003fd2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003fd6:	6878      	ldr	r0, [r7, #4]
 8003fd8:	f7fd fc20 	bl	800181c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	2224      	movs	r2, #36	; 0x24
 8003fe0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	68da      	ldr	r2, [r3, #12]
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003ff2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003ff4:	6878      	ldr	r0, [r7, #4]
 8003ff6:	f000 fe57 	bl	8004ca8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	691a      	ldr	r2, [r3, #16]
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004008:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	695a      	ldr	r2, [r3, #20]
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004018:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	68da      	ldr	r2, [r3, #12]
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004028:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	2200      	movs	r2, #0
 800402e:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	2220      	movs	r2, #32
 8004034:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	2220      	movs	r2, #32
 800403c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	2200      	movs	r2, #0
 8004044:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8004046:	2300      	movs	r3, #0
}
 8004048:	4618      	mov	r0, r3
 800404a:	3708      	adds	r7, #8
 800404c:	46bd      	mov	sp, r7
 800404e:	bd80      	pop	{r7, pc}

08004050 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004050:	b580      	push	{r7, lr}
 8004052:	b08a      	sub	sp, #40	; 0x28
 8004054:	af02      	add	r7, sp, #8
 8004056:	60f8      	str	r0, [r7, #12]
 8004058:	60b9      	str	r1, [r7, #8]
 800405a:	603b      	str	r3, [r7, #0]
 800405c:	4613      	mov	r3, r2
 800405e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004060:	2300      	movs	r3, #0
 8004062:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800406a:	b2db      	uxtb	r3, r3
 800406c:	2b20      	cmp	r3, #32
 800406e:	d16d      	bne.n	800414c <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8004070:	68bb      	ldr	r3, [r7, #8]
 8004072:	2b00      	cmp	r3, #0
 8004074:	d002      	beq.n	800407c <HAL_UART_Transmit+0x2c>
 8004076:	88fb      	ldrh	r3, [r7, #6]
 8004078:	2b00      	cmp	r3, #0
 800407a:	d101      	bne.n	8004080 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800407c:	2301      	movs	r3, #1
 800407e:	e066      	b.n	800414e <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	2200      	movs	r2, #0
 8004084:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	2221      	movs	r2, #33	; 0x21
 800408a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800408e:	f7fd fd59 	bl	8001b44 <HAL_GetTick>
 8004092:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	88fa      	ldrh	r2, [r7, #6]
 8004098:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	88fa      	ldrh	r2, [r7, #6]
 800409e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	689b      	ldr	r3, [r3, #8]
 80040a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80040a8:	d108      	bne.n	80040bc <HAL_UART_Transmit+0x6c>
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	691b      	ldr	r3, [r3, #16]
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d104      	bne.n	80040bc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80040b2:	2300      	movs	r3, #0
 80040b4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80040b6:	68bb      	ldr	r3, [r7, #8]
 80040b8:	61bb      	str	r3, [r7, #24]
 80040ba:	e003      	b.n	80040c4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80040bc:	68bb      	ldr	r3, [r7, #8]
 80040be:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80040c0:	2300      	movs	r3, #0
 80040c2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80040c4:	e02a      	b.n	800411c <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80040c6:	683b      	ldr	r3, [r7, #0]
 80040c8:	9300      	str	r3, [sp, #0]
 80040ca:	697b      	ldr	r3, [r7, #20]
 80040cc:	2200      	movs	r2, #0
 80040ce:	2180      	movs	r1, #128	; 0x80
 80040d0:	68f8      	ldr	r0, [r7, #12]
 80040d2:	f000 fba6 	bl	8004822 <UART_WaitOnFlagUntilTimeout>
 80040d6:	4603      	mov	r3, r0
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d001      	beq.n	80040e0 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 80040dc:	2303      	movs	r3, #3
 80040de:	e036      	b.n	800414e <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 80040e0:	69fb      	ldr	r3, [r7, #28]
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d10b      	bne.n	80040fe <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80040e6:	69bb      	ldr	r3, [r7, #24]
 80040e8:	881b      	ldrh	r3, [r3, #0]
 80040ea:	461a      	mov	r2, r3
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80040f4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80040f6:	69bb      	ldr	r3, [r7, #24]
 80040f8:	3302      	adds	r3, #2
 80040fa:	61bb      	str	r3, [r7, #24]
 80040fc:	e007      	b.n	800410e <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80040fe:	69fb      	ldr	r3, [r7, #28]
 8004100:	781a      	ldrb	r2, [r3, #0]
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004108:	69fb      	ldr	r3, [r7, #28]
 800410a:	3301      	adds	r3, #1
 800410c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004112:	b29b      	uxth	r3, r3
 8004114:	3b01      	subs	r3, #1
 8004116:	b29a      	uxth	r2, r3
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004120:	b29b      	uxth	r3, r3
 8004122:	2b00      	cmp	r3, #0
 8004124:	d1cf      	bne.n	80040c6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004126:	683b      	ldr	r3, [r7, #0]
 8004128:	9300      	str	r3, [sp, #0]
 800412a:	697b      	ldr	r3, [r7, #20]
 800412c:	2200      	movs	r2, #0
 800412e:	2140      	movs	r1, #64	; 0x40
 8004130:	68f8      	ldr	r0, [r7, #12]
 8004132:	f000 fb76 	bl	8004822 <UART_WaitOnFlagUntilTimeout>
 8004136:	4603      	mov	r3, r0
 8004138:	2b00      	cmp	r3, #0
 800413a:	d001      	beq.n	8004140 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 800413c:	2303      	movs	r3, #3
 800413e:	e006      	b.n	800414e <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	2220      	movs	r2, #32
 8004144:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8004148:	2300      	movs	r3, #0
 800414a:	e000      	b.n	800414e <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 800414c:	2302      	movs	r3, #2
  }
}
 800414e:	4618      	mov	r0, r3
 8004150:	3720      	adds	r7, #32
 8004152:	46bd      	mov	sp, r7
 8004154:	bd80      	pop	{r7, pc}

08004156 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004156:	b580      	push	{r7, lr}
 8004158:	b08a      	sub	sp, #40	; 0x28
 800415a:	af02      	add	r7, sp, #8
 800415c:	60f8      	str	r0, [r7, #12]
 800415e:	60b9      	str	r1, [r7, #8]
 8004160:	603b      	str	r3, [r7, #0]
 8004162:	4613      	mov	r3, r2
 8004164:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004166:	2300      	movs	r3, #0
 8004168:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004170:	b2db      	uxtb	r3, r3
 8004172:	2b20      	cmp	r3, #32
 8004174:	d17c      	bne.n	8004270 <HAL_UART_Receive+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004176:	68bb      	ldr	r3, [r7, #8]
 8004178:	2b00      	cmp	r3, #0
 800417a:	d002      	beq.n	8004182 <HAL_UART_Receive+0x2c>
 800417c:	88fb      	ldrh	r3, [r7, #6]
 800417e:	2b00      	cmp	r3, #0
 8004180:	d101      	bne.n	8004186 <HAL_UART_Receive+0x30>
    {
      return  HAL_ERROR;
 8004182:	2301      	movs	r3, #1
 8004184:	e075      	b.n	8004272 <HAL_UART_Receive+0x11c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	2200      	movs	r2, #0
 800418a:	645a      	str	r2, [r3, #68]	; 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	2222      	movs	r2, #34	; 0x22
 8004190:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	2200      	movs	r2, #0
 8004198:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800419a:	f7fd fcd3 	bl	8001b44 <HAL_GetTick>
 800419e:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	88fa      	ldrh	r2, [r7, #6]
 80041a4:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	88fa      	ldrh	r2, [r7, #6]
 80041aa:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	689b      	ldr	r3, [r3, #8]
 80041b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80041b4:	d108      	bne.n	80041c8 <HAL_UART_Receive+0x72>
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	691b      	ldr	r3, [r3, #16]
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d104      	bne.n	80041c8 <HAL_UART_Receive+0x72>
    {
      pdata8bits  = NULL;
 80041be:	2300      	movs	r3, #0
 80041c0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80041c2:	68bb      	ldr	r3, [r7, #8]
 80041c4:	61bb      	str	r3, [r7, #24]
 80041c6:	e003      	b.n	80041d0 <HAL_UART_Receive+0x7a>
    }
    else
    {
      pdata8bits  = pData;
 80041c8:	68bb      	ldr	r3, [r7, #8]
 80041ca:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80041cc:	2300      	movs	r3, #0
 80041ce:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80041d0:	e043      	b.n	800425a <HAL_UART_Receive+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80041d2:	683b      	ldr	r3, [r7, #0]
 80041d4:	9300      	str	r3, [sp, #0]
 80041d6:	697b      	ldr	r3, [r7, #20]
 80041d8:	2200      	movs	r2, #0
 80041da:	2120      	movs	r1, #32
 80041dc:	68f8      	ldr	r0, [r7, #12]
 80041de:	f000 fb20 	bl	8004822 <UART_WaitOnFlagUntilTimeout>
 80041e2:	4603      	mov	r3, r0
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d001      	beq.n	80041ec <HAL_UART_Receive+0x96>
      {
        return HAL_TIMEOUT;
 80041e8:	2303      	movs	r3, #3
 80041ea:	e042      	b.n	8004272 <HAL_UART_Receive+0x11c>
      }
      if (pdata8bits == NULL)
 80041ec:	69fb      	ldr	r3, [r7, #28]
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d10c      	bne.n	800420c <HAL_UART_Receive+0xb6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	685b      	ldr	r3, [r3, #4]
 80041f8:	b29b      	uxth	r3, r3
 80041fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80041fe:	b29a      	uxth	r2, r3
 8004200:	69bb      	ldr	r3, [r7, #24]
 8004202:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8004204:	69bb      	ldr	r3, [r7, #24]
 8004206:	3302      	adds	r3, #2
 8004208:	61bb      	str	r3, [r7, #24]
 800420a:	e01f      	b.n	800424c <HAL_UART_Receive+0xf6>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	689b      	ldr	r3, [r3, #8]
 8004210:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004214:	d007      	beq.n	8004226 <HAL_UART_Receive+0xd0>
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	689b      	ldr	r3, [r3, #8]
 800421a:	2b00      	cmp	r3, #0
 800421c:	d10a      	bne.n	8004234 <HAL_UART_Receive+0xde>
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	691b      	ldr	r3, [r3, #16]
 8004222:	2b00      	cmp	r3, #0
 8004224:	d106      	bne.n	8004234 <HAL_UART_Receive+0xde>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	685b      	ldr	r3, [r3, #4]
 800422c:	b2da      	uxtb	r2, r3
 800422e:	69fb      	ldr	r3, [r7, #28]
 8004230:	701a      	strb	r2, [r3, #0]
 8004232:	e008      	b.n	8004246 <HAL_UART_Receive+0xf0>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	685b      	ldr	r3, [r3, #4]
 800423a:	b2db      	uxtb	r3, r3
 800423c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004240:	b2da      	uxtb	r2, r3
 8004242:	69fb      	ldr	r3, [r7, #28]
 8004244:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8004246:	69fb      	ldr	r3, [r7, #28]
 8004248:	3301      	adds	r3, #1
 800424a:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004250:	b29b      	uxth	r3, r3
 8004252:	3b01      	subs	r3, #1
 8004254:	b29a      	uxth	r2, r3
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800425e:	b29b      	uxth	r3, r3
 8004260:	2b00      	cmp	r3, #0
 8004262:	d1b6      	bne.n	80041d2 <HAL_UART_Receive+0x7c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	2220      	movs	r2, #32
 8004268:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    return HAL_OK;
 800426c:	2300      	movs	r3, #0
 800426e:	e000      	b.n	8004272 <HAL_UART_Receive+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004270:	2302      	movs	r3, #2
  }
}
 8004272:	4618      	mov	r0, r3
 8004274:	3720      	adds	r7, #32
 8004276:	46bd      	mov	sp, r7
 8004278:	bd80      	pop	{r7, pc}

0800427a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800427a:	b580      	push	{r7, lr}
 800427c:	b084      	sub	sp, #16
 800427e:	af00      	add	r7, sp, #0
 8004280:	60f8      	str	r0, [r7, #12]
 8004282:	60b9      	str	r1, [r7, #8]
 8004284:	4613      	mov	r3, r2
 8004286:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800428e:	b2db      	uxtb	r3, r3
 8004290:	2b20      	cmp	r3, #32
 8004292:	d112      	bne.n	80042ba <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8004294:	68bb      	ldr	r3, [r7, #8]
 8004296:	2b00      	cmp	r3, #0
 8004298:	d002      	beq.n	80042a0 <HAL_UART_Receive_IT+0x26>
 800429a:	88fb      	ldrh	r3, [r7, #6]
 800429c:	2b00      	cmp	r3, #0
 800429e:	d101      	bne.n	80042a4 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80042a0:	2301      	movs	r3, #1
 80042a2:	e00b      	b.n	80042bc <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	2200      	movs	r2, #0
 80042a8:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80042aa:	88fb      	ldrh	r3, [r7, #6]
 80042ac:	461a      	mov	r2, r3
 80042ae:	68b9      	ldr	r1, [r7, #8]
 80042b0:	68f8      	ldr	r0, [r7, #12]
 80042b2:	f000 fb24 	bl	80048fe <UART_Start_Receive_IT>
 80042b6:	4603      	mov	r3, r0
 80042b8:	e000      	b.n	80042bc <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 80042ba:	2302      	movs	r3, #2
  }
}
 80042bc:	4618      	mov	r0, r3
 80042be:	3710      	adds	r7, #16
 80042c0:	46bd      	mov	sp, r7
 80042c2:	bd80      	pop	{r7, pc}

080042c4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80042c4:	b580      	push	{r7, lr}
 80042c6:	b0ba      	sub	sp, #232	; 0xe8
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	68db      	ldr	r3, [r3, #12]
 80042dc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	695b      	ldr	r3, [r3, #20]
 80042e6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80042ea:	2300      	movs	r3, #0
 80042ec:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80042f0:	2300      	movs	r3, #0
 80042f2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80042f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80042fa:	f003 030f 	and.w	r3, r3, #15
 80042fe:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8004302:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004306:	2b00      	cmp	r3, #0
 8004308:	d10f      	bne.n	800432a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800430a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800430e:	f003 0320 	and.w	r3, r3, #32
 8004312:	2b00      	cmp	r3, #0
 8004314:	d009      	beq.n	800432a <HAL_UART_IRQHandler+0x66>
 8004316:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800431a:	f003 0320 	and.w	r3, r3, #32
 800431e:	2b00      	cmp	r3, #0
 8004320:	d003      	beq.n	800432a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004322:	6878      	ldr	r0, [r7, #4]
 8004324:	f000 fc01 	bl	8004b2a <UART_Receive_IT>
      return;
 8004328:	e25b      	b.n	80047e2 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800432a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800432e:	2b00      	cmp	r3, #0
 8004330:	f000 80de 	beq.w	80044f0 <HAL_UART_IRQHandler+0x22c>
 8004334:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004338:	f003 0301 	and.w	r3, r3, #1
 800433c:	2b00      	cmp	r3, #0
 800433e:	d106      	bne.n	800434e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004340:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004344:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004348:	2b00      	cmp	r3, #0
 800434a:	f000 80d1 	beq.w	80044f0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800434e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004352:	f003 0301 	and.w	r3, r3, #1
 8004356:	2b00      	cmp	r3, #0
 8004358:	d00b      	beq.n	8004372 <HAL_UART_IRQHandler+0xae>
 800435a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800435e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004362:	2b00      	cmp	r3, #0
 8004364:	d005      	beq.n	8004372 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800436a:	f043 0201 	orr.w	r2, r3, #1
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004372:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004376:	f003 0304 	and.w	r3, r3, #4
 800437a:	2b00      	cmp	r3, #0
 800437c:	d00b      	beq.n	8004396 <HAL_UART_IRQHandler+0xd2>
 800437e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004382:	f003 0301 	and.w	r3, r3, #1
 8004386:	2b00      	cmp	r3, #0
 8004388:	d005      	beq.n	8004396 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800438e:	f043 0202 	orr.w	r2, r3, #2
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004396:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800439a:	f003 0302 	and.w	r3, r3, #2
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d00b      	beq.n	80043ba <HAL_UART_IRQHandler+0xf6>
 80043a2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80043a6:	f003 0301 	and.w	r3, r3, #1
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d005      	beq.n	80043ba <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043b2:	f043 0204 	orr.w	r2, r3, #4
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80043ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80043be:	f003 0308 	and.w	r3, r3, #8
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d011      	beq.n	80043ea <HAL_UART_IRQHandler+0x126>
 80043c6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80043ca:	f003 0320 	and.w	r3, r3, #32
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d105      	bne.n	80043de <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80043d2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80043d6:	f003 0301 	and.w	r3, r3, #1
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d005      	beq.n	80043ea <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043e2:	f043 0208 	orr.w	r2, r3, #8
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	f000 81f2 	beq.w	80047d8 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80043f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80043f8:	f003 0320 	and.w	r3, r3, #32
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d008      	beq.n	8004412 <HAL_UART_IRQHandler+0x14e>
 8004400:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004404:	f003 0320 	and.w	r3, r3, #32
 8004408:	2b00      	cmp	r3, #0
 800440a:	d002      	beq.n	8004412 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800440c:	6878      	ldr	r0, [r7, #4]
 800440e:	f000 fb8c 	bl	8004b2a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	695b      	ldr	r3, [r3, #20]
 8004418:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800441c:	2b00      	cmp	r3, #0
 800441e:	bf14      	ite	ne
 8004420:	2301      	movne	r3, #1
 8004422:	2300      	moveq	r3, #0
 8004424:	b2db      	uxtb	r3, r3
 8004426:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800442e:	f003 0308 	and.w	r3, r3, #8
 8004432:	2b00      	cmp	r3, #0
 8004434:	d103      	bne.n	800443e <HAL_UART_IRQHandler+0x17a>
 8004436:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800443a:	2b00      	cmp	r3, #0
 800443c:	d04f      	beq.n	80044de <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800443e:	6878      	ldr	r0, [r7, #4]
 8004440:	f000 fa96 	bl	8004970 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	695b      	ldr	r3, [r3, #20]
 800444a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800444e:	2b00      	cmp	r3, #0
 8004450:	d041      	beq.n	80044d6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	3314      	adds	r3, #20
 8004458:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800445c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004460:	e853 3f00 	ldrex	r3, [r3]
 8004464:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004468:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800446c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004470:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	3314      	adds	r3, #20
 800447a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800447e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004482:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004486:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800448a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800448e:	e841 2300 	strex	r3, r2, [r1]
 8004492:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004496:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800449a:	2b00      	cmp	r3, #0
 800449c:	d1d9      	bne.n	8004452 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d013      	beq.n	80044ce <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044aa:	4a7e      	ldr	r2, [pc, #504]	; (80046a4 <HAL_UART_IRQHandler+0x3e0>)
 80044ac:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044b2:	4618      	mov	r0, r3
 80044b4:	f7fd fc6a 	bl	8001d8c <HAL_DMA_Abort_IT>
 80044b8:	4603      	mov	r3, r0
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d016      	beq.n	80044ec <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044c4:	687a      	ldr	r2, [r7, #4]
 80044c6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80044c8:	4610      	mov	r0, r2
 80044ca:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80044cc:	e00e      	b.n	80044ec <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80044ce:	6878      	ldr	r0, [r7, #4]
 80044d0:	f000 f993 	bl	80047fa <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80044d4:	e00a      	b.n	80044ec <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80044d6:	6878      	ldr	r0, [r7, #4]
 80044d8:	f000 f98f 	bl	80047fa <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80044dc:	e006      	b.n	80044ec <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80044de:	6878      	ldr	r0, [r7, #4]
 80044e0:	f000 f98b 	bl	80047fa <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	2200      	movs	r2, #0
 80044e8:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 80044ea:	e175      	b.n	80047d8 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80044ec:	bf00      	nop
    return;
 80044ee:	e173      	b.n	80047d8 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044f4:	2b01      	cmp	r3, #1
 80044f6:	f040 814f 	bne.w	8004798 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80044fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80044fe:	f003 0310 	and.w	r3, r3, #16
 8004502:	2b00      	cmp	r3, #0
 8004504:	f000 8148 	beq.w	8004798 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004508:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800450c:	f003 0310 	and.w	r3, r3, #16
 8004510:	2b00      	cmp	r3, #0
 8004512:	f000 8141 	beq.w	8004798 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004516:	2300      	movs	r3, #0
 8004518:	60bb      	str	r3, [r7, #8]
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	60bb      	str	r3, [r7, #8]
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	685b      	ldr	r3, [r3, #4]
 8004528:	60bb      	str	r3, [r7, #8]
 800452a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	695b      	ldr	r3, [r3, #20]
 8004532:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004536:	2b00      	cmp	r3, #0
 8004538:	f000 80b6 	beq.w	80046a8 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	685b      	ldr	r3, [r3, #4]
 8004544:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004548:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800454c:	2b00      	cmp	r3, #0
 800454e:	f000 8145 	beq.w	80047dc <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004556:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800455a:	429a      	cmp	r2, r3
 800455c:	f080 813e 	bcs.w	80047dc <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004566:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800456c:	699b      	ldr	r3, [r3, #24]
 800456e:	2b20      	cmp	r3, #32
 8004570:	f000 8088 	beq.w	8004684 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	330c      	adds	r3, #12
 800457a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800457e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004582:	e853 3f00 	ldrex	r3, [r3]
 8004586:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800458a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800458e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004592:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	330c      	adds	r3, #12
 800459c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80045a0:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80045a4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045a8:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80045ac:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80045b0:	e841 2300 	strex	r3, r2, [r1]
 80045b4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80045b8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d1d9      	bne.n	8004574 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	3314      	adds	r3, #20
 80045c6:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045c8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80045ca:	e853 3f00 	ldrex	r3, [r3]
 80045ce:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80045d0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80045d2:	f023 0301 	bic.w	r3, r3, #1
 80045d6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	3314      	adds	r3, #20
 80045e0:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80045e4:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80045e8:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045ea:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80045ec:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80045f0:	e841 2300 	strex	r3, r2, [r1]
 80045f4:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80045f6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d1e1      	bne.n	80045c0 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	3314      	adds	r3, #20
 8004602:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004604:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004606:	e853 3f00 	ldrex	r3, [r3]
 800460a:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800460c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800460e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004612:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	3314      	adds	r3, #20
 800461c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004620:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004622:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004624:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004626:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004628:	e841 2300 	strex	r3, r2, [r1]
 800462c:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800462e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004630:	2b00      	cmp	r3, #0
 8004632:	d1e3      	bne.n	80045fc <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	2220      	movs	r2, #32
 8004638:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	2200      	movs	r2, #0
 8004640:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	330c      	adds	r3, #12
 8004648:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800464a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800464c:	e853 3f00 	ldrex	r3, [r3]
 8004650:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004652:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004654:	f023 0310 	bic.w	r3, r3, #16
 8004658:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	330c      	adds	r3, #12
 8004662:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004666:	65ba      	str	r2, [r7, #88]	; 0x58
 8004668:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800466a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800466c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800466e:	e841 2300 	strex	r3, r2, [r1]
 8004672:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004674:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004676:	2b00      	cmp	r3, #0
 8004678:	d1e3      	bne.n	8004642 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800467e:	4618      	mov	r0, r3
 8004680:	f7fd fb49 	bl	8001d16 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	2202      	movs	r2, #2
 8004688:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004692:	b29b      	uxth	r3, r3
 8004694:	1ad3      	subs	r3, r2, r3
 8004696:	b29b      	uxth	r3, r3
 8004698:	4619      	mov	r1, r3
 800469a:	6878      	ldr	r0, [r7, #4]
 800469c:	f000 f8b6 	bl	800480c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80046a0:	e09c      	b.n	80047dc <HAL_UART_IRQHandler+0x518>
 80046a2:	bf00      	nop
 80046a4:	08004a35 	.word	0x08004a35
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80046b0:	b29b      	uxth	r3, r3
 80046b2:	1ad3      	subs	r3, r2, r3
 80046b4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80046bc:	b29b      	uxth	r3, r3
 80046be:	2b00      	cmp	r3, #0
 80046c0:	f000 808e 	beq.w	80047e0 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80046c4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	f000 8089 	beq.w	80047e0 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	330c      	adds	r3, #12
 80046d4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046d8:	e853 3f00 	ldrex	r3, [r3]
 80046dc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80046de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80046e0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80046e4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	330c      	adds	r3, #12
 80046ee:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80046f2:	647a      	str	r2, [r7, #68]	; 0x44
 80046f4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046f6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80046f8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80046fa:	e841 2300 	strex	r3, r2, [r1]
 80046fe:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004700:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004702:	2b00      	cmp	r3, #0
 8004704:	d1e3      	bne.n	80046ce <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	3314      	adds	r3, #20
 800470c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800470e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004710:	e853 3f00 	ldrex	r3, [r3]
 8004714:	623b      	str	r3, [r7, #32]
   return(result);
 8004716:	6a3b      	ldr	r3, [r7, #32]
 8004718:	f023 0301 	bic.w	r3, r3, #1
 800471c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	3314      	adds	r3, #20
 8004726:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800472a:	633a      	str	r2, [r7, #48]	; 0x30
 800472c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800472e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004730:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004732:	e841 2300 	strex	r3, r2, [r1]
 8004736:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004738:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800473a:	2b00      	cmp	r3, #0
 800473c:	d1e3      	bne.n	8004706 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	2220      	movs	r2, #32
 8004742:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	2200      	movs	r2, #0
 800474a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	330c      	adds	r3, #12
 8004752:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004754:	693b      	ldr	r3, [r7, #16]
 8004756:	e853 3f00 	ldrex	r3, [r3]
 800475a:	60fb      	str	r3, [r7, #12]
   return(result);
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	f023 0310 	bic.w	r3, r3, #16
 8004762:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	330c      	adds	r3, #12
 800476c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004770:	61fa      	str	r2, [r7, #28]
 8004772:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004774:	69b9      	ldr	r1, [r7, #24]
 8004776:	69fa      	ldr	r2, [r7, #28]
 8004778:	e841 2300 	strex	r3, r2, [r1]
 800477c:	617b      	str	r3, [r7, #20]
   return(result);
 800477e:	697b      	ldr	r3, [r7, #20]
 8004780:	2b00      	cmp	r3, #0
 8004782:	d1e3      	bne.n	800474c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	2202      	movs	r2, #2
 8004788:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800478a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800478e:	4619      	mov	r1, r3
 8004790:	6878      	ldr	r0, [r7, #4]
 8004792:	f000 f83b 	bl	800480c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004796:	e023      	b.n	80047e0 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004798:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800479c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d009      	beq.n	80047b8 <HAL_UART_IRQHandler+0x4f4>
 80047a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80047a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d003      	beq.n	80047b8 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80047b0:	6878      	ldr	r0, [r7, #4]
 80047b2:	f000 f953 	bl	8004a5c <UART_Transmit_IT>
    return;
 80047b6:	e014      	b.n	80047e2 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80047b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80047bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d00e      	beq.n	80047e2 <HAL_UART_IRQHandler+0x51e>
 80047c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80047c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d008      	beq.n	80047e2 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80047d0:	6878      	ldr	r0, [r7, #4]
 80047d2:	f000 f992 	bl	8004afa <UART_EndTransmit_IT>
    return;
 80047d6:	e004      	b.n	80047e2 <HAL_UART_IRQHandler+0x51e>
    return;
 80047d8:	bf00      	nop
 80047da:	e002      	b.n	80047e2 <HAL_UART_IRQHandler+0x51e>
      return;
 80047dc:	bf00      	nop
 80047de:	e000      	b.n	80047e2 <HAL_UART_IRQHandler+0x51e>
      return;
 80047e0:	bf00      	nop
  }
}
 80047e2:	37e8      	adds	r7, #232	; 0xe8
 80047e4:	46bd      	mov	sp, r7
 80047e6:	bd80      	pop	{r7, pc}

080047e8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80047e8:	b480      	push	{r7}
 80047ea:	b083      	sub	sp, #12
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80047f0:	bf00      	nop
 80047f2:	370c      	adds	r7, #12
 80047f4:	46bd      	mov	sp, r7
 80047f6:	bc80      	pop	{r7}
 80047f8:	4770      	bx	lr

080047fa <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80047fa:	b480      	push	{r7}
 80047fc:	b083      	sub	sp, #12
 80047fe:	af00      	add	r7, sp, #0
 8004800:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004802:	bf00      	nop
 8004804:	370c      	adds	r7, #12
 8004806:	46bd      	mov	sp, r7
 8004808:	bc80      	pop	{r7}
 800480a:	4770      	bx	lr

0800480c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800480c:	b480      	push	{r7}
 800480e:	b083      	sub	sp, #12
 8004810:	af00      	add	r7, sp, #0
 8004812:	6078      	str	r0, [r7, #4]
 8004814:	460b      	mov	r3, r1
 8004816:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004818:	bf00      	nop
 800481a:	370c      	adds	r7, #12
 800481c:	46bd      	mov	sp, r7
 800481e:	bc80      	pop	{r7}
 8004820:	4770      	bx	lr

08004822 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004822:	b580      	push	{r7, lr}
 8004824:	b090      	sub	sp, #64	; 0x40
 8004826:	af00      	add	r7, sp, #0
 8004828:	60f8      	str	r0, [r7, #12]
 800482a:	60b9      	str	r1, [r7, #8]
 800482c:	603b      	str	r3, [r7, #0]
 800482e:	4613      	mov	r3, r2
 8004830:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004832:	e050      	b.n	80048d6 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004834:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004836:	f1b3 3fff 	cmp.w	r3, #4294967295
 800483a:	d04c      	beq.n	80048d6 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800483c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800483e:	2b00      	cmp	r3, #0
 8004840:	d007      	beq.n	8004852 <UART_WaitOnFlagUntilTimeout+0x30>
 8004842:	f7fd f97f 	bl	8001b44 <HAL_GetTick>
 8004846:	4602      	mov	r2, r0
 8004848:	683b      	ldr	r3, [r7, #0]
 800484a:	1ad3      	subs	r3, r2, r3
 800484c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800484e:	429a      	cmp	r2, r3
 8004850:	d241      	bcs.n	80048d6 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	330c      	adds	r3, #12
 8004858:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800485a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800485c:	e853 3f00 	ldrex	r3, [r3]
 8004860:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004864:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004868:	63fb      	str	r3, [r7, #60]	; 0x3c
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	330c      	adds	r3, #12
 8004870:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004872:	637a      	str	r2, [r7, #52]	; 0x34
 8004874:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004876:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004878:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800487a:	e841 2300 	strex	r3, r2, [r1]
 800487e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004880:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004882:	2b00      	cmp	r3, #0
 8004884:	d1e5      	bne.n	8004852 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	3314      	adds	r3, #20
 800488c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800488e:	697b      	ldr	r3, [r7, #20]
 8004890:	e853 3f00 	ldrex	r3, [r3]
 8004894:	613b      	str	r3, [r7, #16]
   return(result);
 8004896:	693b      	ldr	r3, [r7, #16]
 8004898:	f023 0301 	bic.w	r3, r3, #1
 800489c:	63bb      	str	r3, [r7, #56]	; 0x38
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	3314      	adds	r3, #20
 80048a4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80048a6:	623a      	str	r2, [r7, #32]
 80048a8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048aa:	69f9      	ldr	r1, [r7, #28]
 80048ac:	6a3a      	ldr	r2, [r7, #32]
 80048ae:	e841 2300 	strex	r3, r2, [r1]
 80048b2:	61bb      	str	r3, [r7, #24]
   return(result);
 80048b4:	69bb      	ldr	r3, [r7, #24]
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d1e5      	bne.n	8004886 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	2220      	movs	r2, #32
 80048be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	2220      	movs	r2, #32
 80048c6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	2200      	movs	r2, #0
 80048ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 80048d2:	2303      	movs	r3, #3
 80048d4:	e00f      	b.n	80048f6 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	681a      	ldr	r2, [r3, #0]
 80048dc:	68bb      	ldr	r3, [r7, #8]
 80048de:	4013      	ands	r3, r2
 80048e0:	68ba      	ldr	r2, [r7, #8]
 80048e2:	429a      	cmp	r2, r3
 80048e4:	bf0c      	ite	eq
 80048e6:	2301      	moveq	r3, #1
 80048e8:	2300      	movne	r3, #0
 80048ea:	b2db      	uxtb	r3, r3
 80048ec:	461a      	mov	r2, r3
 80048ee:	79fb      	ldrb	r3, [r7, #7]
 80048f0:	429a      	cmp	r2, r3
 80048f2:	d09f      	beq.n	8004834 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80048f4:	2300      	movs	r3, #0
}
 80048f6:	4618      	mov	r0, r3
 80048f8:	3740      	adds	r7, #64	; 0x40
 80048fa:	46bd      	mov	sp, r7
 80048fc:	bd80      	pop	{r7, pc}

080048fe <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80048fe:	b480      	push	{r7}
 8004900:	b085      	sub	sp, #20
 8004902:	af00      	add	r7, sp, #0
 8004904:	60f8      	str	r0, [r7, #12]
 8004906:	60b9      	str	r1, [r7, #8]
 8004908:	4613      	mov	r3, r2
 800490a:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	68ba      	ldr	r2, [r7, #8]
 8004910:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	88fa      	ldrh	r2, [r7, #6]
 8004916:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	88fa      	ldrh	r2, [r7, #6]
 800491c:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	2200      	movs	r2, #0
 8004922:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	2222      	movs	r2, #34	; 0x22
 8004928:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	691b      	ldr	r3, [r3, #16]
 8004930:	2b00      	cmp	r3, #0
 8004932:	d007      	beq.n	8004944 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	68da      	ldr	r2, [r3, #12]
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004942:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	695a      	ldr	r2, [r3, #20]
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	f042 0201 	orr.w	r2, r2, #1
 8004952:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	68da      	ldr	r2, [r3, #12]
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	f042 0220 	orr.w	r2, r2, #32
 8004962:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004964:	2300      	movs	r3, #0
}
 8004966:	4618      	mov	r0, r3
 8004968:	3714      	adds	r7, #20
 800496a:	46bd      	mov	sp, r7
 800496c:	bc80      	pop	{r7}
 800496e:	4770      	bx	lr

08004970 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004970:	b480      	push	{r7}
 8004972:	b095      	sub	sp, #84	; 0x54
 8004974:	af00      	add	r7, sp, #0
 8004976:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	330c      	adds	r3, #12
 800497e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004980:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004982:	e853 3f00 	ldrex	r3, [r3]
 8004986:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004988:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800498a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800498e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	330c      	adds	r3, #12
 8004996:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004998:	643a      	str	r2, [r7, #64]	; 0x40
 800499a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800499c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800499e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80049a0:	e841 2300 	strex	r3, r2, [r1]
 80049a4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80049a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d1e5      	bne.n	8004978 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	3314      	adds	r3, #20
 80049b2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049b4:	6a3b      	ldr	r3, [r7, #32]
 80049b6:	e853 3f00 	ldrex	r3, [r3]
 80049ba:	61fb      	str	r3, [r7, #28]
   return(result);
 80049bc:	69fb      	ldr	r3, [r7, #28]
 80049be:	f023 0301 	bic.w	r3, r3, #1
 80049c2:	64bb      	str	r3, [r7, #72]	; 0x48
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	3314      	adds	r3, #20
 80049ca:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80049cc:	62fa      	str	r2, [r7, #44]	; 0x2c
 80049ce:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049d0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80049d2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80049d4:	e841 2300 	strex	r3, r2, [r1]
 80049d8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80049da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d1e5      	bne.n	80049ac <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049e4:	2b01      	cmp	r3, #1
 80049e6:	d119      	bne.n	8004a1c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	330c      	adds	r3, #12
 80049ee:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	e853 3f00 	ldrex	r3, [r3]
 80049f6:	60bb      	str	r3, [r7, #8]
   return(result);
 80049f8:	68bb      	ldr	r3, [r7, #8]
 80049fa:	f023 0310 	bic.w	r3, r3, #16
 80049fe:	647b      	str	r3, [r7, #68]	; 0x44
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	330c      	adds	r3, #12
 8004a06:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004a08:	61ba      	str	r2, [r7, #24]
 8004a0a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a0c:	6979      	ldr	r1, [r7, #20]
 8004a0e:	69ba      	ldr	r2, [r7, #24]
 8004a10:	e841 2300 	strex	r3, r2, [r1]
 8004a14:	613b      	str	r3, [r7, #16]
   return(result);
 8004a16:	693b      	ldr	r3, [r7, #16]
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d1e5      	bne.n	80049e8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	2220      	movs	r2, #32
 8004a20:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	2200      	movs	r2, #0
 8004a28:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004a2a:	bf00      	nop
 8004a2c:	3754      	adds	r7, #84	; 0x54
 8004a2e:	46bd      	mov	sp, r7
 8004a30:	bc80      	pop	{r7}
 8004a32:	4770      	bx	lr

08004a34 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004a34:	b580      	push	{r7, lr}
 8004a36:	b084      	sub	sp, #16
 8004a38:	af00      	add	r7, sp, #0
 8004a3a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a40:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	2200      	movs	r2, #0
 8004a46:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	2200      	movs	r2, #0
 8004a4c:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004a4e:	68f8      	ldr	r0, [r7, #12]
 8004a50:	f7ff fed3 	bl	80047fa <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004a54:	bf00      	nop
 8004a56:	3710      	adds	r7, #16
 8004a58:	46bd      	mov	sp, r7
 8004a5a:	bd80      	pop	{r7, pc}

08004a5c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004a5c:	b480      	push	{r7}
 8004a5e:	b085      	sub	sp, #20
 8004a60:	af00      	add	r7, sp, #0
 8004a62:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004a6a:	b2db      	uxtb	r3, r3
 8004a6c:	2b21      	cmp	r3, #33	; 0x21
 8004a6e:	d13e      	bne.n	8004aee <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	689b      	ldr	r3, [r3, #8]
 8004a74:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a78:	d114      	bne.n	8004aa4 <UART_Transmit_IT+0x48>
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	691b      	ldr	r3, [r3, #16]
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d110      	bne.n	8004aa4 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	6a1b      	ldr	r3, [r3, #32]
 8004a86:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	881b      	ldrh	r3, [r3, #0]
 8004a8c:	461a      	mov	r2, r3
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004a96:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	6a1b      	ldr	r3, [r3, #32]
 8004a9c:	1c9a      	adds	r2, r3, #2
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	621a      	str	r2, [r3, #32]
 8004aa2:	e008      	b.n	8004ab6 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	6a1b      	ldr	r3, [r3, #32]
 8004aa8:	1c59      	adds	r1, r3, #1
 8004aaa:	687a      	ldr	r2, [r7, #4]
 8004aac:	6211      	str	r1, [r2, #32]
 8004aae:	781a      	ldrb	r2, [r3, #0]
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004aba:	b29b      	uxth	r3, r3
 8004abc:	3b01      	subs	r3, #1
 8004abe:	b29b      	uxth	r3, r3
 8004ac0:	687a      	ldr	r2, [r7, #4]
 8004ac2:	4619      	mov	r1, r3
 8004ac4:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d10f      	bne.n	8004aea <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	68da      	ldr	r2, [r3, #12]
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004ad8:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	68da      	ldr	r2, [r3, #12]
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004ae8:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004aea:	2300      	movs	r3, #0
 8004aec:	e000      	b.n	8004af0 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004aee:	2302      	movs	r3, #2
  }
}
 8004af0:	4618      	mov	r0, r3
 8004af2:	3714      	adds	r7, #20
 8004af4:	46bd      	mov	sp, r7
 8004af6:	bc80      	pop	{r7}
 8004af8:	4770      	bx	lr

08004afa <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004afa:	b580      	push	{r7, lr}
 8004afc:	b082      	sub	sp, #8
 8004afe:	af00      	add	r7, sp, #0
 8004b00:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	68da      	ldr	r2, [r3, #12]
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004b10:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	2220      	movs	r2, #32
 8004b16:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004b1a:	6878      	ldr	r0, [r7, #4]
 8004b1c:	f7ff fe64 	bl	80047e8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004b20:	2300      	movs	r3, #0
}
 8004b22:	4618      	mov	r0, r3
 8004b24:	3708      	adds	r7, #8
 8004b26:	46bd      	mov	sp, r7
 8004b28:	bd80      	pop	{r7, pc}

08004b2a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004b2a:	b580      	push	{r7, lr}
 8004b2c:	b08c      	sub	sp, #48	; 0x30
 8004b2e:	af00      	add	r7, sp, #0
 8004b30:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004b38:	b2db      	uxtb	r3, r3
 8004b3a:	2b22      	cmp	r3, #34	; 0x22
 8004b3c:	f040 80ae 	bne.w	8004c9c <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	689b      	ldr	r3, [r3, #8]
 8004b44:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b48:	d117      	bne.n	8004b7a <UART_Receive_IT+0x50>
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	691b      	ldr	r3, [r3, #16]
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d113      	bne.n	8004b7a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004b52:	2300      	movs	r3, #0
 8004b54:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b5a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	685b      	ldr	r3, [r3, #4]
 8004b62:	b29b      	uxth	r3, r3
 8004b64:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b68:	b29a      	uxth	r2, r3
 8004b6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b6c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b72:	1c9a      	adds	r2, r3, #2
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	629a      	str	r2, [r3, #40]	; 0x28
 8004b78:	e026      	b.n	8004bc8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b7e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8004b80:	2300      	movs	r3, #0
 8004b82:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	689b      	ldr	r3, [r3, #8]
 8004b88:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b8c:	d007      	beq.n	8004b9e <UART_Receive_IT+0x74>
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	689b      	ldr	r3, [r3, #8]
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d10a      	bne.n	8004bac <UART_Receive_IT+0x82>
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	691b      	ldr	r3, [r3, #16]
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d106      	bne.n	8004bac <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	685b      	ldr	r3, [r3, #4]
 8004ba4:	b2da      	uxtb	r2, r3
 8004ba6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ba8:	701a      	strb	r2, [r3, #0]
 8004baa:	e008      	b.n	8004bbe <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	685b      	ldr	r3, [r3, #4]
 8004bb2:	b2db      	uxtb	r3, r3
 8004bb4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004bb8:	b2da      	uxtb	r2, r3
 8004bba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bbc:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bc2:	1c5a      	adds	r2, r3, #1
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004bcc:	b29b      	uxth	r3, r3
 8004bce:	3b01      	subs	r3, #1
 8004bd0:	b29b      	uxth	r3, r3
 8004bd2:	687a      	ldr	r2, [r7, #4]
 8004bd4:	4619      	mov	r1, r3
 8004bd6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d15d      	bne.n	8004c98 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	68da      	ldr	r2, [r3, #12]
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	f022 0220 	bic.w	r2, r2, #32
 8004bea:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	68da      	ldr	r2, [r3, #12]
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004bfa:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	695a      	ldr	r2, [r3, #20]
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	f022 0201 	bic.w	r2, r2, #1
 8004c0a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	2220      	movs	r2, #32
 8004c10:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	2200      	movs	r2, #0
 8004c18:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c1e:	2b01      	cmp	r3, #1
 8004c20:	d135      	bne.n	8004c8e <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	2200      	movs	r2, #0
 8004c26:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	330c      	adds	r3, #12
 8004c2e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c30:	697b      	ldr	r3, [r7, #20]
 8004c32:	e853 3f00 	ldrex	r3, [r3]
 8004c36:	613b      	str	r3, [r7, #16]
   return(result);
 8004c38:	693b      	ldr	r3, [r7, #16]
 8004c3a:	f023 0310 	bic.w	r3, r3, #16
 8004c3e:	627b      	str	r3, [r7, #36]	; 0x24
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	330c      	adds	r3, #12
 8004c46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c48:	623a      	str	r2, [r7, #32]
 8004c4a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c4c:	69f9      	ldr	r1, [r7, #28]
 8004c4e:	6a3a      	ldr	r2, [r7, #32]
 8004c50:	e841 2300 	strex	r3, r2, [r1]
 8004c54:	61bb      	str	r3, [r7, #24]
   return(result);
 8004c56:	69bb      	ldr	r3, [r7, #24]
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d1e5      	bne.n	8004c28 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	f003 0310 	and.w	r3, r3, #16
 8004c66:	2b10      	cmp	r3, #16
 8004c68:	d10a      	bne.n	8004c80 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004c6a:	2300      	movs	r3, #0
 8004c6c:	60fb      	str	r3, [r7, #12]
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	60fb      	str	r3, [r7, #12]
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	685b      	ldr	r3, [r3, #4]
 8004c7c:	60fb      	str	r3, [r7, #12]
 8004c7e:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004c84:	4619      	mov	r1, r3
 8004c86:	6878      	ldr	r0, [r7, #4]
 8004c88:	f7ff fdc0 	bl	800480c <HAL_UARTEx_RxEventCallback>
 8004c8c:	e002      	b.n	8004c94 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004c8e:	6878      	ldr	r0, [r7, #4]
 8004c90:	f7fb ff6a 	bl	8000b68 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004c94:	2300      	movs	r3, #0
 8004c96:	e002      	b.n	8004c9e <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8004c98:	2300      	movs	r3, #0
 8004c9a:	e000      	b.n	8004c9e <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004c9c:	2302      	movs	r3, #2
  }
}
 8004c9e:	4618      	mov	r0, r3
 8004ca0:	3730      	adds	r7, #48	; 0x30
 8004ca2:	46bd      	mov	sp, r7
 8004ca4:	bd80      	pop	{r7, pc}
	...

08004ca8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004ca8:	b580      	push	{r7, lr}
 8004caa:	b084      	sub	sp, #16
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	691b      	ldr	r3, [r3, #16]
 8004cb6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	68da      	ldr	r2, [r3, #12]
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	430a      	orrs	r2, r1
 8004cc4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	689a      	ldr	r2, [r3, #8]
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	691b      	ldr	r3, [r3, #16]
 8004cce:	431a      	orrs	r2, r3
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	695b      	ldr	r3, [r3, #20]
 8004cd4:	4313      	orrs	r3, r2
 8004cd6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	68db      	ldr	r3, [r3, #12]
 8004cde:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8004ce2:	f023 030c 	bic.w	r3, r3, #12
 8004ce6:	687a      	ldr	r2, [r7, #4]
 8004ce8:	6812      	ldr	r2, [r2, #0]
 8004cea:	68b9      	ldr	r1, [r7, #8]
 8004cec:	430b      	orrs	r3, r1
 8004cee:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	695b      	ldr	r3, [r3, #20]
 8004cf6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	699a      	ldr	r2, [r3, #24]
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	430a      	orrs	r2, r1
 8004d04:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	4a2c      	ldr	r2, [pc, #176]	; (8004dbc <UART_SetConfig+0x114>)
 8004d0c:	4293      	cmp	r3, r2
 8004d0e:	d103      	bne.n	8004d18 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004d10:	f7fd fe2e 	bl	8002970 <HAL_RCC_GetPCLK2Freq>
 8004d14:	60f8      	str	r0, [r7, #12]
 8004d16:	e002      	b.n	8004d1e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004d18:	f7fd fe16 	bl	8002948 <HAL_RCC_GetPCLK1Freq>
 8004d1c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004d1e:	68fa      	ldr	r2, [r7, #12]
 8004d20:	4613      	mov	r3, r2
 8004d22:	009b      	lsls	r3, r3, #2
 8004d24:	4413      	add	r3, r2
 8004d26:	009a      	lsls	r2, r3, #2
 8004d28:	441a      	add	r2, r3
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	685b      	ldr	r3, [r3, #4]
 8004d2e:	009b      	lsls	r3, r3, #2
 8004d30:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d34:	4a22      	ldr	r2, [pc, #136]	; (8004dc0 <UART_SetConfig+0x118>)
 8004d36:	fba2 2303 	umull	r2, r3, r2, r3
 8004d3a:	095b      	lsrs	r3, r3, #5
 8004d3c:	0119      	lsls	r1, r3, #4
 8004d3e:	68fa      	ldr	r2, [r7, #12]
 8004d40:	4613      	mov	r3, r2
 8004d42:	009b      	lsls	r3, r3, #2
 8004d44:	4413      	add	r3, r2
 8004d46:	009a      	lsls	r2, r3, #2
 8004d48:	441a      	add	r2, r3
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	685b      	ldr	r3, [r3, #4]
 8004d4e:	009b      	lsls	r3, r3, #2
 8004d50:	fbb2 f2f3 	udiv	r2, r2, r3
 8004d54:	4b1a      	ldr	r3, [pc, #104]	; (8004dc0 <UART_SetConfig+0x118>)
 8004d56:	fba3 0302 	umull	r0, r3, r3, r2
 8004d5a:	095b      	lsrs	r3, r3, #5
 8004d5c:	2064      	movs	r0, #100	; 0x64
 8004d5e:	fb00 f303 	mul.w	r3, r0, r3
 8004d62:	1ad3      	subs	r3, r2, r3
 8004d64:	011b      	lsls	r3, r3, #4
 8004d66:	3332      	adds	r3, #50	; 0x32
 8004d68:	4a15      	ldr	r2, [pc, #84]	; (8004dc0 <UART_SetConfig+0x118>)
 8004d6a:	fba2 2303 	umull	r2, r3, r2, r3
 8004d6e:	095b      	lsrs	r3, r3, #5
 8004d70:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004d74:	4419      	add	r1, r3
 8004d76:	68fa      	ldr	r2, [r7, #12]
 8004d78:	4613      	mov	r3, r2
 8004d7a:	009b      	lsls	r3, r3, #2
 8004d7c:	4413      	add	r3, r2
 8004d7e:	009a      	lsls	r2, r3, #2
 8004d80:	441a      	add	r2, r3
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	685b      	ldr	r3, [r3, #4]
 8004d86:	009b      	lsls	r3, r3, #2
 8004d88:	fbb2 f2f3 	udiv	r2, r2, r3
 8004d8c:	4b0c      	ldr	r3, [pc, #48]	; (8004dc0 <UART_SetConfig+0x118>)
 8004d8e:	fba3 0302 	umull	r0, r3, r3, r2
 8004d92:	095b      	lsrs	r3, r3, #5
 8004d94:	2064      	movs	r0, #100	; 0x64
 8004d96:	fb00 f303 	mul.w	r3, r0, r3
 8004d9a:	1ad3      	subs	r3, r2, r3
 8004d9c:	011b      	lsls	r3, r3, #4
 8004d9e:	3332      	adds	r3, #50	; 0x32
 8004da0:	4a07      	ldr	r2, [pc, #28]	; (8004dc0 <UART_SetConfig+0x118>)
 8004da2:	fba2 2303 	umull	r2, r3, r2, r3
 8004da6:	095b      	lsrs	r3, r3, #5
 8004da8:	f003 020f 	and.w	r2, r3, #15
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	440a      	add	r2, r1
 8004db2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004db4:	bf00      	nop
 8004db6:	3710      	adds	r7, #16
 8004db8:	46bd      	mov	sp, r7
 8004dba:	bd80      	pop	{r7, pc}
 8004dbc:	40013800 	.word	0x40013800
 8004dc0:	51eb851f 	.word	0x51eb851f

08004dc4 <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 8004dc4:	b580      	push	{r7, lr}
 8004dc6:	b082      	sub	sp, #8
 8004dc8:	af00      	add	r7, sp, #0
	EventGroup_t *pxEventBits;

		/* Allocate the event group. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) );
 8004dca:	201c      	movs	r0, #28
 8004dcc:	f001 fa10 	bl	80061f0 <pvPortMalloc>
 8004dd0:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d00a      	beq.n	8004dee <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	2200      	movs	r2, #0
 8004ddc:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	3304      	adds	r3, #4
 8004de2:	4618      	mov	r0, r3
 8004de4:	f000 f982 	bl	80050ec <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	2200      	movs	r2, #0
 8004dec:	761a      	strb	r2, [r3, #24]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return ( EventGroupHandle_t ) pxEventBits;
 8004dee:	687b      	ldr	r3, [r7, #4]
	}
 8004df0:	4618      	mov	r0, r3
 8004df2:	3708      	adds	r7, #8
 8004df4:	46bd      	mov	sp, r7
 8004df6:	bd80      	pop	{r7, pc}

08004df8 <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 8004df8:	b580      	push	{r7, lr}
 8004dfa:	b090      	sub	sp, #64	; 0x40
 8004dfc:	af00      	add	r7, sp, #0
 8004dfe:	60f8      	str	r0, [r7, #12]
 8004e00:	60b9      	str	r1, [r7, #8]
 8004e02:	607a      	str	r2, [r7, #4]
 8004e04:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	637b      	str	r3, [r7, #52]	; 0x34
EventBits_t uxReturn, uxControlBits = 0;
 8004e0a:	2300      	movs	r3, #0
 8004e0c:	63bb      	str	r3, [r7, #56]	; 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 8004e0e:	2300      	movs	r3, #0
 8004e10:	633b      	str	r3, [r7, #48]	; 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d10a      	bne.n	8004e2e <xEventGroupWaitBits+0x36>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004e18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e1c:	f383 8811 	msr	BASEPRI, r3
 8004e20:	f3bf 8f6f 	isb	sy
 8004e24:	f3bf 8f4f 	dsb	sy
 8004e28:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004e2a:	bf00      	nop
 8004e2c:	e7fe      	b.n	8004e2c <xEventGroupWaitBits+0x34>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8004e2e:	68bb      	ldr	r3, [r7, #8]
 8004e30:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d00a      	beq.n	8004e4e <xEventGroupWaitBits+0x56>
	__asm volatile
 8004e38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e3c:	f383 8811 	msr	BASEPRI, r3
 8004e40:	f3bf 8f6f 	isb	sy
 8004e44:	f3bf 8f4f 	dsb	sy
 8004e48:	61fb      	str	r3, [r7, #28]
}
 8004e4a:	bf00      	nop
 8004e4c:	e7fe      	b.n	8004e4c <xEventGroupWaitBits+0x54>
	configASSERT( uxBitsToWaitFor != 0 );
 8004e4e:	68bb      	ldr	r3, [r7, #8]
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d10a      	bne.n	8004e6a <xEventGroupWaitBits+0x72>
	__asm volatile
 8004e54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e58:	f383 8811 	msr	BASEPRI, r3
 8004e5c:	f3bf 8f6f 	isb	sy
 8004e60:	f3bf 8f4f 	dsb	sy
 8004e64:	61bb      	str	r3, [r7, #24]
}
 8004e66:	bf00      	nop
 8004e68:	e7fe      	b.n	8004e68 <xEventGroupWaitBits+0x70>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004e6a:	f000 ff73 	bl	8005d54 <xTaskGetSchedulerState>
 8004e6e:	4603      	mov	r3, r0
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d102      	bne.n	8004e7a <xEventGroupWaitBits+0x82>
 8004e74:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d101      	bne.n	8004e7e <xEventGroupWaitBits+0x86>
 8004e7a:	2301      	movs	r3, #1
 8004e7c:	e000      	b.n	8004e80 <xEventGroupWaitBits+0x88>
 8004e7e:	2300      	movs	r3, #0
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d10a      	bne.n	8004e9a <xEventGroupWaitBits+0xa2>
	__asm volatile
 8004e84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e88:	f383 8811 	msr	BASEPRI, r3
 8004e8c:	f3bf 8f6f 	isb	sy
 8004e90:	f3bf 8f4f 	dsb	sy
 8004e94:	617b      	str	r3, [r7, #20]
}
 8004e96:	bf00      	nop
 8004e98:	e7fe      	b.n	8004e98 <xEventGroupWaitBits+0xa0>
	}
	#endif

	vTaskSuspendAll();
 8004e9a:	f000 fc15 	bl	80056c8 <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 8004e9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 8004ea4:	683a      	ldr	r2, [r7, #0]
 8004ea6:	68b9      	ldr	r1, [r7, #8]
 8004ea8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004eaa:	f000 f8fe 	bl	80050aa <prvTestWaitCondition>
 8004eae:	62b8      	str	r0, [r7, #40]	; 0x28

		if( xWaitConditionMet != pdFALSE )
 8004eb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d00e      	beq.n	8004ed4 <xEventGroupWaitBits+0xdc>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 8004eb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004eb8:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTicksToWait = ( TickType_t ) 0;
 8004eba:	2300      	movs	r3, #0
 8004ebc:	64bb      	str	r3, [r7, #72]	; 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d028      	beq.n	8004f16 <xEventGroupWaitBits+0x11e>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8004ec4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ec6:	681a      	ldr	r2, [r3, #0]
 8004ec8:	68bb      	ldr	r3, [r7, #8]
 8004eca:	43db      	mvns	r3, r3
 8004ecc:	401a      	ands	r2, r3
 8004ece:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ed0:	601a      	str	r2, [r3, #0]
 8004ed2:	e020      	b.n	8004f16 <xEventGroupWaitBits+0x11e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 8004ed4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d104      	bne.n	8004ee4 <xEventGroupWaitBits+0xec>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 8004eda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004edc:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTimeoutOccurred = pdTRUE;
 8004ede:	2301      	movs	r3, #1
 8004ee0:	633b      	str	r3, [r7, #48]	; 0x30
 8004ee2:	e018      	b.n	8004f16 <xEventGroupWaitBits+0x11e>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d003      	beq.n	8004ef2 <xEventGroupWaitBits+0xfa>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 8004eea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004eec:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004ef0:	63bb      	str	r3, [r7, #56]	; 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 8004ef2:	683b      	ldr	r3, [r7, #0]
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d003      	beq.n	8004f00 <xEventGroupWaitBits+0x108>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 8004ef8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004efa:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004efe:	63bb      	str	r3, [r7, #56]	; 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 8004f00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f02:	1d18      	adds	r0, r3, #4
 8004f04:	68ba      	ldr	r2, [r7, #8]
 8004f06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f08:	4313      	orrs	r3, r2
 8004f0a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004f0c:	4619      	mov	r1, r3
 8004f0e:	f000 fda5 	bl	8005a5c <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 8004f12:	2300      	movs	r3, #0
 8004f14:	63fb      	str	r3, [r7, #60]	; 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 8004f16:	f000 fbe5 	bl	80056e4 <xTaskResumeAll>
 8004f1a:	6278      	str	r0, [r7, #36]	; 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 8004f1c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d031      	beq.n	8004f86 <xEventGroupWaitBits+0x18e>
	{
		if( xAlreadyYielded == pdFALSE )
 8004f22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d107      	bne.n	8004f38 <xEventGroupWaitBits+0x140>
		{
			portYIELD_WITHIN_API();
 8004f28:	4b19      	ldr	r3, [pc, #100]	; (8004f90 <xEventGroupWaitBits+0x198>)
 8004f2a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004f2e:	601a      	str	r2, [r3, #0]
 8004f30:	f3bf 8f4f 	dsb	sy
 8004f34:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 8004f38:	f000 ff2a 	bl	8005d90 <uxTaskResetEventItemValue>
 8004f3c:	63f8      	str	r0, [r7, #60]	; 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 8004f3e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004f40:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d11a      	bne.n	8004f7e <xEventGroupWaitBits+0x186>
		{
			taskENTER_CRITICAL();
 8004f48:	f001 f890 	bl	800606c <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 8004f4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	63fb      	str	r3, [r7, #60]	; 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 8004f52:	683a      	ldr	r2, [r7, #0]
 8004f54:	68b9      	ldr	r1, [r7, #8]
 8004f56:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8004f58:	f000 f8a7 	bl	80050aa <prvTestWaitCondition>
 8004f5c:	4603      	mov	r3, r0
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d009      	beq.n	8004f76 <xEventGroupWaitBits+0x17e>
				{
					if( xClearOnExit != pdFALSE )
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d006      	beq.n	8004f76 <xEventGroupWaitBits+0x17e>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8004f68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f6a:	681a      	ldr	r2, [r3, #0]
 8004f6c:	68bb      	ldr	r3, [r7, #8]
 8004f6e:	43db      	mvns	r3, r3
 8004f70:	401a      	ands	r2, r3
 8004f72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f74:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 8004f76:	2301      	movs	r3, #1
 8004f78:	633b      	str	r3, [r7, #48]	; 0x30
			}
			taskEXIT_CRITICAL();
 8004f7a:	f001 f8a7 	bl	80060cc <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 8004f7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004f80:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8004f84:	63fb      	str	r3, [r7, #60]	; 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 8004f86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8004f88:	4618      	mov	r0, r3
 8004f8a:	3740      	adds	r7, #64	; 0x40
 8004f8c:	46bd      	mov	sp, r7
 8004f8e:	bd80      	pop	{r7, pc}
 8004f90:	e000ed04 	.word	0xe000ed04

08004f94 <xEventGroupSetBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 8004f94:	b580      	push	{r7, lr}
 8004f96:	b08e      	sub	sp, #56	; 0x38
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	6078      	str	r0, [r7, #4]
 8004f9c:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t *pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 8004f9e:	2300      	movs	r3, #0
 8004fa0:	633b      	str	r3, [r7, #48]	; 0x30
EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	62bb      	str	r3, [r7, #40]	; 0x28
BaseType_t xMatchFound = pdFALSE;
 8004fa6:	2300      	movs	r3, #0
 8004fa8:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d10a      	bne.n	8004fc6 <xEventGroupSetBits+0x32>
	__asm volatile
 8004fb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fb4:	f383 8811 	msr	BASEPRI, r3
 8004fb8:	f3bf 8f6f 	isb	sy
 8004fbc:	f3bf 8f4f 	dsb	sy
 8004fc0:	613b      	str	r3, [r7, #16]
}
 8004fc2:	bf00      	nop
 8004fc4:	e7fe      	b.n	8004fc4 <xEventGroupSetBits+0x30>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8004fc6:	683b      	ldr	r3, [r7, #0]
 8004fc8:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d00a      	beq.n	8004fe6 <xEventGroupSetBits+0x52>
	__asm volatile
 8004fd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fd4:	f383 8811 	msr	BASEPRI, r3
 8004fd8:	f3bf 8f6f 	isb	sy
 8004fdc:	f3bf 8f4f 	dsb	sy
 8004fe0:	60fb      	str	r3, [r7, #12]
}
 8004fe2:	bf00      	nop
 8004fe4:	e7fe      	b.n	8004fe4 <xEventGroupSetBits+0x50>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 8004fe6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fe8:	3304      	adds	r3, #4
 8004fea:	627b      	str	r3, [r7, #36]	; 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004fec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fee:	3308      	adds	r3, #8
 8004ff0:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 8004ff2:	f000 fb69 	bl	80056c8 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 8004ff6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ff8:	68db      	ldr	r3, [r3, #12]
 8004ffa:	637b      	str	r3, [r7, #52]	; 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 8004ffc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ffe:	681a      	ldr	r2, [r3, #0]
 8005000:	683b      	ldr	r3, [r7, #0]
 8005002:	431a      	orrs	r2, r3
 8005004:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005006:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 8005008:	e03c      	b.n	8005084 <xEventGroupSetBits+0xf0>
		{
			pxNext = listGET_NEXT( pxListItem );
 800500a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800500c:	685b      	ldr	r3, [r3, #4]
 800500e:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 8005010:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 8005016:	2300      	movs	r3, #0
 8005018:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 800501a:	69bb      	ldr	r3, [r7, #24]
 800501c:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8005020:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 8005022:	69bb      	ldr	r3, [r7, #24]
 8005024:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005028:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 800502a:	697b      	ldr	r3, [r7, #20]
 800502c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005030:	2b00      	cmp	r3, #0
 8005032:	d108      	bne.n	8005046 <xEventGroupSetBits+0xb2>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 8005034:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005036:	681a      	ldr	r2, [r3, #0]
 8005038:	69bb      	ldr	r3, [r7, #24]
 800503a:	4013      	ands	r3, r2
 800503c:	2b00      	cmp	r3, #0
 800503e:	d00b      	beq.n	8005058 <xEventGroupSetBits+0xc4>
				{
					xMatchFound = pdTRUE;
 8005040:	2301      	movs	r3, #1
 8005042:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005044:	e008      	b.n	8005058 <xEventGroupSetBits+0xc4>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 8005046:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005048:	681a      	ldr	r2, [r3, #0]
 800504a:	69bb      	ldr	r3, [r7, #24]
 800504c:	4013      	ands	r3, r2
 800504e:	69ba      	ldr	r2, [r7, #24]
 8005050:	429a      	cmp	r2, r3
 8005052:	d101      	bne.n	8005058 <xEventGroupSetBits+0xc4>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 8005054:	2301      	movs	r3, #1
 8005056:	62fb      	str	r3, [r7, #44]	; 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 8005058:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800505a:	2b00      	cmp	r3, #0
 800505c:	d010      	beq.n	8005080 <xEventGroupSetBits+0xec>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 800505e:	697b      	ldr	r3, [r7, #20]
 8005060:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005064:	2b00      	cmp	r3, #0
 8005066:	d003      	beq.n	8005070 <xEventGroupSetBits+0xdc>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 8005068:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800506a:	69bb      	ldr	r3, [r7, #24]
 800506c:	4313      	orrs	r3, r2
 800506e:	633b      	str	r3, [r7, #48]	; 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 8005070:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005078:	4619      	mov	r1, r3
 800507a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800507c:	f000 fd2a 	bl	8005ad4 <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 8005080:	69fb      	ldr	r3, [r7, #28]
 8005082:	637b      	str	r3, [r7, #52]	; 0x34
		while( pxListItem != pxListEnd )
 8005084:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005086:	6a3b      	ldr	r3, [r7, #32]
 8005088:	429a      	cmp	r2, r3
 800508a:	d1be      	bne.n	800500a <xEventGroupSetBits+0x76>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 800508c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800508e:	681a      	ldr	r2, [r3, #0]
 8005090:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005092:	43db      	mvns	r3, r3
 8005094:	401a      	ands	r2, r3
 8005096:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005098:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 800509a:	f000 fb23 	bl	80056e4 <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 800509e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050a0:	681b      	ldr	r3, [r3, #0]
}
 80050a2:	4618      	mov	r0, r3
 80050a4:	3738      	adds	r7, #56	; 0x38
 80050a6:	46bd      	mov	sp, r7
 80050a8:	bd80      	pop	{r7, pc}

080050aa <prvTestWaitCondition>:
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear );
}
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 80050aa:	b480      	push	{r7}
 80050ac:	b087      	sub	sp, #28
 80050ae:	af00      	add	r7, sp, #0
 80050b0:	60f8      	str	r0, [r7, #12]
 80050b2:	60b9      	str	r1, [r7, #8]
 80050b4:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 80050b6:	2300      	movs	r3, #0
 80050b8:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d107      	bne.n	80050d0 <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 80050c0:	68fa      	ldr	r2, [r7, #12]
 80050c2:	68bb      	ldr	r3, [r7, #8]
 80050c4:	4013      	ands	r3, r2
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d00a      	beq.n	80050e0 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 80050ca:	2301      	movs	r3, #1
 80050cc:	617b      	str	r3, [r7, #20]
 80050ce:	e007      	b.n	80050e0 <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 80050d0:	68fa      	ldr	r2, [r7, #12]
 80050d2:	68bb      	ldr	r3, [r7, #8]
 80050d4:	4013      	ands	r3, r2
 80050d6:	68ba      	ldr	r2, [r7, #8]
 80050d8:	429a      	cmp	r2, r3
 80050da:	d101      	bne.n	80050e0 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 80050dc:	2301      	movs	r3, #1
 80050de:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 80050e0:	697b      	ldr	r3, [r7, #20]
}
 80050e2:	4618      	mov	r0, r3
 80050e4:	371c      	adds	r7, #28
 80050e6:	46bd      	mov	sp, r7
 80050e8:	bc80      	pop	{r7}
 80050ea:	4770      	bx	lr

080050ec <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80050ec:	b480      	push	{r7}
 80050ee:	b083      	sub	sp, #12
 80050f0:	af00      	add	r7, sp, #0
 80050f2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	f103 0208 	add.w	r2, r3, #8
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	f04f 32ff 	mov.w	r2, #4294967295
 8005104:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	f103 0208 	add.w	r2, r3, #8
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	f103 0208 	add.w	r2, r3, #8
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	2200      	movs	r2, #0
 800511e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005120:	bf00      	nop
 8005122:	370c      	adds	r7, #12
 8005124:	46bd      	mov	sp, r7
 8005126:	bc80      	pop	{r7}
 8005128:	4770      	bx	lr

0800512a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800512a:	b480      	push	{r7}
 800512c:	b083      	sub	sp, #12
 800512e:	af00      	add	r7, sp, #0
 8005130:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	2200      	movs	r2, #0
 8005136:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005138:	bf00      	nop
 800513a:	370c      	adds	r7, #12
 800513c:	46bd      	mov	sp, r7
 800513e:	bc80      	pop	{r7}
 8005140:	4770      	bx	lr

08005142 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005142:	b480      	push	{r7}
 8005144:	b085      	sub	sp, #20
 8005146:	af00      	add	r7, sp, #0
 8005148:	6078      	str	r0, [r7, #4]
 800514a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	685b      	ldr	r3, [r3, #4]
 8005150:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005152:	683b      	ldr	r3, [r7, #0]
 8005154:	68fa      	ldr	r2, [r7, #12]
 8005156:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	689a      	ldr	r2, [r3, #8]
 800515c:	683b      	ldr	r3, [r7, #0]
 800515e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	689b      	ldr	r3, [r3, #8]
 8005164:	683a      	ldr	r2, [r7, #0]
 8005166:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	683a      	ldr	r2, [r7, #0]
 800516c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800516e:	683b      	ldr	r3, [r7, #0]
 8005170:	687a      	ldr	r2, [r7, #4]
 8005172:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	1c5a      	adds	r2, r3, #1
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	601a      	str	r2, [r3, #0]
}
 800517e:	bf00      	nop
 8005180:	3714      	adds	r7, #20
 8005182:	46bd      	mov	sp, r7
 8005184:	bc80      	pop	{r7}
 8005186:	4770      	bx	lr

08005188 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005188:	b480      	push	{r7}
 800518a:	b085      	sub	sp, #20
 800518c:	af00      	add	r7, sp, #0
 800518e:	6078      	str	r0, [r7, #4]
 8005190:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005192:	683b      	ldr	r3, [r7, #0]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005198:	68bb      	ldr	r3, [r7, #8]
 800519a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800519e:	d103      	bne.n	80051a8 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	691b      	ldr	r3, [r3, #16]
 80051a4:	60fb      	str	r3, [r7, #12]
 80051a6:	e00c      	b.n	80051c2 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	3308      	adds	r3, #8
 80051ac:	60fb      	str	r3, [r7, #12]
 80051ae:	e002      	b.n	80051b6 <vListInsert+0x2e>
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	685b      	ldr	r3, [r3, #4]
 80051b4:	60fb      	str	r3, [r7, #12]
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	685b      	ldr	r3, [r3, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	68ba      	ldr	r2, [r7, #8]
 80051be:	429a      	cmp	r2, r3
 80051c0:	d2f6      	bcs.n	80051b0 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	685a      	ldr	r2, [r3, #4]
 80051c6:	683b      	ldr	r3, [r7, #0]
 80051c8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80051ca:	683b      	ldr	r3, [r7, #0]
 80051cc:	685b      	ldr	r3, [r3, #4]
 80051ce:	683a      	ldr	r2, [r7, #0]
 80051d0:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80051d2:	683b      	ldr	r3, [r7, #0]
 80051d4:	68fa      	ldr	r2, [r7, #12]
 80051d6:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	683a      	ldr	r2, [r7, #0]
 80051dc:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80051de:	683b      	ldr	r3, [r7, #0]
 80051e0:	687a      	ldr	r2, [r7, #4]
 80051e2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	1c5a      	adds	r2, r3, #1
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	601a      	str	r2, [r3, #0]
}
 80051ee:	bf00      	nop
 80051f0:	3714      	adds	r7, #20
 80051f2:	46bd      	mov	sp, r7
 80051f4:	bc80      	pop	{r7}
 80051f6:	4770      	bx	lr

080051f8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80051f8:	b480      	push	{r7}
 80051fa:	b085      	sub	sp, #20
 80051fc:	af00      	add	r7, sp, #0
 80051fe:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	691b      	ldr	r3, [r3, #16]
 8005204:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	685b      	ldr	r3, [r3, #4]
 800520a:	687a      	ldr	r2, [r7, #4]
 800520c:	6892      	ldr	r2, [r2, #8]
 800520e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	689b      	ldr	r3, [r3, #8]
 8005214:	687a      	ldr	r2, [r7, #4]
 8005216:	6852      	ldr	r2, [r2, #4]
 8005218:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	685b      	ldr	r3, [r3, #4]
 800521e:	687a      	ldr	r2, [r7, #4]
 8005220:	429a      	cmp	r2, r3
 8005222:	d103      	bne.n	800522c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	689a      	ldr	r2, [r3, #8]
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	2200      	movs	r2, #0
 8005230:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	1e5a      	subs	r2, r3, #1
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	681b      	ldr	r3, [r3, #0]
}
 8005240:	4618      	mov	r0, r3
 8005242:	3714      	adds	r7, #20
 8005244:	46bd      	mov	sp, r7
 8005246:	bc80      	pop	{r7}
 8005248:	4770      	bx	lr

0800524a <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800524a:	b580      	push	{r7, lr}
 800524c:	b08e      	sub	sp, #56	; 0x38
 800524e:	af04      	add	r7, sp, #16
 8005250:	60f8      	str	r0, [r7, #12]
 8005252:	60b9      	str	r1, [r7, #8]
 8005254:	607a      	str	r2, [r7, #4]
 8005256:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005258:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800525a:	2b00      	cmp	r3, #0
 800525c:	d10a      	bne.n	8005274 <xTaskCreateStatic+0x2a>
	__asm volatile
 800525e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005262:	f383 8811 	msr	BASEPRI, r3
 8005266:	f3bf 8f6f 	isb	sy
 800526a:	f3bf 8f4f 	dsb	sy
 800526e:	623b      	str	r3, [r7, #32]
}
 8005270:	bf00      	nop
 8005272:	e7fe      	b.n	8005272 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005274:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005276:	2b00      	cmp	r3, #0
 8005278:	d10a      	bne.n	8005290 <xTaskCreateStatic+0x46>
	__asm volatile
 800527a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800527e:	f383 8811 	msr	BASEPRI, r3
 8005282:	f3bf 8f6f 	isb	sy
 8005286:	f3bf 8f4f 	dsb	sy
 800528a:	61fb      	str	r3, [r7, #28]
}
 800528c:	bf00      	nop
 800528e:	e7fe      	b.n	800528e <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005290:	23b4      	movs	r3, #180	; 0xb4
 8005292:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005294:	693b      	ldr	r3, [r7, #16]
 8005296:	2bb4      	cmp	r3, #180	; 0xb4
 8005298:	d00a      	beq.n	80052b0 <xTaskCreateStatic+0x66>
	__asm volatile
 800529a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800529e:	f383 8811 	msr	BASEPRI, r3
 80052a2:	f3bf 8f6f 	isb	sy
 80052a6:	f3bf 8f4f 	dsb	sy
 80052aa:	61bb      	str	r3, [r7, #24]
}
 80052ac:	bf00      	nop
 80052ae:	e7fe      	b.n	80052ae <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80052b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d01e      	beq.n	80052f4 <xTaskCreateStatic+0xaa>
 80052b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d01b      	beq.n	80052f4 <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80052bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052be:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80052c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052c2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80052c4:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80052c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052c8:	2202      	movs	r2, #2
 80052ca:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80052ce:	2300      	movs	r3, #0
 80052d0:	9303      	str	r3, [sp, #12]
 80052d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052d4:	9302      	str	r3, [sp, #8]
 80052d6:	f107 0314 	add.w	r3, r7, #20
 80052da:	9301      	str	r3, [sp, #4]
 80052dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052de:	9300      	str	r3, [sp, #0]
 80052e0:	683b      	ldr	r3, [r7, #0]
 80052e2:	687a      	ldr	r2, [r7, #4]
 80052e4:	68b9      	ldr	r1, [r7, #8]
 80052e6:	68f8      	ldr	r0, [r7, #12]
 80052e8:	f000 f850 	bl	800538c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80052ec:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80052ee:	f000 f8e3 	bl	80054b8 <prvAddNewTaskToReadyList>
 80052f2:	e001      	b.n	80052f8 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 80052f4:	2300      	movs	r3, #0
 80052f6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80052f8:	697b      	ldr	r3, [r7, #20]
	}
 80052fa:	4618      	mov	r0, r3
 80052fc:	3728      	adds	r7, #40	; 0x28
 80052fe:	46bd      	mov	sp, r7
 8005300:	bd80      	pop	{r7, pc}

08005302 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005302:	b580      	push	{r7, lr}
 8005304:	b08c      	sub	sp, #48	; 0x30
 8005306:	af04      	add	r7, sp, #16
 8005308:	60f8      	str	r0, [r7, #12]
 800530a:	60b9      	str	r1, [r7, #8]
 800530c:	603b      	str	r3, [r7, #0]
 800530e:	4613      	mov	r3, r2
 8005310:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005312:	88fb      	ldrh	r3, [r7, #6]
 8005314:	009b      	lsls	r3, r3, #2
 8005316:	4618      	mov	r0, r3
 8005318:	f000 ff6a 	bl	80061f0 <pvPortMalloc>
 800531c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800531e:	697b      	ldr	r3, [r7, #20]
 8005320:	2b00      	cmp	r3, #0
 8005322:	d00e      	beq.n	8005342 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8005324:	20b4      	movs	r0, #180	; 0xb4
 8005326:	f000 ff63 	bl	80061f0 <pvPortMalloc>
 800532a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800532c:	69fb      	ldr	r3, [r7, #28]
 800532e:	2b00      	cmp	r3, #0
 8005330:	d003      	beq.n	800533a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005332:	69fb      	ldr	r3, [r7, #28]
 8005334:	697a      	ldr	r2, [r7, #20]
 8005336:	631a      	str	r2, [r3, #48]	; 0x30
 8005338:	e005      	b.n	8005346 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800533a:	6978      	ldr	r0, [r7, #20]
 800533c:	f001 f81c 	bl	8006378 <vPortFree>
 8005340:	e001      	b.n	8005346 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005342:	2300      	movs	r3, #0
 8005344:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005346:	69fb      	ldr	r3, [r7, #28]
 8005348:	2b00      	cmp	r3, #0
 800534a:	d017      	beq.n	800537c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800534c:	69fb      	ldr	r3, [r7, #28]
 800534e:	2200      	movs	r2, #0
 8005350:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005354:	88fa      	ldrh	r2, [r7, #6]
 8005356:	2300      	movs	r3, #0
 8005358:	9303      	str	r3, [sp, #12]
 800535a:	69fb      	ldr	r3, [r7, #28]
 800535c:	9302      	str	r3, [sp, #8]
 800535e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005360:	9301      	str	r3, [sp, #4]
 8005362:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005364:	9300      	str	r3, [sp, #0]
 8005366:	683b      	ldr	r3, [r7, #0]
 8005368:	68b9      	ldr	r1, [r7, #8]
 800536a:	68f8      	ldr	r0, [r7, #12]
 800536c:	f000 f80e 	bl	800538c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005370:	69f8      	ldr	r0, [r7, #28]
 8005372:	f000 f8a1 	bl	80054b8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005376:	2301      	movs	r3, #1
 8005378:	61bb      	str	r3, [r7, #24]
 800537a:	e002      	b.n	8005382 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800537c:	f04f 33ff 	mov.w	r3, #4294967295
 8005380:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005382:	69bb      	ldr	r3, [r7, #24]
	}
 8005384:	4618      	mov	r0, r3
 8005386:	3720      	adds	r7, #32
 8005388:	46bd      	mov	sp, r7
 800538a:	bd80      	pop	{r7, pc}

0800538c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800538c:	b580      	push	{r7, lr}
 800538e:	b088      	sub	sp, #32
 8005390:	af00      	add	r7, sp, #0
 8005392:	60f8      	str	r0, [r7, #12]
 8005394:	60b9      	str	r1, [r7, #8]
 8005396:	607a      	str	r2, [r7, #4]
 8005398:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800539a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800539c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80053a4:	3b01      	subs	r3, #1
 80053a6:	009b      	lsls	r3, r3, #2
 80053a8:	4413      	add	r3, r2
 80053aa:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80053ac:	69bb      	ldr	r3, [r7, #24]
 80053ae:	f023 0307 	bic.w	r3, r3, #7
 80053b2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80053b4:	69bb      	ldr	r3, [r7, #24]
 80053b6:	f003 0307 	and.w	r3, r3, #7
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d00a      	beq.n	80053d4 <prvInitialiseNewTask+0x48>
	__asm volatile
 80053be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053c2:	f383 8811 	msr	BASEPRI, r3
 80053c6:	f3bf 8f6f 	isb	sy
 80053ca:	f3bf 8f4f 	dsb	sy
 80053ce:	617b      	str	r3, [r7, #20]
}
 80053d0:	bf00      	nop
 80053d2:	e7fe      	b.n	80053d2 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80053d4:	2300      	movs	r3, #0
 80053d6:	61fb      	str	r3, [r7, #28]
 80053d8:	e012      	b.n	8005400 <prvInitialiseNewTask+0x74>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80053da:	68ba      	ldr	r2, [r7, #8]
 80053dc:	69fb      	ldr	r3, [r7, #28]
 80053de:	4413      	add	r3, r2
 80053e0:	7819      	ldrb	r1, [r3, #0]
 80053e2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80053e4:	69fb      	ldr	r3, [r7, #28]
 80053e6:	4413      	add	r3, r2
 80053e8:	3334      	adds	r3, #52	; 0x34
 80053ea:	460a      	mov	r2, r1
 80053ec:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 80053ee:	68ba      	ldr	r2, [r7, #8]
 80053f0:	69fb      	ldr	r3, [r7, #28]
 80053f2:	4413      	add	r3, r2
 80053f4:	781b      	ldrb	r3, [r3, #0]
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d006      	beq.n	8005408 <prvInitialiseNewTask+0x7c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80053fa:	69fb      	ldr	r3, [r7, #28]
 80053fc:	3301      	adds	r3, #1
 80053fe:	61fb      	str	r3, [r7, #28]
 8005400:	69fb      	ldr	r3, [r7, #28]
 8005402:	2b0f      	cmp	r3, #15
 8005404:	d9e9      	bls.n	80053da <prvInitialiseNewTask+0x4e>
 8005406:	e000      	b.n	800540a <prvInitialiseNewTask+0x7e>
		{
			break;
 8005408:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800540a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800540c:	2200      	movs	r2, #0
 800540e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005412:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005414:	2b06      	cmp	r3, #6
 8005416:	d901      	bls.n	800541c <prvInitialiseNewTask+0x90>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005418:	2306      	movs	r3, #6
 800541a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800541c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800541e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005420:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005422:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005424:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005426:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8005428:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800542a:	2200      	movs	r2, #0
 800542c:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800542e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005430:	3304      	adds	r3, #4
 8005432:	4618      	mov	r0, r3
 8005434:	f7ff fe79 	bl	800512a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005438:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800543a:	3318      	adds	r3, #24
 800543c:	4618      	mov	r0, r3
 800543e:	f7ff fe74 	bl	800512a <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005442:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005444:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005446:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005448:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800544a:	f1c3 0207 	rsb	r2, r3, #7
 800544e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005450:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005452:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005454:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005456:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005458:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800545a:	2200      	movs	r2, #0
 800545c:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005460:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005462:	2200      	movs	r2, #0
 8005464:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8005468:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800546a:	334c      	adds	r3, #76	; 0x4c
 800546c:	2260      	movs	r2, #96	; 0x60
 800546e:	2100      	movs	r1, #0
 8005470:	4618      	mov	r0, r3
 8005472:	f001 f8bb 	bl	80065ec <memset>
 8005476:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005478:	4a0c      	ldr	r2, [pc, #48]	; (80054ac <prvInitialiseNewTask+0x120>)
 800547a:	651a      	str	r2, [r3, #80]	; 0x50
 800547c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800547e:	4a0c      	ldr	r2, [pc, #48]	; (80054b0 <prvInitialiseNewTask+0x124>)
 8005480:	655a      	str	r2, [r3, #84]	; 0x54
 8005482:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005484:	4a0b      	ldr	r2, [pc, #44]	; (80054b4 <prvInitialiseNewTask+0x128>)
 8005486:	659a      	str	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005488:	683a      	ldr	r2, [r7, #0]
 800548a:	68f9      	ldr	r1, [r7, #12]
 800548c:	69b8      	ldr	r0, [r7, #24]
 800548e:	f000 fcfd 	bl	8005e8c <pxPortInitialiseStack>
 8005492:	4602      	mov	r2, r0
 8005494:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005496:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8005498:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800549a:	2b00      	cmp	r3, #0
 800549c:	d002      	beq.n	80054a4 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800549e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80054a2:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80054a4:	bf00      	nop
 80054a6:	3720      	adds	r7, #32
 80054a8:	46bd      	mov	sp, r7
 80054aa:	bd80      	pop	{r7, pc}
 80054ac:	080067e4 	.word	0x080067e4
 80054b0:	08006804 	.word	0x08006804
 80054b4:	080067c4 	.word	0x080067c4

080054b8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80054b8:	b580      	push	{r7, lr}
 80054ba:	b082      	sub	sp, #8
 80054bc:	af00      	add	r7, sp, #0
 80054be:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80054c0:	f000 fdd4 	bl	800606c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80054c4:	4b2a      	ldr	r3, [pc, #168]	; (8005570 <prvAddNewTaskToReadyList+0xb8>)
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	3301      	adds	r3, #1
 80054ca:	4a29      	ldr	r2, [pc, #164]	; (8005570 <prvAddNewTaskToReadyList+0xb8>)
 80054cc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80054ce:	4b29      	ldr	r3, [pc, #164]	; (8005574 <prvAddNewTaskToReadyList+0xbc>)
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d109      	bne.n	80054ea <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80054d6:	4a27      	ldr	r2, [pc, #156]	; (8005574 <prvAddNewTaskToReadyList+0xbc>)
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80054dc:	4b24      	ldr	r3, [pc, #144]	; (8005570 <prvAddNewTaskToReadyList+0xb8>)
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	2b01      	cmp	r3, #1
 80054e2:	d110      	bne.n	8005506 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80054e4:	f000 fb70 	bl	8005bc8 <prvInitialiseTaskLists>
 80054e8:	e00d      	b.n	8005506 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80054ea:	4b23      	ldr	r3, [pc, #140]	; (8005578 <prvAddNewTaskToReadyList+0xc0>)
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d109      	bne.n	8005506 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80054f2:	4b20      	ldr	r3, [pc, #128]	; (8005574 <prvAddNewTaskToReadyList+0xbc>)
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054fc:	429a      	cmp	r2, r3
 80054fe:	d802      	bhi.n	8005506 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005500:	4a1c      	ldr	r2, [pc, #112]	; (8005574 <prvAddNewTaskToReadyList+0xbc>)
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005506:	4b1d      	ldr	r3, [pc, #116]	; (800557c <prvAddNewTaskToReadyList+0xc4>)
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	3301      	adds	r3, #1
 800550c:	4a1b      	ldr	r2, [pc, #108]	; (800557c <prvAddNewTaskToReadyList+0xc4>)
 800550e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005514:	2201      	movs	r2, #1
 8005516:	409a      	lsls	r2, r3
 8005518:	4b19      	ldr	r3, [pc, #100]	; (8005580 <prvAddNewTaskToReadyList+0xc8>)
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	4313      	orrs	r3, r2
 800551e:	4a18      	ldr	r2, [pc, #96]	; (8005580 <prvAddNewTaskToReadyList+0xc8>)
 8005520:	6013      	str	r3, [r2, #0]
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005526:	4613      	mov	r3, r2
 8005528:	009b      	lsls	r3, r3, #2
 800552a:	4413      	add	r3, r2
 800552c:	009b      	lsls	r3, r3, #2
 800552e:	4a15      	ldr	r2, [pc, #84]	; (8005584 <prvAddNewTaskToReadyList+0xcc>)
 8005530:	441a      	add	r2, r3
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	3304      	adds	r3, #4
 8005536:	4619      	mov	r1, r3
 8005538:	4610      	mov	r0, r2
 800553a:	f7ff fe02 	bl	8005142 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800553e:	f000 fdc5 	bl	80060cc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005542:	4b0d      	ldr	r3, [pc, #52]	; (8005578 <prvAddNewTaskToReadyList+0xc0>)
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	2b00      	cmp	r3, #0
 8005548:	d00e      	beq.n	8005568 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800554a:	4b0a      	ldr	r3, [pc, #40]	; (8005574 <prvAddNewTaskToReadyList+0xbc>)
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005554:	429a      	cmp	r2, r3
 8005556:	d207      	bcs.n	8005568 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005558:	4b0b      	ldr	r3, [pc, #44]	; (8005588 <prvAddNewTaskToReadyList+0xd0>)
 800555a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800555e:	601a      	str	r2, [r3, #0]
 8005560:	f3bf 8f4f 	dsb	sy
 8005564:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005568:	bf00      	nop
 800556a:	3708      	adds	r7, #8
 800556c:	46bd      	mov	sp, r7
 800556e:	bd80      	pop	{r7, pc}
 8005570:	20000630 	.word	0x20000630
 8005574:	20000530 	.word	0x20000530
 8005578:	2000063c 	.word	0x2000063c
 800557c:	2000064c 	.word	0x2000064c
 8005580:	20000638 	.word	0x20000638
 8005584:	20000534 	.word	0x20000534
 8005588:	e000ed04 	.word	0xe000ed04

0800558c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800558c:	b580      	push	{r7, lr}
 800558e:	b084      	sub	sp, #16
 8005590:	af00      	add	r7, sp, #0
 8005592:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005594:	2300      	movs	r3, #0
 8005596:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	2b00      	cmp	r3, #0
 800559c:	d017      	beq.n	80055ce <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800559e:	4b13      	ldr	r3, [pc, #76]	; (80055ec <vTaskDelay+0x60>)
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d00a      	beq.n	80055bc <vTaskDelay+0x30>
	__asm volatile
 80055a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055aa:	f383 8811 	msr	BASEPRI, r3
 80055ae:	f3bf 8f6f 	isb	sy
 80055b2:	f3bf 8f4f 	dsb	sy
 80055b6:	60bb      	str	r3, [r7, #8]
}
 80055b8:	bf00      	nop
 80055ba:	e7fe      	b.n	80055ba <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80055bc:	f000 f884 	bl	80056c8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80055c0:	2100      	movs	r1, #0
 80055c2:	6878      	ldr	r0, [r7, #4]
 80055c4:	f000 fbfc 	bl	8005dc0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80055c8:	f000 f88c 	bl	80056e4 <xTaskResumeAll>
 80055cc:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d107      	bne.n	80055e4 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80055d4:	4b06      	ldr	r3, [pc, #24]	; (80055f0 <vTaskDelay+0x64>)
 80055d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80055da:	601a      	str	r2, [r3, #0]
 80055dc:	f3bf 8f4f 	dsb	sy
 80055e0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80055e4:	bf00      	nop
 80055e6:	3710      	adds	r7, #16
 80055e8:	46bd      	mov	sp, r7
 80055ea:	bd80      	pop	{r7, pc}
 80055ec:	20000658 	.word	0x20000658
 80055f0:	e000ed04 	.word	0xe000ed04

080055f4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80055f4:	b580      	push	{r7, lr}
 80055f6:	b08a      	sub	sp, #40	; 0x28
 80055f8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80055fa:	2300      	movs	r3, #0
 80055fc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80055fe:	2300      	movs	r3, #0
 8005600:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005602:	463a      	mov	r2, r7
 8005604:	1d39      	adds	r1, r7, #4
 8005606:	f107 0308 	add.w	r3, r7, #8
 800560a:	4618      	mov	r0, r3
 800560c:	f7fb fb9c 	bl	8000d48 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005610:	6839      	ldr	r1, [r7, #0]
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	68ba      	ldr	r2, [r7, #8]
 8005616:	9202      	str	r2, [sp, #8]
 8005618:	9301      	str	r3, [sp, #4]
 800561a:	2300      	movs	r3, #0
 800561c:	9300      	str	r3, [sp, #0]
 800561e:	2300      	movs	r3, #0
 8005620:	460a      	mov	r2, r1
 8005622:	4921      	ldr	r1, [pc, #132]	; (80056a8 <vTaskStartScheduler+0xb4>)
 8005624:	4821      	ldr	r0, [pc, #132]	; (80056ac <vTaskStartScheduler+0xb8>)
 8005626:	f7ff fe10 	bl	800524a <xTaskCreateStatic>
 800562a:	4603      	mov	r3, r0
 800562c:	4a20      	ldr	r2, [pc, #128]	; (80056b0 <vTaskStartScheduler+0xbc>)
 800562e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005630:	4b1f      	ldr	r3, [pc, #124]	; (80056b0 <vTaskStartScheduler+0xbc>)
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	2b00      	cmp	r3, #0
 8005636:	d002      	beq.n	800563e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005638:	2301      	movs	r3, #1
 800563a:	617b      	str	r3, [r7, #20]
 800563c:	e001      	b.n	8005642 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800563e:	2300      	movs	r3, #0
 8005640:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005642:	697b      	ldr	r3, [r7, #20]
 8005644:	2b01      	cmp	r3, #1
 8005646:	d11b      	bne.n	8005680 <vTaskStartScheduler+0x8c>
	__asm volatile
 8005648:	f04f 0350 	mov.w	r3, #80	; 0x50
 800564c:	f383 8811 	msr	BASEPRI, r3
 8005650:	f3bf 8f6f 	isb	sy
 8005654:	f3bf 8f4f 	dsb	sy
 8005658:	613b      	str	r3, [r7, #16]
}
 800565a:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800565c:	4b15      	ldr	r3, [pc, #84]	; (80056b4 <vTaskStartScheduler+0xc0>)
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	334c      	adds	r3, #76	; 0x4c
 8005662:	4a15      	ldr	r2, [pc, #84]	; (80056b8 <vTaskStartScheduler+0xc4>)
 8005664:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005666:	4b15      	ldr	r3, [pc, #84]	; (80056bc <vTaskStartScheduler+0xc8>)
 8005668:	f04f 32ff 	mov.w	r2, #4294967295
 800566c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800566e:	4b14      	ldr	r3, [pc, #80]	; (80056c0 <vTaskStartScheduler+0xcc>)
 8005670:	2201      	movs	r2, #1
 8005672:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8005674:	4b13      	ldr	r3, [pc, #76]	; (80056c4 <vTaskStartScheduler+0xd0>)
 8005676:	2200      	movs	r2, #0
 8005678:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800567a:	f000 fc85 	bl	8005f88 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800567e:	e00e      	b.n	800569e <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005680:	697b      	ldr	r3, [r7, #20]
 8005682:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005686:	d10a      	bne.n	800569e <vTaskStartScheduler+0xaa>
	__asm volatile
 8005688:	f04f 0350 	mov.w	r3, #80	; 0x50
 800568c:	f383 8811 	msr	BASEPRI, r3
 8005690:	f3bf 8f6f 	isb	sy
 8005694:	f3bf 8f4f 	dsb	sy
 8005698:	60fb      	str	r3, [r7, #12]
}
 800569a:	bf00      	nop
 800569c:	e7fe      	b.n	800569c <vTaskStartScheduler+0xa8>
}
 800569e:	bf00      	nop
 80056a0:	3718      	adds	r7, #24
 80056a2:	46bd      	mov	sp, r7
 80056a4:	bd80      	pop	{r7, pc}
 80056a6:	bf00      	nop
 80056a8:	08006790 	.word	0x08006790
 80056ac:	08005b99 	.word	0x08005b99
 80056b0:	20000654 	.word	0x20000654
 80056b4:	20000530 	.word	0x20000530
 80056b8:	20000014 	.word	0x20000014
 80056bc:	20000650 	.word	0x20000650
 80056c0:	2000063c 	.word	0x2000063c
 80056c4:	20000634 	.word	0x20000634

080056c8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80056c8:	b480      	push	{r7}
 80056ca:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80056cc:	4b04      	ldr	r3, [pc, #16]	; (80056e0 <vTaskSuspendAll+0x18>)
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	3301      	adds	r3, #1
 80056d2:	4a03      	ldr	r2, [pc, #12]	; (80056e0 <vTaskSuspendAll+0x18>)
 80056d4:	6013      	str	r3, [r2, #0]
}
 80056d6:	bf00      	nop
 80056d8:	46bd      	mov	sp, r7
 80056da:	bc80      	pop	{r7}
 80056dc:	4770      	bx	lr
 80056de:	bf00      	nop
 80056e0:	20000658 	.word	0x20000658

080056e4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80056e4:	b580      	push	{r7, lr}
 80056e6:	b084      	sub	sp, #16
 80056e8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80056ea:	2300      	movs	r3, #0
 80056ec:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80056ee:	2300      	movs	r3, #0
 80056f0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80056f2:	4b41      	ldr	r3, [pc, #260]	; (80057f8 <xTaskResumeAll+0x114>)
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d10a      	bne.n	8005710 <xTaskResumeAll+0x2c>
	__asm volatile
 80056fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056fe:	f383 8811 	msr	BASEPRI, r3
 8005702:	f3bf 8f6f 	isb	sy
 8005706:	f3bf 8f4f 	dsb	sy
 800570a:	603b      	str	r3, [r7, #0]
}
 800570c:	bf00      	nop
 800570e:	e7fe      	b.n	800570e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005710:	f000 fcac 	bl	800606c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005714:	4b38      	ldr	r3, [pc, #224]	; (80057f8 <xTaskResumeAll+0x114>)
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	3b01      	subs	r3, #1
 800571a:	4a37      	ldr	r2, [pc, #220]	; (80057f8 <xTaskResumeAll+0x114>)
 800571c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800571e:	4b36      	ldr	r3, [pc, #216]	; (80057f8 <xTaskResumeAll+0x114>)
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	2b00      	cmp	r3, #0
 8005724:	d161      	bne.n	80057ea <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005726:	4b35      	ldr	r3, [pc, #212]	; (80057fc <xTaskResumeAll+0x118>)
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	2b00      	cmp	r3, #0
 800572c:	d05d      	beq.n	80057ea <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800572e:	e02e      	b.n	800578e <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8005730:	4b33      	ldr	r3, [pc, #204]	; (8005800 <xTaskResumeAll+0x11c>)
 8005732:	68db      	ldr	r3, [r3, #12]
 8005734:	68db      	ldr	r3, [r3, #12]
 8005736:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	3318      	adds	r3, #24
 800573c:	4618      	mov	r0, r3
 800573e:	f7ff fd5b 	bl	80051f8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	3304      	adds	r3, #4
 8005746:	4618      	mov	r0, r3
 8005748:	f7ff fd56 	bl	80051f8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005750:	2201      	movs	r2, #1
 8005752:	409a      	lsls	r2, r3
 8005754:	4b2b      	ldr	r3, [pc, #172]	; (8005804 <xTaskResumeAll+0x120>)
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	4313      	orrs	r3, r2
 800575a:	4a2a      	ldr	r2, [pc, #168]	; (8005804 <xTaskResumeAll+0x120>)
 800575c:	6013      	str	r3, [r2, #0]
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005762:	4613      	mov	r3, r2
 8005764:	009b      	lsls	r3, r3, #2
 8005766:	4413      	add	r3, r2
 8005768:	009b      	lsls	r3, r3, #2
 800576a:	4a27      	ldr	r2, [pc, #156]	; (8005808 <xTaskResumeAll+0x124>)
 800576c:	441a      	add	r2, r3
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	3304      	adds	r3, #4
 8005772:	4619      	mov	r1, r3
 8005774:	4610      	mov	r0, r2
 8005776:	f7ff fce4 	bl	8005142 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800577e:	4b23      	ldr	r3, [pc, #140]	; (800580c <xTaskResumeAll+0x128>)
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005784:	429a      	cmp	r2, r3
 8005786:	d302      	bcc.n	800578e <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8005788:	4b21      	ldr	r3, [pc, #132]	; (8005810 <xTaskResumeAll+0x12c>)
 800578a:	2201      	movs	r2, #1
 800578c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800578e:	4b1c      	ldr	r3, [pc, #112]	; (8005800 <xTaskResumeAll+0x11c>)
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	2b00      	cmp	r3, #0
 8005794:	d1cc      	bne.n	8005730 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	2b00      	cmp	r3, #0
 800579a:	d001      	beq.n	80057a0 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800579c:	f000 fab6 	bl	8005d0c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80057a0:	4b1c      	ldr	r3, [pc, #112]	; (8005814 <xTaskResumeAll+0x130>)
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d010      	beq.n	80057ce <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80057ac:	f000 f836 	bl	800581c <xTaskIncrementTick>
 80057b0:	4603      	mov	r3, r0
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d002      	beq.n	80057bc <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80057b6:	4b16      	ldr	r3, [pc, #88]	; (8005810 <xTaskResumeAll+0x12c>)
 80057b8:	2201      	movs	r2, #1
 80057ba:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	3b01      	subs	r3, #1
 80057c0:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d1f1      	bne.n	80057ac <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 80057c8:	4b12      	ldr	r3, [pc, #72]	; (8005814 <xTaskResumeAll+0x130>)
 80057ca:	2200      	movs	r2, #0
 80057cc:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80057ce:	4b10      	ldr	r3, [pc, #64]	; (8005810 <xTaskResumeAll+0x12c>)
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d009      	beq.n	80057ea <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80057d6:	2301      	movs	r3, #1
 80057d8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80057da:	4b0f      	ldr	r3, [pc, #60]	; (8005818 <xTaskResumeAll+0x134>)
 80057dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80057e0:	601a      	str	r2, [r3, #0]
 80057e2:	f3bf 8f4f 	dsb	sy
 80057e6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80057ea:	f000 fc6f 	bl	80060cc <vPortExitCritical>

	return xAlreadyYielded;
 80057ee:	68bb      	ldr	r3, [r7, #8]
}
 80057f0:	4618      	mov	r0, r3
 80057f2:	3710      	adds	r7, #16
 80057f4:	46bd      	mov	sp, r7
 80057f6:	bd80      	pop	{r7, pc}
 80057f8:	20000658 	.word	0x20000658
 80057fc:	20000630 	.word	0x20000630
 8005800:	200005f0 	.word	0x200005f0
 8005804:	20000638 	.word	0x20000638
 8005808:	20000534 	.word	0x20000534
 800580c:	20000530 	.word	0x20000530
 8005810:	20000644 	.word	0x20000644
 8005814:	20000640 	.word	0x20000640
 8005818:	e000ed04 	.word	0xe000ed04

0800581c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800581c:	b580      	push	{r7, lr}
 800581e:	b086      	sub	sp, #24
 8005820:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005822:	2300      	movs	r3, #0
 8005824:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005826:	4b51      	ldr	r3, [pc, #324]	; (800596c <xTaskIncrementTick+0x150>)
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	2b00      	cmp	r3, #0
 800582c:	f040 808d 	bne.w	800594a <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005830:	4b4f      	ldr	r3, [pc, #316]	; (8005970 <xTaskIncrementTick+0x154>)
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	3301      	adds	r3, #1
 8005836:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005838:	4a4d      	ldr	r2, [pc, #308]	; (8005970 <xTaskIncrementTick+0x154>)
 800583a:	693b      	ldr	r3, [r7, #16]
 800583c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800583e:	693b      	ldr	r3, [r7, #16]
 8005840:	2b00      	cmp	r3, #0
 8005842:	d120      	bne.n	8005886 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8005844:	4b4b      	ldr	r3, [pc, #300]	; (8005974 <xTaskIncrementTick+0x158>)
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	2b00      	cmp	r3, #0
 800584c:	d00a      	beq.n	8005864 <xTaskIncrementTick+0x48>
	__asm volatile
 800584e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005852:	f383 8811 	msr	BASEPRI, r3
 8005856:	f3bf 8f6f 	isb	sy
 800585a:	f3bf 8f4f 	dsb	sy
 800585e:	603b      	str	r3, [r7, #0]
}
 8005860:	bf00      	nop
 8005862:	e7fe      	b.n	8005862 <xTaskIncrementTick+0x46>
 8005864:	4b43      	ldr	r3, [pc, #268]	; (8005974 <xTaskIncrementTick+0x158>)
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	60fb      	str	r3, [r7, #12]
 800586a:	4b43      	ldr	r3, [pc, #268]	; (8005978 <xTaskIncrementTick+0x15c>)
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	4a41      	ldr	r2, [pc, #260]	; (8005974 <xTaskIncrementTick+0x158>)
 8005870:	6013      	str	r3, [r2, #0]
 8005872:	4a41      	ldr	r2, [pc, #260]	; (8005978 <xTaskIncrementTick+0x15c>)
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	6013      	str	r3, [r2, #0]
 8005878:	4b40      	ldr	r3, [pc, #256]	; (800597c <xTaskIncrementTick+0x160>)
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	3301      	adds	r3, #1
 800587e:	4a3f      	ldr	r2, [pc, #252]	; (800597c <xTaskIncrementTick+0x160>)
 8005880:	6013      	str	r3, [r2, #0]
 8005882:	f000 fa43 	bl	8005d0c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005886:	4b3e      	ldr	r3, [pc, #248]	; (8005980 <xTaskIncrementTick+0x164>)
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	693a      	ldr	r2, [r7, #16]
 800588c:	429a      	cmp	r2, r3
 800588e:	d34d      	bcc.n	800592c <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005890:	4b38      	ldr	r3, [pc, #224]	; (8005974 <xTaskIncrementTick+0x158>)
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	2b00      	cmp	r3, #0
 8005898:	d101      	bne.n	800589e <xTaskIncrementTick+0x82>
 800589a:	2301      	movs	r3, #1
 800589c:	e000      	b.n	80058a0 <xTaskIncrementTick+0x84>
 800589e:	2300      	movs	r3, #0
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d004      	beq.n	80058ae <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80058a4:	4b36      	ldr	r3, [pc, #216]	; (8005980 <xTaskIncrementTick+0x164>)
 80058a6:	f04f 32ff 	mov.w	r2, #4294967295
 80058aa:	601a      	str	r2, [r3, #0]
					break;
 80058ac:	e03e      	b.n	800592c <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80058ae:	4b31      	ldr	r3, [pc, #196]	; (8005974 <xTaskIncrementTick+0x158>)
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	68db      	ldr	r3, [r3, #12]
 80058b4:	68db      	ldr	r3, [r3, #12]
 80058b6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80058b8:	68bb      	ldr	r3, [r7, #8]
 80058ba:	685b      	ldr	r3, [r3, #4]
 80058bc:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80058be:	693a      	ldr	r2, [r7, #16]
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	429a      	cmp	r2, r3
 80058c4:	d203      	bcs.n	80058ce <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80058c6:	4a2e      	ldr	r2, [pc, #184]	; (8005980 <xTaskIncrementTick+0x164>)
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	6013      	str	r3, [r2, #0]
						break;
 80058cc:	e02e      	b.n	800592c <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80058ce:	68bb      	ldr	r3, [r7, #8]
 80058d0:	3304      	adds	r3, #4
 80058d2:	4618      	mov	r0, r3
 80058d4:	f7ff fc90 	bl	80051f8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80058d8:	68bb      	ldr	r3, [r7, #8]
 80058da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d004      	beq.n	80058ea <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80058e0:	68bb      	ldr	r3, [r7, #8]
 80058e2:	3318      	adds	r3, #24
 80058e4:	4618      	mov	r0, r3
 80058e6:	f7ff fc87 	bl	80051f8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80058ea:	68bb      	ldr	r3, [r7, #8]
 80058ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058ee:	2201      	movs	r2, #1
 80058f0:	409a      	lsls	r2, r3
 80058f2:	4b24      	ldr	r3, [pc, #144]	; (8005984 <xTaskIncrementTick+0x168>)
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	4313      	orrs	r3, r2
 80058f8:	4a22      	ldr	r2, [pc, #136]	; (8005984 <xTaskIncrementTick+0x168>)
 80058fa:	6013      	str	r3, [r2, #0]
 80058fc:	68bb      	ldr	r3, [r7, #8]
 80058fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005900:	4613      	mov	r3, r2
 8005902:	009b      	lsls	r3, r3, #2
 8005904:	4413      	add	r3, r2
 8005906:	009b      	lsls	r3, r3, #2
 8005908:	4a1f      	ldr	r2, [pc, #124]	; (8005988 <xTaskIncrementTick+0x16c>)
 800590a:	441a      	add	r2, r3
 800590c:	68bb      	ldr	r3, [r7, #8]
 800590e:	3304      	adds	r3, #4
 8005910:	4619      	mov	r1, r3
 8005912:	4610      	mov	r0, r2
 8005914:	f7ff fc15 	bl	8005142 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005918:	68bb      	ldr	r3, [r7, #8]
 800591a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800591c:	4b1b      	ldr	r3, [pc, #108]	; (800598c <xTaskIncrementTick+0x170>)
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005922:	429a      	cmp	r2, r3
 8005924:	d3b4      	bcc.n	8005890 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8005926:	2301      	movs	r3, #1
 8005928:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800592a:	e7b1      	b.n	8005890 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800592c:	4b17      	ldr	r3, [pc, #92]	; (800598c <xTaskIncrementTick+0x170>)
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005932:	4915      	ldr	r1, [pc, #84]	; (8005988 <xTaskIncrementTick+0x16c>)
 8005934:	4613      	mov	r3, r2
 8005936:	009b      	lsls	r3, r3, #2
 8005938:	4413      	add	r3, r2
 800593a:	009b      	lsls	r3, r3, #2
 800593c:	440b      	add	r3, r1
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	2b01      	cmp	r3, #1
 8005942:	d907      	bls.n	8005954 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 8005944:	2301      	movs	r3, #1
 8005946:	617b      	str	r3, [r7, #20]
 8005948:	e004      	b.n	8005954 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800594a:	4b11      	ldr	r3, [pc, #68]	; (8005990 <xTaskIncrementTick+0x174>)
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	3301      	adds	r3, #1
 8005950:	4a0f      	ldr	r2, [pc, #60]	; (8005990 <xTaskIncrementTick+0x174>)
 8005952:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8005954:	4b0f      	ldr	r3, [pc, #60]	; (8005994 <xTaskIncrementTick+0x178>)
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	2b00      	cmp	r3, #0
 800595a:	d001      	beq.n	8005960 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 800595c:	2301      	movs	r3, #1
 800595e:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8005960:	697b      	ldr	r3, [r7, #20]
}
 8005962:	4618      	mov	r0, r3
 8005964:	3718      	adds	r7, #24
 8005966:	46bd      	mov	sp, r7
 8005968:	bd80      	pop	{r7, pc}
 800596a:	bf00      	nop
 800596c:	20000658 	.word	0x20000658
 8005970:	20000634 	.word	0x20000634
 8005974:	200005e8 	.word	0x200005e8
 8005978:	200005ec 	.word	0x200005ec
 800597c:	20000648 	.word	0x20000648
 8005980:	20000650 	.word	0x20000650
 8005984:	20000638 	.word	0x20000638
 8005988:	20000534 	.word	0x20000534
 800598c:	20000530 	.word	0x20000530
 8005990:	20000640 	.word	0x20000640
 8005994:	20000644 	.word	0x20000644

08005998 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005998:	b480      	push	{r7}
 800599a:	b087      	sub	sp, #28
 800599c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800599e:	4b29      	ldr	r3, [pc, #164]	; (8005a44 <vTaskSwitchContext+0xac>)
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d003      	beq.n	80059ae <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80059a6:	4b28      	ldr	r3, [pc, #160]	; (8005a48 <vTaskSwitchContext+0xb0>)
 80059a8:	2201      	movs	r2, #1
 80059aa:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80059ac:	e044      	b.n	8005a38 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 80059ae:	4b26      	ldr	r3, [pc, #152]	; (8005a48 <vTaskSwitchContext+0xb0>)
 80059b0:	2200      	movs	r2, #0
 80059b2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80059b4:	4b25      	ldr	r3, [pc, #148]	; (8005a4c <vTaskSwitchContext+0xb4>)
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	fab3 f383 	clz	r3, r3
 80059c0:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80059c2:	7afb      	ldrb	r3, [r7, #11]
 80059c4:	f1c3 031f 	rsb	r3, r3, #31
 80059c8:	617b      	str	r3, [r7, #20]
 80059ca:	4921      	ldr	r1, [pc, #132]	; (8005a50 <vTaskSwitchContext+0xb8>)
 80059cc:	697a      	ldr	r2, [r7, #20]
 80059ce:	4613      	mov	r3, r2
 80059d0:	009b      	lsls	r3, r3, #2
 80059d2:	4413      	add	r3, r2
 80059d4:	009b      	lsls	r3, r3, #2
 80059d6:	440b      	add	r3, r1
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d10a      	bne.n	80059f4 <vTaskSwitchContext+0x5c>
	__asm volatile
 80059de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059e2:	f383 8811 	msr	BASEPRI, r3
 80059e6:	f3bf 8f6f 	isb	sy
 80059ea:	f3bf 8f4f 	dsb	sy
 80059ee:	607b      	str	r3, [r7, #4]
}
 80059f0:	bf00      	nop
 80059f2:	e7fe      	b.n	80059f2 <vTaskSwitchContext+0x5a>
 80059f4:	697a      	ldr	r2, [r7, #20]
 80059f6:	4613      	mov	r3, r2
 80059f8:	009b      	lsls	r3, r3, #2
 80059fa:	4413      	add	r3, r2
 80059fc:	009b      	lsls	r3, r3, #2
 80059fe:	4a14      	ldr	r2, [pc, #80]	; (8005a50 <vTaskSwitchContext+0xb8>)
 8005a00:	4413      	add	r3, r2
 8005a02:	613b      	str	r3, [r7, #16]
 8005a04:	693b      	ldr	r3, [r7, #16]
 8005a06:	685b      	ldr	r3, [r3, #4]
 8005a08:	685a      	ldr	r2, [r3, #4]
 8005a0a:	693b      	ldr	r3, [r7, #16]
 8005a0c:	605a      	str	r2, [r3, #4]
 8005a0e:	693b      	ldr	r3, [r7, #16]
 8005a10:	685a      	ldr	r2, [r3, #4]
 8005a12:	693b      	ldr	r3, [r7, #16]
 8005a14:	3308      	adds	r3, #8
 8005a16:	429a      	cmp	r2, r3
 8005a18:	d104      	bne.n	8005a24 <vTaskSwitchContext+0x8c>
 8005a1a:	693b      	ldr	r3, [r7, #16]
 8005a1c:	685b      	ldr	r3, [r3, #4]
 8005a1e:	685a      	ldr	r2, [r3, #4]
 8005a20:	693b      	ldr	r3, [r7, #16]
 8005a22:	605a      	str	r2, [r3, #4]
 8005a24:	693b      	ldr	r3, [r7, #16]
 8005a26:	685b      	ldr	r3, [r3, #4]
 8005a28:	68db      	ldr	r3, [r3, #12]
 8005a2a:	4a0a      	ldr	r2, [pc, #40]	; (8005a54 <vTaskSwitchContext+0xbc>)
 8005a2c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005a2e:	4b09      	ldr	r3, [pc, #36]	; (8005a54 <vTaskSwitchContext+0xbc>)
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	334c      	adds	r3, #76	; 0x4c
 8005a34:	4a08      	ldr	r2, [pc, #32]	; (8005a58 <vTaskSwitchContext+0xc0>)
 8005a36:	6013      	str	r3, [r2, #0]
}
 8005a38:	bf00      	nop
 8005a3a:	371c      	adds	r7, #28
 8005a3c:	46bd      	mov	sp, r7
 8005a3e:	bc80      	pop	{r7}
 8005a40:	4770      	bx	lr
 8005a42:	bf00      	nop
 8005a44:	20000658 	.word	0x20000658
 8005a48:	20000644 	.word	0x20000644
 8005a4c:	20000638 	.word	0x20000638
 8005a50:	20000534 	.word	0x20000534
 8005a54:	20000530 	.word	0x20000530
 8005a58:	20000014 	.word	0x20000014

08005a5c <vTaskPlaceOnUnorderedEventList>:
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
}
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 8005a5c:	b580      	push	{r7, lr}
 8005a5e:	b086      	sub	sp, #24
 8005a60:	af00      	add	r7, sp, #0
 8005a62:	60f8      	str	r0, [r7, #12]
 8005a64:	60b9      	str	r1, [r7, #8]
 8005a66:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d10a      	bne.n	8005a84 <vTaskPlaceOnUnorderedEventList+0x28>
	__asm volatile
 8005a6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a72:	f383 8811 	msr	BASEPRI, r3
 8005a76:	f3bf 8f6f 	isb	sy
 8005a7a:	f3bf 8f4f 	dsb	sy
 8005a7e:	617b      	str	r3, [r7, #20]
}
 8005a80:	bf00      	nop
 8005a82:	e7fe      	b.n	8005a82 <vTaskPlaceOnUnorderedEventList+0x26>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 8005a84:	4b11      	ldr	r3, [pc, #68]	; (8005acc <vTaskPlaceOnUnorderedEventList+0x70>)
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d10a      	bne.n	8005aa2 <vTaskPlaceOnUnorderedEventList+0x46>
	__asm volatile
 8005a8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a90:	f383 8811 	msr	BASEPRI, r3
 8005a94:	f3bf 8f6f 	isb	sy
 8005a98:	f3bf 8f4f 	dsb	sy
 8005a9c:	613b      	str	r3, [r7, #16]
}
 8005a9e:	bf00      	nop
 8005aa0:	e7fe      	b.n	8005aa0 <vTaskPlaceOnUnorderedEventList+0x44>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8005aa2:	4b0b      	ldr	r3, [pc, #44]	; (8005ad0 <vTaskPlaceOnUnorderedEventList+0x74>)
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	68ba      	ldr	r2, [r7, #8]
 8005aa8:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8005aac:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005aae:	4b08      	ldr	r3, [pc, #32]	; (8005ad0 <vTaskPlaceOnUnorderedEventList+0x74>)
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	3318      	adds	r3, #24
 8005ab4:	4619      	mov	r1, r3
 8005ab6:	68f8      	ldr	r0, [r7, #12]
 8005ab8:	f7ff fb43 	bl	8005142 <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005abc:	2101      	movs	r1, #1
 8005abe:	6878      	ldr	r0, [r7, #4]
 8005ac0:	f000 f97e 	bl	8005dc0 <prvAddCurrentTaskToDelayedList>
}
 8005ac4:	bf00      	nop
 8005ac6:	3718      	adds	r7, #24
 8005ac8:	46bd      	mov	sp, r7
 8005aca:	bd80      	pop	{r7, pc}
 8005acc:	20000658 	.word	0x20000658
 8005ad0:	20000530 	.word	0x20000530

08005ad4 <vTaskRemoveFromUnorderedEventList>:
	return xReturn;
}
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 8005ad4:	b580      	push	{r7, lr}
 8005ad6:	b086      	sub	sp, #24
 8005ad8:	af00      	add	r7, sp, #0
 8005ada:	6078      	str	r0, [r7, #4]
 8005adc:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 8005ade:	4b29      	ldr	r3, [pc, #164]	; (8005b84 <vTaskRemoveFromUnorderedEventList+0xb0>)
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d10a      	bne.n	8005afc <vTaskRemoveFromUnorderedEventList+0x28>
	__asm volatile
 8005ae6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005aea:	f383 8811 	msr	BASEPRI, r3
 8005aee:	f3bf 8f6f 	isb	sy
 8005af2:	f3bf 8f4f 	dsb	sy
 8005af6:	613b      	str	r3, [r7, #16]
}
 8005af8:	bf00      	nop
 8005afa:	e7fe      	b.n	8005afa <vTaskRemoveFromUnorderedEventList+0x26>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8005afc:	683b      	ldr	r3, [r7, #0]
 8005afe:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = ( TCB_t * ) listGET_LIST_ITEM_OWNER( pxEventListItem );
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	68db      	ldr	r3, [r3, #12]
 8005b0a:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 8005b0c:	697b      	ldr	r3, [r7, #20]
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d10a      	bne.n	8005b28 <vTaskRemoveFromUnorderedEventList+0x54>
	__asm volatile
 8005b12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b16:	f383 8811 	msr	BASEPRI, r3
 8005b1a:	f3bf 8f6f 	isb	sy
 8005b1e:	f3bf 8f4f 	dsb	sy
 8005b22:	60fb      	str	r3, [r7, #12]
}
 8005b24:	bf00      	nop
 8005b26:	e7fe      	b.n	8005b26 <vTaskRemoveFromUnorderedEventList+0x52>
	( void ) uxListRemove( pxEventListItem );
 8005b28:	6878      	ldr	r0, [r7, #4]
 8005b2a:	f7ff fb65 	bl	80051f8 <uxListRemove>

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005b2e:	697b      	ldr	r3, [r7, #20]
 8005b30:	3304      	adds	r3, #4
 8005b32:	4618      	mov	r0, r3
 8005b34:	f7ff fb60 	bl	80051f8 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 8005b38:	697b      	ldr	r3, [r7, #20]
 8005b3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b3c:	2201      	movs	r2, #1
 8005b3e:	409a      	lsls	r2, r3
 8005b40:	4b11      	ldr	r3, [pc, #68]	; (8005b88 <vTaskRemoveFromUnorderedEventList+0xb4>)
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	4313      	orrs	r3, r2
 8005b46:	4a10      	ldr	r2, [pc, #64]	; (8005b88 <vTaskRemoveFromUnorderedEventList+0xb4>)
 8005b48:	6013      	str	r3, [r2, #0]
 8005b4a:	697b      	ldr	r3, [r7, #20]
 8005b4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b4e:	4613      	mov	r3, r2
 8005b50:	009b      	lsls	r3, r3, #2
 8005b52:	4413      	add	r3, r2
 8005b54:	009b      	lsls	r3, r3, #2
 8005b56:	4a0d      	ldr	r2, [pc, #52]	; (8005b8c <vTaskRemoveFromUnorderedEventList+0xb8>)
 8005b58:	441a      	add	r2, r3
 8005b5a:	697b      	ldr	r3, [r7, #20]
 8005b5c:	3304      	adds	r3, #4
 8005b5e:	4619      	mov	r1, r3
 8005b60:	4610      	mov	r0, r2
 8005b62:	f7ff faee 	bl	8005142 <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005b66:	697b      	ldr	r3, [r7, #20]
 8005b68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b6a:	4b09      	ldr	r3, [pc, #36]	; (8005b90 <vTaskRemoveFromUnorderedEventList+0xbc>)
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b70:	429a      	cmp	r2, r3
 8005b72:	d902      	bls.n	8005b7a <vTaskRemoveFromUnorderedEventList+0xa6>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 8005b74:	4b07      	ldr	r3, [pc, #28]	; (8005b94 <vTaskRemoveFromUnorderedEventList+0xc0>)
 8005b76:	2201      	movs	r2, #1
 8005b78:	601a      	str	r2, [r3, #0]
	}
}
 8005b7a:	bf00      	nop
 8005b7c:	3718      	adds	r7, #24
 8005b7e:	46bd      	mov	sp, r7
 8005b80:	bd80      	pop	{r7, pc}
 8005b82:	bf00      	nop
 8005b84:	20000658 	.word	0x20000658
 8005b88:	20000638 	.word	0x20000638
 8005b8c:	20000534 	.word	0x20000534
 8005b90:	20000530 	.word	0x20000530
 8005b94:	20000644 	.word	0x20000644

08005b98 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005b98:	b580      	push	{r7, lr}
 8005b9a:	b082      	sub	sp, #8
 8005b9c:	af00      	add	r7, sp, #0
 8005b9e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005ba0:	f000 f852 	bl	8005c48 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005ba4:	4b06      	ldr	r3, [pc, #24]	; (8005bc0 <prvIdleTask+0x28>)
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	2b01      	cmp	r3, #1
 8005baa:	d9f9      	bls.n	8005ba0 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005bac:	4b05      	ldr	r3, [pc, #20]	; (8005bc4 <prvIdleTask+0x2c>)
 8005bae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005bb2:	601a      	str	r2, [r3, #0]
 8005bb4:	f3bf 8f4f 	dsb	sy
 8005bb8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005bbc:	e7f0      	b.n	8005ba0 <prvIdleTask+0x8>
 8005bbe:	bf00      	nop
 8005bc0:	20000534 	.word	0x20000534
 8005bc4:	e000ed04 	.word	0xe000ed04

08005bc8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005bc8:	b580      	push	{r7, lr}
 8005bca:	b082      	sub	sp, #8
 8005bcc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005bce:	2300      	movs	r3, #0
 8005bd0:	607b      	str	r3, [r7, #4]
 8005bd2:	e00c      	b.n	8005bee <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005bd4:	687a      	ldr	r2, [r7, #4]
 8005bd6:	4613      	mov	r3, r2
 8005bd8:	009b      	lsls	r3, r3, #2
 8005bda:	4413      	add	r3, r2
 8005bdc:	009b      	lsls	r3, r3, #2
 8005bde:	4a12      	ldr	r2, [pc, #72]	; (8005c28 <prvInitialiseTaskLists+0x60>)
 8005be0:	4413      	add	r3, r2
 8005be2:	4618      	mov	r0, r3
 8005be4:	f7ff fa82 	bl	80050ec <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	3301      	adds	r3, #1
 8005bec:	607b      	str	r3, [r7, #4]
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	2b06      	cmp	r3, #6
 8005bf2:	d9ef      	bls.n	8005bd4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005bf4:	480d      	ldr	r0, [pc, #52]	; (8005c2c <prvInitialiseTaskLists+0x64>)
 8005bf6:	f7ff fa79 	bl	80050ec <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005bfa:	480d      	ldr	r0, [pc, #52]	; (8005c30 <prvInitialiseTaskLists+0x68>)
 8005bfc:	f7ff fa76 	bl	80050ec <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005c00:	480c      	ldr	r0, [pc, #48]	; (8005c34 <prvInitialiseTaskLists+0x6c>)
 8005c02:	f7ff fa73 	bl	80050ec <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005c06:	480c      	ldr	r0, [pc, #48]	; (8005c38 <prvInitialiseTaskLists+0x70>)
 8005c08:	f7ff fa70 	bl	80050ec <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005c0c:	480b      	ldr	r0, [pc, #44]	; (8005c3c <prvInitialiseTaskLists+0x74>)
 8005c0e:	f7ff fa6d 	bl	80050ec <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005c12:	4b0b      	ldr	r3, [pc, #44]	; (8005c40 <prvInitialiseTaskLists+0x78>)
 8005c14:	4a05      	ldr	r2, [pc, #20]	; (8005c2c <prvInitialiseTaskLists+0x64>)
 8005c16:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005c18:	4b0a      	ldr	r3, [pc, #40]	; (8005c44 <prvInitialiseTaskLists+0x7c>)
 8005c1a:	4a05      	ldr	r2, [pc, #20]	; (8005c30 <prvInitialiseTaskLists+0x68>)
 8005c1c:	601a      	str	r2, [r3, #0]
}
 8005c1e:	bf00      	nop
 8005c20:	3708      	adds	r7, #8
 8005c22:	46bd      	mov	sp, r7
 8005c24:	bd80      	pop	{r7, pc}
 8005c26:	bf00      	nop
 8005c28:	20000534 	.word	0x20000534
 8005c2c:	200005c0 	.word	0x200005c0
 8005c30:	200005d4 	.word	0x200005d4
 8005c34:	200005f0 	.word	0x200005f0
 8005c38:	20000604 	.word	0x20000604
 8005c3c:	2000061c 	.word	0x2000061c
 8005c40:	200005e8 	.word	0x200005e8
 8005c44:	200005ec 	.word	0x200005ec

08005c48 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005c48:	b580      	push	{r7, lr}
 8005c4a:	b082      	sub	sp, #8
 8005c4c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005c4e:	e019      	b.n	8005c84 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005c50:	f000 fa0c 	bl	800606c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8005c54:	4b10      	ldr	r3, [pc, #64]	; (8005c98 <prvCheckTasksWaitingTermination+0x50>)
 8005c56:	68db      	ldr	r3, [r3, #12]
 8005c58:	68db      	ldr	r3, [r3, #12]
 8005c5a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	3304      	adds	r3, #4
 8005c60:	4618      	mov	r0, r3
 8005c62:	f7ff fac9 	bl	80051f8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005c66:	4b0d      	ldr	r3, [pc, #52]	; (8005c9c <prvCheckTasksWaitingTermination+0x54>)
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	3b01      	subs	r3, #1
 8005c6c:	4a0b      	ldr	r2, [pc, #44]	; (8005c9c <prvCheckTasksWaitingTermination+0x54>)
 8005c6e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005c70:	4b0b      	ldr	r3, [pc, #44]	; (8005ca0 <prvCheckTasksWaitingTermination+0x58>)
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	3b01      	subs	r3, #1
 8005c76:	4a0a      	ldr	r2, [pc, #40]	; (8005ca0 <prvCheckTasksWaitingTermination+0x58>)
 8005c78:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005c7a:	f000 fa27 	bl	80060cc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005c7e:	6878      	ldr	r0, [r7, #4]
 8005c80:	f000 f810 	bl	8005ca4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005c84:	4b06      	ldr	r3, [pc, #24]	; (8005ca0 <prvCheckTasksWaitingTermination+0x58>)
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d1e1      	bne.n	8005c50 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005c8c:	bf00      	nop
 8005c8e:	bf00      	nop
 8005c90:	3708      	adds	r7, #8
 8005c92:	46bd      	mov	sp, r7
 8005c94:	bd80      	pop	{r7, pc}
 8005c96:	bf00      	nop
 8005c98:	20000604 	.word	0x20000604
 8005c9c:	20000630 	.word	0x20000630
 8005ca0:	20000618 	.word	0x20000618

08005ca4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005ca4:	b580      	push	{r7, lr}
 8005ca6:	b084      	sub	sp, #16
 8005ca8:	af00      	add	r7, sp, #0
 8005caa:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	334c      	adds	r3, #76	; 0x4c
 8005cb0:	4618      	mov	r0, r3
 8005cb2:	f000 fcb1 	bl	8006618 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d108      	bne.n	8005cd2 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cc4:	4618      	mov	r0, r3
 8005cc6:	f000 fb57 	bl	8006378 <vPortFree>
				vPortFree( pxTCB );
 8005cca:	6878      	ldr	r0, [r7, #4]
 8005ccc:	f000 fb54 	bl	8006378 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005cd0:	e018      	b.n	8005d04 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8005cd8:	2b01      	cmp	r3, #1
 8005cda:	d103      	bne.n	8005ce4 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8005cdc:	6878      	ldr	r0, [r7, #4]
 8005cde:	f000 fb4b 	bl	8006378 <vPortFree>
	}
 8005ce2:	e00f      	b.n	8005d04 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8005cea:	2b02      	cmp	r3, #2
 8005cec:	d00a      	beq.n	8005d04 <prvDeleteTCB+0x60>
	__asm volatile
 8005cee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cf2:	f383 8811 	msr	BASEPRI, r3
 8005cf6:	f3bf 8f6f 	isb	sy
 8005cfa:	f3bf 8f4f 	dsb	sy
 8005cfe:	60fb      	str	r3, [r7, #12]
}
 8005d00:	bf00      	nop
 8005d02:	e7fe      	b.n	8005d02 <prvDeleteTCB+0x5e>
	}
 8005d04:	bf00      	nop
 8005d06:	3710      	adds	r7, #16
 8005d08:	46bd      	mov	sp, r7
 8005d0a:	bd80      	pop	{r7, pc}

08005d0c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005d0c:	b480      	push	{r7}
 8005d0e:	b083      	sub	sp, #12
 8005d10:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005d12:	4b0e      	ldr	r3, [pc, #56]	; (8005d4c <prvResetNextTaskUnblockTime+0x40>)
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d101      	bne.n	8005d20 <prvResetNextTaskUnblockTime+0x14>
 8005d1c:	2301      	movs	r3, #1
 8005d1e:	e000      	b.n	8005d22 <prvResetNextTaskUnblockTime+0x16>
 8005d20:	2300      	movs	r3, #0
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d004      	beq.n	8005d30 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005d26:	4b0a      	ldr	r3, [pc, #40]	; (8005d50 <prvResetNextTaskUnblockTime+0x44>)
 8005d28:	f04f 32ff 	mov.w	r2, #4294967295
 8005d2c:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005d2e:	e008      	b.n	8005d42 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8005d30:	4b06      	ldr	r3, [pc, #24]	; (8005d4c <prvResetNextTaskUnblockTime+0x40>)
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	68db      	ldr	r3, [r3, #12]
 8005d36:	68db      	ldr	r3, [r3, #12]
 8005d38:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	685b      	ldr	r3, [r3, #4]
 8005d3e:	4a04      	ldr	r2, [pc, #16]	; (8005d50 <prvResetNextTaskUnblockTime+0x44>)
 8005d40:	6013      	str	r3, [r2, #0]
}
 8005d42:	bf00      	nop
 8005d44:	370c      	adds	r7, #12
 8005d46:	46bd      	mov	sp, r7
 8005d48:	bc80      	pop	{r7}
 8005d4a:	4770      	bx	lr
 8005d4c:	200005e8 	.word	0x200005e8
 8005d50:	20000650 	.word	0x20000650

08005d54 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005d54:	b480      	push	{r7}
 8005d56:	b083      	sub	sp, #12
 8005d58:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005d5a:	4b0b      	ldr	r3, [pc, #44]	; (8005d88 <xTaskGetSchedulerState+0x34>)
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d102      	bne.n	8005d68 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005d62:	2301      	movs	r3, #1
 8005d64:	607b      	str	r3, [r7, #4]
 8005d66:	e008      	b.n	8005d7a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005d68:	4b08      	ldr	r3, [pc, #32]	; (8005d8c <xTaskGetSchedulerState+0x38>)
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d102      	bne.n	8005d76 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005d70:	2302      	movs	r3, #2
 8005d72:	607b      	str	r3, [r7, #4]
 8005d74:	e001      	b.n	8005d7a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005d76:	2300      	movs	r3, #0
 8005d78:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005d7a:	687b      	ldr	r3, [r7, #4]
	}
 8005d7c:	4618      	mov	r0, r3
 8005d7e:	370c      	adds	r7, #12
 8005d80:	46bd      	mov	sp, r7
 8005d82:	bc80      	pop	{r7}
 8005d84:	4770      	bx	lr
 8005d86:	bf00      	nop
 8005d88:	2000063c 	.word	0x2000063c
 8005d8c:	20000658 	.word	0x20000658

08005d90 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 8005d90:	b480      	push	{r7}
 8005d92:	b083      	sub	sp, #12
 8005d94:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 8005d96:	4b09      	ldr	r3, [pc, #36]	; (8005dbc <uxTaskResetEventItemValue+0x2c>)
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	699b      	ldr	r3, [r3, #24]
 8005d9c:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005d9e:	4b07      	ldr	r3, [pc, #28]	; (8005dbc <uxTaskResetEventItemValue+0x2c>)
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005da4:	4b05      	ldr	r3, [pc, #20]	; (8005dbc <uxTaskResetEventItemValue+0x2c>)
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	f1c2 0207 	rsb	r2, r2, #7
 8005dac:	619a      	str	r2, [r3, #24]

	return uxReturn;
 8005dae:	687b      	ldr	r3, [r7, #4]
}
 8005db0:	4618      	mov	r0, r3
 8005db2:	370c      	adds	r7, #12
 8005db4:	46bd      	mov	sp, r7
 8005db6:	bc80      	pop	{r7}
 8005db8:	4770      	bx	lr
 8005dba:	bf00      	nop
 8005dbc:	20000530 	.word	0x20000530

08005dc0 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005dc0:	b580      	push	{r7, lr}
 8005dc2:	b084      	sub	sp, #16
 8005dc4:	af00      	add	r7, sp, #0
 8005dc6:	6078      	str	r0, [r7, #4]
 8005dc8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005dca:	4b29      	ldr	r3, [pc, #164]	; (8005e70 <prvAddCurrentTaskToDelayedList+0xb0>)
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005dd0:	4b28      	ldr	r3, [pc, #160]	; (8005e74 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	3304      	adds	r3, #4
 8005dd6:	4618      	mov	r0, r3
 8005dd8:	f7ff fa0e 	bl	80051f8 <uxListRemove>
 8005ddc:	4603      	mov	r3, r0
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d10b      	bne.n	8005dfa <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8005de2:	4b24      	ldr	r3, [pc, #144]	; (8005e74 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005de8:	2201      	movs	r2, #1
 8005dea:	fa02 f303 	lsl.w	r3, r2, r3
 8005dee:	43da      	mvns	r2, r3
 8005df0:	4b21      	ldr	r3, [pc, #132]	; (8005e78 <prvAddCurrentTaskToDelayedList+0xb8>)
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	4013      	ands	r3, r2
 8005df6:	4a20      	ldr	r2, [pc, #128]	; (8005e78 <prvAddCurrentTaskToDelayedList+0xb8>)
 8005df8:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e00:	d10a      	bne.n	8005e18 <prvAddCurrentTaskToDelayedList+0x58>
 8005e02:	683b      	ldr	r3, [r7, #0]
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d007      	beq.n	8005e18 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005e08:	4b1a      	ldr	r3, [pc, #104]	; (8005e74 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	3304      	adds	r3, #4
 8005e0e:	4619      	mov	r1, r3
 8005e10:	481a      	ldr	r0, [pc, #104]	; (8005e7c <prvAddCurrentTaskToDelayedList+0xbc>)
 8005e12:	f7ff f996 	bl	8005142 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005e16:	e026      	b.n	8005e66 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005e18:	68fa      	ldr	r2, [r7, #12]
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	4413      	add	r3, r2
 8005e1e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005e20:	4b14      	ldr	r3, [pc, #80]	; (8005e74 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	68ba      	ldr	r2, [r7, #8]
 8005e26:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005e28:	68ba      	ldr	r2, [r7, #8]
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	429a      	cmp	r2, r3
 8005e2e:	d209      	bcs.n	8005e44 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005e30:	4b13      	ldr	r3, [pc, #76]	; (8005e80 <prvAddCurrentTaskToDelayedList+0xc0>)
 8005e32:	681a      	ldr	r2, [r3, #0]
 8005e34:	4b0f      	ldr	r3, [pc, #60]	; (8005e74 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	3304      	adds	r3, #4
 8005e3a:	4619      	mov	r1, r3
 8005e3c:	4610      	mov	r0, r2
 8005e3e:	f7ff f9a3 	bl	8005188 <vListInsert>
}
 8005e42:	e010      	b.n	8005e66 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005e44:	4b0f      	ldr	r3, [pc, #60]	; (8005e84 <prvAddCurrentTaskToDelayedList+0xc4>)
 8005e46:	681a      	ldr	r2, [r3, #0]
 8005e48:	4b0a      	ldr	r3, [pc, #40]	; (8005e74 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	3304      	adds	r3, #4
 8005e4e:	4619      	mov	r1, r3
 8005e50:	4610      	mov	r0, r2
 8005e52:	f7ff f999 	bl	8005188 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005e56:	4b0c      	ldr	r3, [pc, #48]	; (8005e88 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	68ba      	ldr	r2, [r7, #8]
 8005e5c:	429a      	cmp	r2, r3
 8005e5e:	d202      	bcs.n	8005e66 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8005e60:	4a09      	ldr	r2, [pc, #36]	; (8005e88 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005e62:	68bb      	ldr	r3, [r7, #8]
 8005e64:	6013      	str	r3, [r2, #0]
}
 8005e66:	bf00      	nop
 8005e68:	3710      	adds	r7, #16
 8005e6a:	46bd      	mov	sp, r7
 8005e6c:	bd80      	pop	{r7, pc}
 8005e6e:	bf00      	nop
 8005e70:	20000634 	.word	0x20000634
 8005e74:	20000530 	.word	0x20000530
 8005e78:	20000638 	.word	0x20000638
 8005e7c:	2000061c 	.word	0x2000061c
 8005e80:	200005ec 	.word	0x200005ec
 8005e84:	200005e8 	.word	0x200005e8
 8005e88:	20000650 	.word	0x20000650

08005e8c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005e8c:	b480      	push	{r7}
 8005e8e:	b085      	sub	sp, #20
 8005e90:	af00      	add	r7, sp, #0
 8005e92:	60f8      	str	r0, [r7, #12]
 8005e94:	60b9      	str	r1, [r7, #8]
 8005e96:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	3b04      	subs	r3, #4
 8005e9c:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005ea4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	3b04      	subs	r3, #4
 8005eaa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005eac:	68bb      	ldr	r3, [r7, #8]
 8005eae:	f023 0201 	bic.w	r2, r3, #1
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	3b04      	subs	r3, #4
 8005eba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005ebc:	4a08      	ldr	r2, [pc, #32]	; (8005ee0 <pxPortInitialiseStack+0x54>)
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	3b14      	subs	r3, #20
 8005ec6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005ec8:	687a      	ldr	r2, [r7, #4]
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	3b20      	subs	r3, #32
 8005ed2:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005ed4:	68fb      	ldr	r3, [r7, #12]
}
 8005ed6:	4618      	mov	r0, r3
 8005ed8:	3714      	adds	r7, #20
 8005eda:	46bd      	mov	sp, r7
 8005edc:	bc80      	pop	{r7}
 8005ede:	4770      	bx	lr
 8005ee0:	08005ee5 	.word	0x08005ee5

08005ee4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005ee4:	b480      	push	{r7}
 8005ee6:	b085      	sub	sp, #20
 8005ee8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8005eea:	2300      	movs	r3, #0
 8005eec:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005eee:	4b12      	ldr	r3, [pc, #72]	; (8005f38 <prvTaskExitError+0x54>)
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ef6:	d00a      	beq.n	8005f0e <prvTaskExitError+0x2a>
	__asm volatile
 8005ef8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005efc:	f383 8811 	msr	BASEPRI, r3
 8005f00:	f3bf 8f6f 	isb	sy
 8005f04:	f3bf 8f4f 	dsb	sy
 8005f08:	60fb      	str	r3, [r7, #12]
}
 8005f0a:	bf00      	nop
 8005f0c:	e7fe      	b.n	8005f0c <prvTaskExitError+0x28>
	__asm volatile
 8005f0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f12:	f383 8811 	msr	BASEPRI, r3
 8005f16:	f3bf 8f6f 	isb	sy
 8005f1a:	f3bf 8f4f 	dsb	sy
 8005f1e:	60bb      	str	r3, [r7, #8]
}
 8005f20:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005f22:	bf00      	nop
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d0fc      	beq.n	8005f24 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005f2a:	bf00      	nop
 8005f2c:	bf00      	nop
 8005f2e:	3714      	adds	r7, #20
 8005f30:	46bd      	mov	sp, r7
 8005f32:	bc80      	pop	{r7}
 8005f34:	4770      	bx	lr
 8005f36:	bf00      	nop
 8005f38:	20000010 	.word	0x20000010
 8005f3c:	00000000 	.word	0x00000000

08005f40 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005f40:	4b07      	ldr	r3, [pc, #28]	; (8005f60 <pxCurrentTCBConst2>)
 8005f42:	6819      	ldr	r1, [r3, #0]
 8005f44:	6808      	ldr	r0, [r1, #0]
 8005f46:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8005f4a:	f380 8809 	msr	PSP, r0
 8005f4e:	f3bf 8f6f 	isb	sy
 8005f52:	f04f 0000 	mov.w	r0, #0
 8005f56:	f380 8811 	msr	BASEPRI, r0
 8005f5a:	f04e 0e0d 	orr.w	lr, lr, #13
 8005f5e:	4770      	bx	lr

08005f60 <pxCurrentTCBConst2>:
 8005f60:	20000530 	.word	0x20000530
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005f64:	bf00      	nop
 8005f66:	bf00      	nop

08005f68 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8005f68:	4806      	ldr	r0, [pc, #24]	; (8005f84 <prvPortStartFirstTask+0x1c>)
 8005f6a:	6800      	ldr	r0, [r0, #0]
 8005f6c:	6800      	ldr	r0, [r0, #0]
 8005f6e:	f380 8808 	msr	MSP, r0
 8005f72:	b662      	cpsie	i
 8005f74:	b661      	cpsie	f
 8005f76:	f3bf 8f4f 	dsb	sy
 8005f7a:	f3bf 8f6f 	isb	sy
 8005f7e:	df00      	svc	0
 8005f80:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8005f82:	bf00      	nop
 8005f84:	e000ed08 	.word	0xe000ed08

08005f88 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005f88:	b580      	push	{r7, lr}
 8005f8a:	b084      	sub	sp, #16
 8005f8c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005f8e:	4b32      	ldr	r3, [pc, #200]	; (8006058 <xPortStartScheduler+0xd0>)
 8005f90:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	781b      	ldrb	r3, [r3, #0]
 8005f96:	b2db      	uxtb	r3, r3
 8005f98:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	22ff      	movs	r2, #255	; 0xff
 8005f9e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	781b      	ldrb	r3, [r3, #0]
 8005fa4:	b2db      	uxtb	r3, r3
 8005fa6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005fa8:	78fb      	ldrb	r3, [r7, #3]
 8005faa:	b2db      	uxtb	r3, r3
 8005fac:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005fb0:	b2da      	uxtb	r2, r3
 8005fb2:	4b2a      	ldr	r3, [pc, #168]	; (800605c <xPortStartScheduler+0xd4>)
 8005fb4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005fb6:	4b2a      	ldr	r3, [pc, #168]	; (8006060 <xPortStartScheduler+0xd8>)
 8005fb8:	2207      	movs	r2, #7
 8005fba:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005fbc:	e009      	b.n	8005fd2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8005fbe:	4b28      	ldr	r3, [pc, #160]	; (8006060 <xPortStartScheduler+0xd8>)
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	3b01      	subs	r3, #1
 8005fc4:	4a26      	ldr	r2, [pc, #152]	; (8006060 <xPortStartScheduler+0xd8>)
 8005fc6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005fc8:	78fb      	ldrb	r3, [r7, #3]
 8005fca:	b2db      	uxtb	r3, r3
 8005fcc:	005b      	lsls	r3, r3, #1
 8005fce:	b2db      	uxtb	r3, r3
 8005fd0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005fd2:	78fb      	ldrb	r3, [r7, #3]
 8005fd4:	b2db      	uxtb	r3, r3
 8005fd6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005fda:	2b80      	cmp	r3, #128	; 0x80
 8005fdc:	d0ef      	beq.n	8005fbe <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005fde:	4b20      	ldr	r3, [pc, #128]	; (8006060 <xPortStartScheduler+0xd8>)
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	f1c3 0307 	rsb	r3, r3, #7
 8005fe6:	2b04      	cmp	r3, #4
 8005fe8:	d00a      	beq.n	8006000 <xPortStartScheduler+0x78>
	__asm volatile
 8005fea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fee:	f383 8811 	msr	BASEPRI, r3
 8005ff2:	f3bf 8f6f 	isb	sy
 8005ff6:	f3bf 8f4f 	dsb	sy
 8005ffa:	60bb      	str	r3, [r7, #8]
}
 8005ffc:	bf00      	nop
 8005ffe:	e7fe      	b.n	8005ffe <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006000:	4b17      	ldr	r3, [pc, #92]	; (8006060 <xPortStartScheduler+0xd8>)
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	021b      	lsls	r3, r3, #8
 8006006:	4a16      	ldr	r2, [pc, #88]	; (8006060 <xPortStartScheduler+0xd8>)
 8006008:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800600a:	4b15      	ldr	r3, [pc, #84]	; (8006060 <xPortStartScheduler+0xd8>)
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006012:	4a13      	ldr	r2, [pc, #76]	; (8006060 <xPortStartScheduler+0xd8>)
 8006014:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	b2da      	uxtb	r2, r3
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800601e:	4b11      	ldr	r3, [pc, #68]	; (8006064 <xPortStartScheduler+0xdc>)
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	4a10      	ldr	r2, [pc, #64]	; (8006064 <xPortStartScheduler+0xdc>)
 8006024:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006028:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800602a:	4b0e      	ldr	r3, [pc, #56]	; (8006064 <xPortStartScheduler+0xdc>)
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	4a0d      	ldr	r2, [pc, #52]	; (8006064 <xPortStartScheduler+0xdc>)
 8006030:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8006034:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006036:	f000 f8b9 	bl	80061ac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800603a:	4b0b      	ldr	r3, [pc, #44]	; (8006068 <xPortStartScheduler+0xe0>)
 800603c:	2200      	movs	r2, #0
 800603e:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006040:	f7ff ff92 	bl	8005f68 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006044:	f7ff fca8 	bl	8005998 <vTaskSwitchContext>
	prvTaskExitError();
 8006048:	f7ff ff4c 	bl	8005ee4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800604c:	2300      	movs	r3, #0
}
 800604e:	4618      	mov	r0, r3
 8006050:	3710      	adds	r7, #16
 8006052:	46bd      	mov	sp, r7
 8006054:	bd80      	pop	{r7, pc}
 8006056:	bf00      	nop
 8006058:	e000e400 	.word	0xe000e400
 800605c:	2000065c 	.word	0x2000065c
 8006060:	20000660 	.word	0x20000660
 8006064:	e000ed20 	.word	0xe000ed20
 8006068:	20000010 	.word	0x20000010

0800606c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800606c:	b480      	push	{r7}
 800606e:	b083      	sub	sp, #12
 8006070:	af00      	add	r7, sp, #0
	__asm volatile
 8006072:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006076:	f383 8811 	msr	BASEPRI, r3
 800607a:	f3bf 8f6f 	isb	sy
 800607e:	f3bf 8f4f 	dsb	sy
 8006082:	607b      	str	r3, [r7, #4]
}
 8006084:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006086:	4b0f      	ldr	r3, [pc, #60]	; (80060c4 <vPortEnterCritical+0x58>)
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	3301      	adds	r3, #1
 800608c:	4a0d      	ldr	r2, [pc, #52]	; (80060c4 <vPortEnterCritical+0x58>)
 800608e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006090:	4b0c      	ldr	r3, [pc, #48]	; (80060c4 <vPortEnterCritical+0x58>)
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	2b01      	cmp	r3, #1
 8006096:	d10f      	bne.n	80060b8 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006098:	4b0b      	ldr	r3, [pc, #44]	; (80060c8 <vPortEnterCritical+0x5c>)
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	b2db      	uxtb	r3, r3
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d00a      	beq.n	80060b8 <vPortEnterCritical+0x4c>
	__asm volatile
 80060a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060a6:	f383 8811 	msr	BASEPRI, r3
 80060aa:	f3bf 8f6f 	isb	sy
 80060ae:	f3bf 8f4f 	dsb	sy
 80060b2:	603b      	str	r3, [r7, #0]
}
 80060b4:	bf00      	nop
 80060b6:	e7fe      	b.n	80060b6 <vPortEnterCritical+0x4a>
	}
}
 80060b8:	bf00      	nop
 80060ba:	370c      	adds	r7, #12
 80060bc:	46bd      	mov	sp, r7
 80060be:	bc80      	pop	{r7}
 80060c0:	4770      	bx	lr
 80060c2:	bf00      	nop
 80060c4:	20000010 	.word	0x20000010
 80060c8:	e000ed04 	.word	0xe000ed04

080060cc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80060cc:	b480      	push	{r7}
 80060ce:	b083      	sub	sp, #12
 80060d0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80060d2:	4b11      	ldr	r3, [pc, #68]	; (8006118 <vPortExitCritical+0x4c>)
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d10a      	bne.n	80060f0 <vPortExitCritical+0x24>
	__asm volatile
 80060da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060de:	f383 8811 	msr	BASEPRI, r3
 80060e2:	f3bf 8f6f 	isb	sy
 80060e6:	f3bf 8f4f 	dsb	sy
 80060ea:	607b      	str	r3, [r7, #4]
}
 80060ec:	bf00      	nop
 80060ee:	e7fe      	b.n	80060ee <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80060f0:	4b09      	ldr	r3, [pc, #36]	; (8006118 <vPortExitCritical+0x4c>)
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	3b01      	subs	r3, #1
 80060f6:	4a08      	ldr	r2, [pc, #32]	; (8006118 <vPortExitCritical+0x4c>)
 80060f8:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80060fa:	4b07      	ldr	r3, [pc, #28]	; (8006118 <vPortExitCritical+0x4c>)
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d105      	bne.n	800610e <vPortExitCritical+0x42>
 8006102:	2300      	movs	r3, #0
 8006104:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006106:	683b      	ldr	r3, [r7, #0]
 8006108:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800610c:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800610e:	bf00      	nop
 8006110:	370c      	adds	r7, #12
 8006112:	46bd      	mov	sp, r7
 8006114:	bc80      	pop	{r7}
 8006116:	4770      	bx	lr
 8006118:	20000010 	.word	0x20000010
 800611c:	00000000 	.word	0x00000000

08006120 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006120:	f3ef 8009 	mrs	r0, PSP
 8006124:	f3bf 8f6f 	isb	sy
 8006128:	4b0d      	ldr	r3, [pc, #52]	; (8006160 <pxCurrentTCBConst>)
 800612a:	681a      	ldr	r2, [r3, #0]
 800612c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8006130:	6010      	str	r0, [r2, #0]
 8006132:	e92d 4008 	stmdb	sp!, {r3, lr}
 8006136:	f04f 0050 	mov.w	r0, #80	; 0x50
 800613a:	f380 8811 	msr	BASEPRI, r0
 800613e:	f7ff fc2b 	bl	8005998 <vTaskSwitchContext>
 8006142:	f04f 0000 	mov.w	r0, #0
 8006146:	f380 8811 	msr	BASEPRI, r0
 800614a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800614e:	6819      	ldr	r1, [r3, #0]
 8006150:	6808      	ldr	r0, [r1, #0]
 8006152:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8006156:	f380 8809 	msr	PSP, r0
 800615a:	f3bf 8f6f 	isb	sy
 800615e:	4770      	bx	lr

08006160 <pxCurrentTCBConst>:
 8006160:	20000530 	.word	0x20000530
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006164:	bf00      	nop
 8006166:	bf00      	nop

08006168 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006168:	b580      	push	{r7, lr}
 800616a:	b082      	sub	sp, #8
 800616c:	af00      	add	r7, sp, #0
	__asm volatile
 800616e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006172:	f383 8811 	msr	BASEPRI, r3
 8006176:	f3bf 8f6f 	isb	sy
 800617a:	f3bf 8f4f 	dsb	sy
 800617e:	607b      	str	r3, [r7, #4]
}
 8006180:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006182:	f7ff fb4b 	bl	800581c <xTaskIncrementTick>
 8006186:	4603      	mov	r3, r0
 8006188:	2b00      	cmp	r3, #0
 800618a:	d003      	beq.n	8006194 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800618c:	4b06      	ldr	r3, [pc, #24]	; (80061a8 <SysTick_Handler+0x40>)
 800618e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006192:	601a      	str	r2, [r3, #0]
 8006194:	2300      	movs	r3, #0
 8006196:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006198:	683b      	ldr	r3, [r7, #0]
 800619a:	f383 8811 	msr	BASEPRI, r3
}
 800619e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80061a0:	bf00      	nop
 80061a2:	3708      	adds	r7, #8
 80061a4:	46bd      	mov	sp, r7
 80061a6:	bd80      	pop	{r7, pc}
 80061a8:	e000ed04 	.word	0xe000ed04

080061ac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80061ac:	b480      	push	{r7}
 80061ae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80061b0:	4b0a      	ldr	r3, [pc, #40]	; (80061dc <vPortSetupTimerInterrupt+0x30>)
 80061b2:	2200      	movs	r2, #0
 80061b4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80061b6:	4b0a      	ldr	r3, [pc, #40]	; (80061e0 <vPortSetupTimerInterrupt+0x34>)
 80061b8:	2200      	movs	r2, #0
 80061ba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80061bc:	4b09      	ldr	r3, [pc, #36]	; (80061e4 <vPortSetupTimerInterrupt+0x38>)
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	4a09      	ldr	r2, [pc, #36]	; (80061e8 <vPortSetupTimerInterrupt+0x3c>)
 80061c2:	fba2 2303 	umull	r2, r3, r2, r3
 80061c6:	099b      	lsrs	r3, r3, #6
 80061c8:	4a08      	ldr	r2, [pc, #32]	; (80061ec <vPortSetupTimerInterrupt+0x40>)
 80061ca:	3b01      	subs	r3, #1
 80061cc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80061ce:	4b03      	ldr	r3, [pc, #12]	; (80061dc <vPortSetupTimerInterrupt+0x30>)
 80061d0:	2207      	movs	r2, #7
 80061d2:	601a      	str	r2, [r3, #0]
}
 80061d4:	bf00      	nop
 80061d6:	46bd      	mov	sp, r7
 80061d8:	bc80      	pop	{r7}
 80061da:	4770      	bx	lr
 80061dc:	e000e010 	.word	0xe000e010
 80061e0:	e000e018 	.word	0xe000e018
 80061e4:	20000004 	.word	0x20000004
 80061e8:	10624dd3 	.word	0x10624dd3
 80061ec:	e000e014 	.word	0xe000e014

080061f0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80061f0:	b580      	push	{r7, lr}
 80061f2:	b08a      	sub	sp, #40	; 0x28
 80061f4:	af00      	add	r7, sp, #0
 80061f6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80061f8:	2300      	movs	r3, #0
 80061fa:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80061fc:	f7ff fa64 	bl	80056c8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006200:	4b58      	ldr	r3, [pc, #352]	; (8006364 <pvPortMalloc+0x174>)
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	2b00      	cmp	r3, #0
 8006206:	d101      	bne.n	800620c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006208:	f000 f910 	bl	800642c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800620c:	4b56      	ldr	r3, [pc, #344]	; (8006368 <pvPortMalloc+0x178>)
 800620e:	681a      	ldr	r2, [r3, #0]
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	4013      	ands	r3, r2
 8006214:	2b00      	cmp	r3, #0
 8006216:	f040 808e 	bne.w	8006336 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	2b00      	cmp	r3, #0
 800621e:	d01d      	beq.n	800625c <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8006220:	2208      	movs	r2, #8
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	4413      	add	r3, r2
 8006226:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	f003 0307 	and.w	r3, r3, #7
 800622e:	2b00      	cmp	r3, #0
 8006230:	d014      	beq.n	800625c <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	f023 0307 	bic.w	r3, r3, #7
 8006238:	3308      	adds	r3, #8
 800623a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	f003 0307 	and.w	r3, r3, #7
 8006242:	2b00      	cmp	r3, #0
 8006244:	d00a      	beq.n	800625c <pvPortMalloc+0x6c>
	__asm volatile
 8006246:	f04f 0350 	mov.w	r3, #80	; 0x50
 800624a:	f383 8811 	msr	BASEPRI, r3
 800624e:	f3bf 8f6f 	isb	sy
 8006252:	f3bf 8f4f 	dsb	sy
 8006256:	617b      	str	r3, [r7, #20]
}
 8006258:	bf00      	nop
 800625a:	e7fe      	b.n	800625a <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	2b00      	cmp	r3, #0
 8006260:	d069      	beq.n	8006336 <pvPortMalloc+0x146>
 8006262:	4b42      	ldr	r3, [pc, #264]	; (800636c <pvPortMalloc+0x17c>)
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	687a      	ldr	r2, [r7, #4]
 8006268:	429a      	cmp	r2, r3
 800626a:	d864      	bhi.n	8006336 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800626c:	4b40      	ldr	r3, [pc, #256]	; (8006370 <pvPortMalloc+0x180>)
 800626e:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006270:	4b3f      	ldr	r3, [pc, #252]	; (8006370 <pvPortMalloc+0x180>)
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006276:	e004      	b.n	8006282 <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8006278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800627a:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800627c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006282:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006284:	685b      	ldr	r3, [r3, #4]
 8006286:	687a      	ldr	r2, [r7, #4]
 8006288:	429a      	cmp	r2, r3
 800628a:	d903      	bls.n	8006294 <pvPortMalloc+0xa4>
 800628c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	2b00      	cmp	r3, #0
 8006292:	d1f1      	bne.n	8006278 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006294:	4b33      	ldr	r3, [pc, #204]	; (8006364 <pvPortMalloc+0x174>)
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800629a:	429a      	cmp	r2, r3
 800629c:	d04b      	beq.n	8006336 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800629e:	6a3b      	ldr	r3, [r7, #32]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	2208      	movs	r2, #8
 80062a4:	4413      	add	r3, r2
 80062a6:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80062a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062aa:	681a      	ldr	r2, [r3, #0]
 80062ac:	6a3b      	ldr	r3, [r7, #32]
 80062ae:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80062b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062b2:	685a      	ldr	r2, [r3, #4]
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	1ad2      	subs	r2, r2, r3
 80062b8:	2308      	movs	r3, #8
 80062ba:	005b      	lsls	r3, r3, #1
 80062bc:	429a      	cmp	r2, r3
 80062be:	d91f      	bls.n	8006300 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80062c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	4413      	add	r3, r2
 80062c6:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80062c8:	69bb      	ldr	r3, [r7, #24]
 80062ca:	f003 0307 	and.w	r3, r3, #7
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d00a      	beq.n	80062e8 <pvPortMalloc+0xf8>
	__asm volatile
 80062d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062d6:	f383 8811 	msr	BASEPRI, r3
 80062da:	f3bf 8f6f 	isb	sy
 80062de:	f3bf 8f4f 	dsb	sy
 80062e2:	613b      	str	r3, [r7, #16]
}
 80062e4:	bf00      	nop
 80062e6:	e7fe      	b.n	80062e6 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80062e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062ea:	685a      	ldr	r2, [r3, #4]
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	1ad2      	subs	r2, r2, r3
 80062f0:	69bb      	ldr	r3, [r7, #24]
 80062f2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80062f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062f6:	687a      	ldr	r2, [r7, #4]
 80062f8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80062fa:	69b8      	ldr	r0, [r7, #24]
 80062fc:	f000 f8f8 	bl	80064f0 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006300:	4b1a      	ldr	r3, [pc, #104]	; (800636c <pvPortMalloc+0x17c>)
 8006302:	681a      	ldr	r2, [r3, #0]
 8006304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006306:	685b      	ldr	r3, [r3, #4]
 8006308:	1ad3      	subs	r3, r2, r3
 800630a:	4a18      	ldr	r2, [pc, #96]	; (800636c <pvPortMalloc+0x17c>)
 800630c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800630e:	4b17      	ldr	r3, [pc, #92]	; (800636c <pvPortMalloc+0x17c>)
 8006310:	681a      	ldr	r2, [r3, #0]
 8006312:	4b18      	ldr	r3, [pc, #96]	; (8006374 <pvPortMalloc+0x184>)
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	429a      	cmp	r2, r3
 8006318:	d203      	bcs.n	8006322 <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800631a:	4b14      	ldr	r3, [pc, #80]	; (800636c <pvPortMalloc+0x17c>)
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	4a15      	ldr	r2, [pc, #84]	; (8006374 <pvPortMalloc+0x184>)
 8006320:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006322:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006324:	685a      	ldr	r2, [r3, #4]
 8006326:	4b10      	ldr	r3, [pc, #64]	; (8006368 <pvPortMalloc+0x178>)
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	431a      	orrs	r2, r3
 800632c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800632e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006332:	2200      	movs	r2, #0
 8006334:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006336:	f7ff f9d5 	bl	80056e4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800633a:	69fb      	ldr	r3, [r7, #28]
 800633c:	f003 0307 	and.w	r3, r3, #7
 8006340:	2b00      	cmp	r3, #0
 8006342:	d00a      	beq.n	800635a <pvPortMalloc+0x16a>
	__asm volatile
 8006344:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006348:	f383 8811 	msr	BASEPRI, r3
 800634c:	f3bf 8f6f 	isb	sy
 8006350:	f3bf 8f4f 	dsb	sy
 8006354:	60fb      	str	r3, [r7, #12]
}
 8006356:	bf00      	nop
 8006358:	e7fe      	b.n	8006358 <pvPortMalloc+0x168>
	return pvReturn;
 800635a:	69fb      	ldr	r3, [r7, #28]
}
 800635c:	4618      	mov	r0, r3
 800635e:	3728      	adds	r7, #40	; 0x28
 8006360:	46bd      	mov	sp, r7
 8006362:	bd80      	pop	{r7, pc}
 8006364:	2000126c 	.word	0x2000126c
 8006368:	20001278 	.word	0x20001278
 800636c:	20001270 	.word	0x20001270
 8006370:	20001264 	.word	0x20001264
 8006374:	20001274 	.word	0x20001274

08006378 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006378:	b580      	push	{r7, lr}
 800637a:	b086      	sub	sp, #24
 800637c:	af00      	add	r7, sp, #0
 800637e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	2b00      	cmp	r3, #0
 8006388:	d048      	beq.n	800641c <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800638a:	2308      	movs	r3, #8
 800638c:	425b      	negs	r3, r3
 800638e:	697a      	ldr	r2, [r7, #20]
 8006390:	4413      	add	r3, r2
 8006392:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006394:	697b      	ldr	r3, [r7, #20]
 8006396:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006398:	693b      	ldr	r3, [r7, #16]
 800639a:	685a      	ldr	r2, [r3, #4]
 800639c:	4b21      	ldr	r3, [pc, #132]	; (8006424 <vPortFree+0xac>)
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	4013      	ands	r3, r2
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d10a      	bne.n	80063bc <vPortFree+0x44>
	__asm volatile
 80063a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063aa:	f383 8811 	msr	BASEPRI, r3
 80063ae:	f3bf 8f6f 	isb	sy
 80063b2:	f3bf 8f4f 	dsb	sy
 80063b6:	60fb      	str	r3, [r7, #12]
}
 80063b8:	bf00      	nop
 80063ba:	e7fe      	b.n	80063ba <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80063bc:	693b      	ldr	r3, [r7, #16]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d00a      	beq.n	80063da <vPortFree+0x62>
	__asm volatile
 80063c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063c8:	f383 8811 	msr	BASEPRI, r3
 80063cc:	f3bf 8f6f 	isb	sy
 80063d0:	f3bf 8f4f 	dsb	sy
 80063d4:	60bb      	str	r3, [r7, #8]
}
 80063d6:	bf00      	nop
 80063d8:	e7fe      	b.n	80063d8 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80063da:	693b      	ldr	r3, [r7, #16]
 80063dc:	685a      	ldr	r2, [r3, #4]
 80063de:	4b11      	ldr	r3, [pc, #68]	; (8006424 <vPortFree+0xac>)
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	4013      	ands	r3, r2
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d019      	beq.n	800641c <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80063e8:	693b      	ldr	r3, [r7, #16]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d115      	bne.n	800641c <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80063f0:	693b      	ldr	r3, [r7, #16]
 80063f2:	685a      	ldr	r2, [r3, #4]
 80063f4:	4b0b      	ldr	r3, [pc, #44]	; (8006424 <vPortFree+0xac>)
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	43db      	mvns	r3, r3
 80063fa:	401a      	ands	r2, r3
 80063fc:	693b      	ldr	r3, [r7, #16]
 80063fe:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006400:	f7ff f962 	bl	80056c8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006404:	693b      	ldr	r3, [r7, #16]
 8006406:	685a      	ldr	r2, [r3, #4]
 8006408:	4b07      	ldr	r3, [pc, #28]	; (8006428 <vPortFree+0xb0>)
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	4413      	add	r3, r2
 800640e:	4a06      	ldr	r2, [pc, #24]	; (8006428 <vPortFree+0xb0>)
 8006410:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006412:	6938      	ldr	r0, [r7, #16]
 8006414:	f000 f86c 	bl	80064f0 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8006418:	f7ff f964 	bl	80056e4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800641c:	bf00      	nop
 800641e:	3718      	adds	r7, #24
 8006420:	46bd      	mov	sp, r7
 8006422:	bd80      	pop	{r7, pc}
 8006424:	20001278 	.word	0x20001278
 8006428:	20001270 	.word	0x20001270

0800642c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800642c:	b480      	push	{r7}
 800642e:	b085      	sub	sp, #20
 8006430:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006432:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8006436:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006438:	4b27      	ldr	r3, [pc, #156]	; (80064d8 <prvHeapInit+0xac>)
 800643a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	f003 0307 	and.w	r3, r3, #7
 8006442:	2b00      	cmp	r3, #0
 8006444:	d00c      	beq.n	8006460 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	3307      	adds	r3, #7
 800644a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	f023 0307 	bic.w	r3, r3, #7
 8006452:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006454:	68ba      	ldr	r2, [r7, #8]
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	1ad3      	subs	r3, r2, r3
 800645a:	4a1f      	ldr	r2, [pc, #124]	; (80064d8 <prvHeapInit+0xac>)
 800645c:	4413      	add	r3, r2
 800645e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006464:	4a1d      	ldr	r2, [pc, #116]	; (80064dc <prvHeapInit+0xb0>)
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800646a:	4b1c      	ldr	r3, [pc, #112]	; (80064dc <prvHeapInit+0xb0>)
 800646c:	2200      	movs	r2, #0
 800646e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	68ba      	ldr	r2, [r7, #8]
 8006474:	4413      	add	r3, r2
 8006476:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006478:	2208      	movs	r2, #8
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	1a9b      	subs	r3, r3, r2
 800647e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	f023 0307 	bic.w	r3, r3, #7
 8006486:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	4a15      	ldr	r2, [pc, #84]	; (80064e0 <prvHeapInit+0xb4>)
 800648c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800648e:	4b14      	ldr	r3, [pc, #80]	; (80064e0 <prvHeapInit+0xb4>)
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	2200      	movs	r2, #0
 8006494:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006496:	4b12      	ldr	r3, [pc, #72]	; (80064e0 <prvHeapInit+0xb4>)
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	2200      	movs	r2, #0
 800649c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80064a2:	683b      	ldr	r3, [r7, #0]
 80064a4:	68fa      	ldr	r2, [r7, #12]
 80064a6:	1ad2      	subs	r2, r2, r3
 80064a8:	683b      	ldr	r3, [r7, #0]
 80064aa:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80064ac:	4b0c      	ldr	r3, [pc, #48]	; (80064e0 <prvHeapInit+0xb4>)
 80064ae:	681a      	ldr	r2, [r3, #0]
 80064b0:	683b      	ldr	r3, [r7, #0]
 80064b2:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80064b4:	683b      	ldr	r3, [r7, #0]
 80064b6:	685b      	ldr	r3, [r3, #4]
 80064b8:	4a0a      	ldr	r2, [pc, #40]	; (80064e4 <prvHeapInit+0xb8>)
 80064ba:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80064bc:	683b      	ldr	r3, [r7, #0]
 80064be:	685b      	ldr	r3, [r3, #4]
 80064c0:	4a09      	ldr	r2, [pc, #36]	; (80064e8 <prvHeapInit+0xbc>)
 80064c2:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80064c4:	4b09      	ldr	r3, [pc, #36]	; (80064ec <prvHeapInit+0xc0>)
 80064c6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80064ca:	601a      	str	r2, [r3, #0]
}
 80064cc:	bf00      	nop
 80064ce:	3714      	adds	r7, #20
 80064d0:	46bd      	mov	sp, r7
 80064d2:	bc80      	pop	{r7}
 80064d4:	4770      	bx	lr
 80064d6:	bf00      	nop
 80064d8:	20000664 	.word	0x20000664
 80064dc:	20001264 	.word	0x20001264
 80064e0:	2000126c 	.word	0x2000126c
 80064e4:	20001274 	.word	0x20001274
 80064e8:	20001270 	.word	0x20001270
 80064ec:	20001278 	.word	0x20001278

080064f0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80064f0:	b480      	push	{r7}
 80064f2:	b085      	sub	sp, #20
 80064f4:	af00      	add	r7, sp, #0
 80064f6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80064f8:	4b27      	ldr	r3, [pc, #156]	; (8006598 <prvInsertBlockIntoFreeList+0xa8>)
 80064fa:	60fb      	str	r3, [r7, #12]
 80064fc:	e002      	b.n	8006504 <prvInsertBlockIntoFreeList+0x14>
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	60fb      	str	r3, [r7, #12]
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	687a      	ldr	r2, [r7, #4]
 800650a:	429a      	cmp	r2, r3
 800650c:	d8f7      	bhi.n	80064fe <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	685b      	ldr	r3, [r3, #4]
 8006516:	68ba      	ldr	r2, [r7, #8]
 8006518:	4413      	add	r3, r2
 800651a:	687a      	ldr	r2, [r7, #4]
 800651c:	429a      	cmp	r2, r3
 800651e:	d108      	bne.n	8006532 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	685a      	ldr	r2, [r3, #4]
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	685b      	ldr	r3, [r3, #4]
 8006528:	441a      	add	r2, r3
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	685b      	ldr	r3, [r3, #4]
 800653a:	68ba      	ldr	r2, [r7, #8]
 800653c:	441a      	add	r2, r3
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	429a      	cmp	r2, r3
 8006544:	d118      	bne.n	8006578 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	681a      	ldr	r2, [r3, #0]
 800654a:	4b14      	ldr	r3, [pc, #80]	; (800659c <prvInsertBlockIntoFreeList+0xac>)
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	429a      	cmp	r2, r3
 8006550:	d00d      	beq.n	800656e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	685a      	ldr	r2, [r3, #4]
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	685b      	ldr	r3, [r3, #4]
 800655c:	441a      	add	r2, r3
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	681a      	ldr	r2, [r3, #0]
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	601a      	str	r2, [r3, #0]
 800656c:	e008      	b.n	8006580 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800656e:	4b0b      	ldr	r3, [pc, #44]	; (800659c <prvInsertBlockIntoFreeList+0xac>)
 8006570:	681a      	ldr	r2, [r3, #0]
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	601a      	str	r2, [r3, #0]
 8006576:	e003      	b.n	8006580 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	681a      	ldr	r2, [r3, #0]
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006580:	68fa      	ldr	r2, [r7, #12]
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	429a      	cmp	r2, r3
 8006586:	d002      	beq.n	800658e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	687a      	ldr	r2, [r7, #4]
 800658c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800658e:	bf00      	nop
 8006590:	3714      	adds	r7, #20
 8006592:	46bd      	mov	sp, r7
 8006594:	bc80      	pop	{r7}
 8006596:	4770      	bx	lr
 8006598:	20001264 	.word	0x20001264
 800659c:	2000126c 	.word	0x2000126c

080065a0 <__libc_init_array>:
 80065a0:	b570      	push	{r4, r5, r6, lr}
 80065a2:	2600      	movs	r6, #0
 80065a4:	4d0c      	ldr	r5, [pc, #48]	; (80065d8 <__libc_init_array+0x38>)
 80065a6:	4c0d      	ldr	r4, [pc, #52]	; (80065dc <__libc_init_array+0x3c>)
 80065a8:	1b64      	subs	r4, r4, r5
 80065aa:	10a4      	asrs	r4, r4, #2
 80065ac:	42a6      	cmp	r6, r4
 80065ae:	d109      	bne.n	80065c4 <__libc_init_array+0x24>
 80065b0:	f000 f8e2 	bl	8006778 <_init>
 80065b4:	2600      	movs	r6, #0
 80065b6:	4d0a      	ldr	r5, [pc, #40]	; (80065e0 <__libc_init_array+0x40>)
 80065b8:	4c0a      	ldr	r4, [pc, #40]	; (80065e4 <__libc_init_array+0x44>)
 80065ba:	1b64      	subs	r4, r4, r5
 80065bc:	10a4      	asrs	r4, r4, #2
 80065be:	42a6      	cmp	r6, r4
 80065c0:	d105      	bne.n	80065ce <__libc_init_array+0x2e>
 80065c2:	bd70      	pop	{r4, r5, r6, pc}
 80065c4:	f855 3b04 	ldr.w	r3, [r5], #4
 80065c8:	4798      	blx	r3
 80065ca:	3601      	adds	r6, #1
 80065cc:	e7ee      	b.n	80065ac <__libc_init_array+0xc>
 80065ce:	f855 3b04 	ldr.w	r3, [r5], #4
 80065d2:	4798      	blx	r3
 80065d4:	3601      	adds	r6, #1
 80065d6:	e7f2      	b.n	80065be <__libc_init_array+0x1e>
 80065d8:	08006824 	.word	0x08006824
 80065dc:	08006824 	.word	0x08006824
 80065e0:	08006824 	.word	0x08006824
 80065e4:	08006828 	.word	0x08006828

080065e8 <__retarget_lock_acquire_recursive>:
 80065e8:	4770      	bx	lr

080065ea <__retarget_lock_release_recursive>:
 80065ea:	4770      	bx	lr

080065ec <memset>:
 80065ec:	4603      	mov	r3, r0
 80065ee:	4402      	add	r2, r0
 80065f0:	4293      	cmp	r3, r2
 80065f2:	d100      	bne.n	80065f6 <memset+0xa>
 80065f4:	4770      	bx	lr
 80065f6:	f803 1b01 	strb.w	r1, [r3], #1
 80065fa:	e7f9      	b.n	80065f0 <memset+0x4>

080065fc <cleanup_glue>:
 80065fc:	b538      	push	{r3, r4, r5, lr}
 80065fe:	460c      	mov	r4, r1
 8006600:	6809      	ldr	r1, [r1, #0]
 8006602:	4605      	mov	r5, r0
 8006604:	b109      	cbz	r1, 800660a <cleanup_glue+0xe>
 8006606:	f7ff fff9 	bl	80065fc <cleanup_glue>
 800660a:	4621      	mov	r1, r4
 800660c:	4628      	mov	r0, r5
 800660e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006612:	f000 b869 	b.w	80066e8 <_free_r>
	...

08006618 <_reclaim_reent>:
 8006618:	4b2c      	ldr	r3, [pc, #176]	; (80066cc <_reclaim_reent+0xb4>)
 800661a:	b570      	push	{r4, r5, r6, lr}
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	4604      	mov	r4, r0
 8006620:	4283      	cmp	r3, r0
 8006622:	d051      	beq.n	80066c8 <_reclaim_reent+0xb0>
 8006624:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8006626:	b143      	cbz	r3, 800663a <_reclaim_reent+0x22>
 8006628:	68db      	ldr	r3, [r3, #12]
 800662a:	2b00      	cmp	r3, #0
 800662c:	d14a      	bne.n	80066c4 <_reclaim_reent+0xac>
 800662e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006630:	6819      	ldr	r1, [r3, #0]
 8006632:	b111      	cbz	r1, 800663a <_reclaim_reent+0x22>
 8006634:	4620      	mov	r0, r4
 8006636:	f000 f857 	bl	80066e8 <_free_r>
 800663a:	6961      	ldr	r1, [r4, #20]
 800663c:	b111      	cbz	r1, 8006644 <_reclaim_reent+0x2c>
 800663e:	4620      	mov	r0, r4
 8006640:	f000 f852 	bl	80066e8 <_free_r>
 8006644:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8006646:	b111      	cbz	r1, 800664e <_reclaim_reent+0x36>
 8006648:	4620      	mov	r0, r4
 800664a:	f000 f84d 	bl	80066e8 <_free_r>
 800664e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8006650:	b111      	cbz	r1, 8006658 <_reclaim_reent+0x40>
 8006652:	4620      	mov	r0, r4
 8006654:	f000 f848 	bl	80066e8 <_free_r>
 8006658:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800665a:	b111      	cbz	r1, 8006662 <_reclaim_reent+0x4a>
 800665c:	4620      	mov	r0, r4
 800665e:	f000 f843 	bl	80066e8 <_free_r>
 8006662:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8006664:	b111      	cbz	r1, 800666c <_reclaim_reent+0x54>
 8006666:	4620      	mov	r0, r4
 8006668:	f000 f83e 	bl	80066e8 <_free_r>
 800666c:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800666e:	b111      	cbz	r1, 8006676 <_reclaim_reent+0x5e>
 8006670:	4620      	mov	r0, r4
 8006672:	f000 f839 	bl	80066e8 <_free_r>
 8006676:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8006678:	b111      	cbz	r1, 8006680 <_reclaim_reent+0x68>
 800667a:	4620      	mov	r0, r4
 800667c:	f000 f834 	bl	80066e8 <_free_r>
 8006680:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006682:	b111      	cbz	r1, 800668a <_reclaim_reent+0x72>
 8006684:	4620      	mov	r0, r4
 8006686:	f000 f82f 	bl	80066e8 <_free_r>
 800668a:	69a3      	ldr	r3, [r4, #24]
 800668c:	b1e3      	cbz	r3, 80066c8 <_reclaim_reent+0xb0>
 800668e:	4620      	mov	r0, r4
 8006690:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8006692:	4798      	blx	r3
 8006694:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8006696:	b1b9      	cbz	r1, 80066c8 <_reclaim_reent+0xb0>
 8006698:	4620      	mov	r0, r4
 800669a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800669e:	f7ff bfad 	b.w	80065fc <cleanup_glue>
 80066a2:	5949      	ldr	r1, [r1, r5]
 80066a4:	b941      	cbnz	r1, 80066b8 <_reclaim_reent+0xa0>
 80066a6:	3504      	adds	r5, #4
 80066a8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80066aa:	2d80      	cmp	r5, #128	; 0x80
 80066ac:	68d9      	ldr	r1, [r3, #12]
 80066ae:	d1f8      	bne.n	80066a2 <_reclaim_reent+0x8a>
 80066b0:	4620      	mov	r0, r4
 80066b2:	f000 f819 	bl	80066e8 <_free_r>
 80066b6:	e7ba      	b.n	800662e <_reclaim_reent+0x16>
 80066b8:	680e      	ldr	r6, [r1, #0]
 80066ba:	4620      	mov	r0, r4
 80066bc:	f000 f814 	bl	80066e8 <_free_r>
 80066c0:	4631      	mov	r1, r6
 80066c2:	e7ef      	b.n	80066a4 <_reclaim_reent+0x8c>
 80066c4:	2500      	movs	r5, #0
 80066c6:	e7ef      	b.n	80066a8 <_reclaim_reent+0x90>
 80066c8:	bd70      	pop	{r4, r5, r6, pc}
 80066ca:	bf00      	nop
 80066cc:	20000014 	.word	0x20000014

080066d0 <__malloc_lock>:
 80066d0:	4801      	ldr	r0, [pc, #4]	; (80066d8 <__malloc_lock+0x8>)
 80066d2:	f7ff bf89 	b.w	80065e8 <__retarget_lock_acquire_recursive>
 80066d6:	bf00      	nop
 80066d8:	2000127c 	.word	0x2000127c

080066dc <__malloc_unlock>:
 80066dc:	4801      	ldr	r0, [pc, #4]	; (80066e4 <__malloc_unlock+0x8>)
 80066de:	f7ff bf84 	b.w	80065ea <__retarget_lock_release_recursive>
 80066e2:	bf00      	nop
 80066e4:	2000127c 	.word	0x2000127c

080066e8 <_free_r>:
 80066e8:	b538      	push	{r3, r4, r5, lr}
 80066ea:	4605      	mov	r5, r0
 80066ec:	2900      	cmp	r1, #0
 80066ee:	d040      	beq.n	8006772 <_free_r+0x8a>
 80066f0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80066f4:	1f0c      	subs	r4, r1, #4
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	bfb8      	it	lt
 80066fa:	18e4      	addlt	r4, r4, r3
 80066fc:	f7ff ffe8 	bl	80066d0 <__malloc_lock>
 8006700:	4a1c      	ldr	r2, [pc, #112]	; (8006774 <_free_r+0x8c>)
 8006702:	6813      	ldr	r3, [r2, #0]
 8006704:	b933      	cbnz	r3, 8006714 <_free_r+0x2c>
 8006706:	6063      	str	r3, [r4, #4]
 8006708:	6014      	str	r4, [r2, #0]
 800670a:	4628      	mov	r0, r5
 800670c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006710:	f7ff bfe4 	b.w	80066dc <__malloc_unlock>
 8006714:	42a3      	cmp	r3, r4
 8006716:	d908      	bls.n	800672a <_free_r+0x42>
 8006718:	6820      	ldr	r0, [r4, #0]
 800671a:	1821      	adds	r1, r4, r0
 800671c:	428b      	cmp	r3, r1
 800671e:	bf01      	itttt	eq
 8006720:	6819      	ldreq	r1, [r3, #0]
 8006722:	685b      	ldreq	r3, [r3, #4]
 8006724:	1809      	addeq	r1, r1, r0
 8006726:	6021      	streq	r1, [r4, #0]
 8006728:	e7ed      	b.n	8006706 <_free_r+0x1e>
 800672a:	461a      	mov	r2, r3
 800672c:	685b      	ldr	r3, [r3, #4]
 800672e:	b10b      	cbz	r3, 8006734 <_free_r+0x4c>
 8006730:	42a3      	cmp	r3, r4
 8006732:	d9fa      	bls.n	800672a <_free_r+0x42>
 8006734:	6811      	ldr	r1, [r2, #0]
 8006736:	1850      	adds	r0, r2, r1
 8006738:	42a0      	cmp	r0, r4
 800673a:	d10b      	bne.n	8006754 <_free_r+0x6c>
 800673c:	6820      	ldr	r0, [r4, #0]
 800673e:	4401      	add	r1, r0
 8006740:	1850      	adds	r0, r2, r1
 8006742:	4283      	cmp	r3, r0
 8006744:	6011      	str	r1, [r2, #0]
 8006746:	d1e0      	bne.n	800670a <_free_r+0x22>
 8006748:	6818      	ldr	r0, [r3, #0]
 800674a:	685b      	ldr	r3, [r3, #4]
 800674c:	4401      	add	r1, r0
 800674e:	6011      	str	r1, [r2, #0]
 8006750:	6053      	str	r3, [r2, #4]
 8006752:	e7da      	b.n	800670a <_free_r+0x22>
 8006754:	d902      	bls.n	800675c <_free_r+0x74>
 8006756:	230c      	movs	r3, #12
 8006758:	602b      	str	r3, [r5, #0]
 800675a:	e7d6      	b.n	800670a <_free_r+0x22>
 800675c:	6820      	ldr	r0, [r4, #0]
 800675e:	1821      	adds	r1, r4, r0
 8006760:	428b      	cmp	r3, r1
 8006762:	bf01      	itttt	eq
 8006764:	6819      	ldreq	r1, [r3, #0]
 8006766:	685b      	ldreq	r3, [r3, #4]
 8006768:	1809      	addeq	r1, r1, r0
 800676a:	6021      	streq	r1, [r4, #0]
 800676c:	6063      	str	r3, [r4, #4]
 800676e:	6054      	str	r4, [r2, #4]
 8006770:	e7cb      	b.n	800670a <_free_r+0x22>
 8006772:	bd38      	pop	{r3, r4, r5, pc}
 8006774:	20001280 	.word	0x20001280

08006778 <_init>:
 8006778:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800677a:	bf00      	nop
 800677c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800677e:	bc08      	pop	{r3}
 8006780:	469e      	mov	lr, r3
 8006782:	4770      	bx	lr

08006784 <_fini>:
 8006784:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006786:	bf00      	nop
 8006788:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800678a:	bc08      	pop	{r3}
 800678c:	469e      	mov	lr, r3
 800678e:	4770      	bx	lr
