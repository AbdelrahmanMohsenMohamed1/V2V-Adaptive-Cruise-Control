
AdaptiveCruiseControl_RTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006ac8  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000080  08006bd8  08006bd8  00016bd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006c58  08006c58  00020064  2**0
                  CONTENTS
  4 .ARM          00000000  08006c58  08006c58  00020064  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006c58  08006c58  00020064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006c58  08006c58  00016c58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006c5c  08006c5c  00016c5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  08006c60  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000012ec  20000064  08006cc4  00020064  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001350  08006cc4  00021350  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002008d  2**0
                  CONTENTS, READONLY
 13 .debug_info   00014a4c  00000000  00000000  000200d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000356b  00000000  00000000  00034b1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001268  00000000  00000000  00038088  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000e44  00000000  00000000  000392f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000439a  00000000  00000000  0003a134  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00015af0  00000000  00000000  0003e4ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00092bc1  00000000  00000000  00053fbe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000502c  00000000  00000000  000e6b80  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005a  00000000  00000000  000ebbac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000064 	.word	0x20000064
 800012c:	00000000 	.word	0x00000000
 8000130:	08006bc0 	.word	0x08006bc0

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000068 	.word	0x20000068
 800014c:	08006bc0 	.word	0x08006bc0

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__aeabi_d2f>:
 80008ec:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80008f0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80008f4:	bf24      	itt	cs
 80008f6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80008fa:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80008fe:	d90d      	bls.n	800091c <__aeabi_d2f+0x30>
 8000900:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000904:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000908:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800090c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000910:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000914:	bf08      	it	eq
 8000916:	f020 0001 	biceq.w	r0, r0, #1
 800091a:	4770      	bx	lr
 800091c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000920:	d121      	bne.n	8000966 <__aeabi_d2f+0x7a>
 8000922:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000926:	bfbc      	itt	lt
 8000928:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 800092c:	4770      	bxlt	lr
 800092e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000932:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000936:	f1c2 0218 	rsb	r2, r2, #24
 800093a:	f1c2 0c20 	rsb	ip, r2, #32
 800093e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000942:	fa20 f002 	lsr.w	r0, r0, r2
 8000946:	bf18      	it	ne
 8000948:	f040 0001 	orrne.w	r0, r0, #1
 800094c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000950:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000954:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000958:	ea40 000c 	orr.w	r0, r0, ip
 800095c:	fa23 f302 	lsr.w	r3, r3, r2
 8000960:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000964:	e7cc      	b.n	8000900 <__aeabi_d2f+0x14>
 8000966:	ea7f 5362 	mvns.w	r3, r2, asr #21
 800096a:	d107      	bne.n	800097c <__aeabi_d2f+0x90>
 800096c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000970:	bf1e      	ittt	ne
 8000972:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000976:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 800097a:	4770      	bxne	lr
 800097c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000980:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000984:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000988:	4770      	bx	lr
 800098a:	bf00      	nop

0800098c <__gesf2>:
 800098c:	f04f 3cff 	mov.w	ip, #4294967295
 8000990:	e006      	b.n	80009a0 <__cmpsf2+0x4>
 8000992:	bf00      	nop

08000994 <__lesf2>:
 8000994:	f04f 0c01 	mov.w	ip, #1
 8000998:	e002      	b.n	80009a0 <__cmpsf2+0x4>
 800099a:	bf00      	nop

0800099c <__cmpsf2>:
 800099c:	f04f 0c01 	mov.w	ip, #1
 80009a0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009a4:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80009a8:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80009ac:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80009b0:	bf18      	it	ne
 80009b2:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80009b6:	d011      	beq.n	80009dc <__cmpsf2+0x40>
 80009b8:	b001      	add	sp, #4
 80009ba:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 80009be:	bf18      	it	ne
 80009c0:	ea90 0f01 	teqne	r0, r1
 80009c4:	bf58      	it	pl
 80009c6:	ebb2 0003 	subspl.w	r0, r2, r3
 80009ca:	bf88      	it	hi
 80009cc:	17c8      	asrhi	r0, r1, #31
 80009ce:	bf38      	it	cc
 80009d0:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 80009d4:	bf18      	it	ne
 80009d6:	f040 0001 	orrne.w	r0, r0, #1
 80009da:	4770      	bx	lr
 80009dc:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80009e0:	d102      	bne.n	80009e8 <__cmpsf2+0x4c>
 80009e2:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 80009e6:	d105      	bne.n	80009f4 <__cmpsf2+0x58>
 80009e8:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 80009ec:	d1e4      	bne.n	80009b8 <__cmpsf2+0x1c>
 80009ee:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 80009f2:	d0e1      	beq.n	80009b8 <__cmpsf2+0x1c>
 80009f4:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009f8:	4770      	bx	lr
 80009fa:	bf00      	nop

080009fc <__aeabi_cfrcmple>:
 80009fc:	4684      	mov	ip, r0
 80009fe:	4608      	mov	r0, r1
 8000a00:	4661      	mov	r1, ip
 8000a02:	e7ff      	b.n	8000a04 <__aeabi_cfcmpeq>

08000a04 <__aeabi_cfcmpeq>:
 8000a04:	b50f      	push	{r0, r1, r2, r3, lr}
 8000a06:	f7ff ffc9 	bl	800099c <__cmpsf2>
 8000a0a:	2800      	cmp	r0, #0
 8000a0c:	bf48      	it	mi
 8000a0e:	f110 0f00 	cmnmi.w	r0, #0
 8000a12:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000a14 <__aeabi_fcmpeq>:
 8000a14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a18:	f7ff fff4 	bl	8000a04 <__aeabi_cfcmpeq>
 8000a1c:	bf0c      	ite	eq
 8000a1e:	2001      	moveq	r0, #1
 8000a20:	2000      	movne	r0, #0
 8000a22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a26:	bf00      	nop

08000a28 <__aeabi_fcmplt>:
 8000a28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a2c:	f7ff ffea 	bl	8000a04 <__aeabi_cfcmpeq>
 8000a30:	bf34      	ite	cc
 8000a32:	2001      	movcc	r0, #1
 8000a34:	2000      	movcs	r0, #0
 8000a36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a3a:	bf00      	nop

08000a3c <__aeabi_fcmple>:
 8000a3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a40:	f7ff ffe0 	bl	8000a04 <__aeabi_cfcmpeq>
 8000a44:	bf94      	ite	ls
 8000a46:	2001      	movls	r0, #1
 8000a48:	2000      	movhi	r0, #0
 8000a4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4e:	bf00      	nop

08000a50 <__aeabi_fcmpge>:
 8000a50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a54:	f7ff ffd2 	bl	80009fc <__aeabi_cfrcmple>
 8000a58:	bf94      	ite	ls
 8000a5a:	2001      	movls	r0, #1
 8000a5c:	2000      	movhi	r0, #0
 8000a5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a62:	bf00      	nop

08000a64 <__aeabi_fcmpgt>:
 8000a64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a68:	f7ff ffc8 	bl	80009fc <__aeabi_cfrcmple>
 8000a6c:	bf34      	ite	cc
 8000a6e:	2001      	movcc	r0, #1
 8000a70:	2000      	movcs	r0, #0
 8000a72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a76:	bf00      	nop

08000a78 <__aeabi_f2uiz>:
 8000a78:	0042      	lsls	r2, r0, #1
 8000a7a:	d20e      	bcs.n	8000a9a <__aeabi_f2uiz+0x22>
 8000a7c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000a80:	d30b      	bcc.n	8000a9a <__aeabi_f2uiz+0x22>
 8000a82:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000a86:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000a8a:	d409      	bmi.n	8000aa0 <__aeabi_f2uiz+0x28>
 8000a8c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000a90:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a94:	fa23 f002 	lsr.w	r0, r3, r2
 8000a98:	4770      	bx	lr
 8000a9a:	f04f 0000 	mov.w	r0, #0
 8000a9e:	4770      	bx	lr
 8000aa0:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000aa4:	d101      	bne.n	8000aaa <__aeabi_f2uiz+0x32>
 8000aa6:	0242      	lsls	r2, r0, #9
 8000aa8:	d102      	bne.n	8000ab0 <__aeabi_f2uiz+0x38>
 8000aaa:	f04f 30ff 	mov.w	r0, #4294967295
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <DC_Motor_Init>:

#include "DC_MOT.h"


void DC_Motor_Init(void)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_1); //start PWM on TIM3 channel 1
 8000abc:	2100      	movs	r1, #0
 8000abe:	4807      	ldr	r0, [pc, #28]	; (8000adc <DC_Motor_Init+0x24>)
 8000ac0:	f002 fa5c 	bl	8002f7c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4,TIM_CHANNEL_1); //start PWM on TIM4 channel 1
 8000ac4:	2100      	movs	r1, #0
 8000ac6:	4806      	ldr	r0, [pc, #24]	; (8000ae0 <DC_Motor_Init+0x28>)
 8000ac8:	f002 fa58 	bl	8002f7c <HAL_TIM_PWM_Start>
	TIM3->CCR1 = 0;
 8000acc:	4b05      	ldr	r3, [pc, #20]	; (8000ae4 <DC_Motor_Init+0x2c>)
 8000ace:	2200      	movs	r2, #0
 8000ad0:	635a      	str	r2, [r3, #52]	; 0x34
	TIM4->CCR1 = 0;
 8000ad2:	4b05      	ldr	r3, [pc, #20]	; (8000ae8 <DC_Motor_Init+0x30>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000ad8:	bf00      	nop
 8000ada:	bd80      	pop	{r7, pc}
 8000adc:	20000380 	.word	0x20000380
 8000ae0:	200003c8 	.word	0x200003c8
 8000ae4:	40000400 	.word	0x40000400
 8000ae8:	40000800 	.word	0x40000800

08000aec <DC_Motor_SetSpeed>:
void DC_Motor_SetSpeed(uint8_t dutyCycle)
{
 8000aec:	b480      	push	{r7}
 8000aee:	b083      	sub	sp, #12
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	4603      	mov	r3, r0
 8000af4:	71fb      	strb	r3, [r7, #7]
	TIM3->CCR1 = dutyCycle;
 8000af6:	4a05      	ldr	r2, [pc, #20]	; (8000b0c <DC_Motor_SetSpeed+0x20>)
 8000af8:	79fb      	ldrb	r3, [r7, #7]
 8000afa:	6353      	str	r3, [r2, #52]	; 0x34
	TIM4->CCR1 = dutyCycle;
 8000afc:	4a04      	ldr	r2, [pc, #16]	; (8000b10 <DC_Motor_SetSpeed+0x24>)
 8000afe:	79fb      	ldrb	r3, [r7, #7]
 8000b00:	6353      	str	r3, [r2, #52]	; 0x34
}
 8000b02:	bf00      	nop
 8000b04:	370c      	adds	r7, #12
 8000b06:	46bd      	mov	sp, r7
 8000b08:	bc80      	pop	{r7}
 8000b0a:	4770      	bx	lr
 8000b0c:	40000400 	.word	0x40000400
 8000b10:	40000800 	.word	0x40000800

08000b14 <DC_Motor_STOP>:
	}
}


void DC_Motor_STOP(void)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	af00      	add	r7, sp, #0
	TIM3->CCR1 = 0;
 8000b18:	4b07      	ldr	r3, [pc, #28]	; (8000b38 <DC_Motor_STOP+0x24>)
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	635a      	str	r2, [r3, #52]	; 0x34
	TIM4->CCR1 = 0;
 8000b1e:	4b07      	ldr	r3, [pc, #28]	; (8000b3c <DC_Motor_STOP+0x28>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	635a      	str	r2, [r3, #52]	; 0x34
	HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_1); // Close TIM3
 8000b24:	2100      	movs	r1, #0
 8000b26:	4806      	ldr	r0, [pc, #24]	; (8000b40 <DC_Motor_STOP+0x2c>)
 8000b28:	f002 faca 	bl	80030c0 <HAL_TIM_PWM_Stop>
	//HAL_GPIO_WritePin(GPIOA, ENA_PIN_6, GPIO_PIN_RESET);  //EN1 PIN ENABLE LOW
	HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_1);  //Close TIM4
 8000b2c:	2100      	movs	r1, #0
 8000b2e:	4805      	ldr	r0, [pc, #20]	; (8000b44 <DC_Motor_STOP+0x30>)
 8000b30:	f002 fac6 	bl	80030c0 <HAL_TIM_PWM_Stop>
	//HAL_GPIO_WritePin(GPIOB, ENA_PIN_6, GPIO_PIN_RESET);  //EN1 PIN ENABLE LOW
}
 8000b34:	bf00      	nop
 8000b36:	bd80      	pop	{r7, pc}
 8000b38:	40000400 	.word	0x40000400
 8000b3c:	40000800 	.word	0x40000800
 8000b40:	20000380 	.word	0x20000380
 8000b44:	200003c8 	.word	0x200003c8

08000b48 <H_HC05_Recieve_Polling>:
  * @brief  Receive from HC-05 module (Polling mode).
  * @param  Copy_u8_Char: Pointer to store received character
  * @retval HAL_StatusTypeDef: HAL status
  */
HAL_StatusTypeDef H_HC05_Recieve_Polling(uint8_t* Copy_u8_Char)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b084      	sub	sp, #16
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef Local_enumRetValue = HAL_OK;
 8000b50:	2300      	movs	r3, #0
 8000b52:	73fb      	strb	r3, [r7, #15]
    uint8_t Local_u8Counter = 0;
 8000b54:	2300      	movs	r3, #0
 8000b56:	73bb      	strb	r3, [r7, #14]

    Local_enumRetValue = HAL_UART_Receive(&HC05_UART_PORT, &RxData[0], HC05_RecCharNum, 100);
 8000b58:	2364      	movs	r3, #100	; 0x64
 8000b5a:	2204      	movs	r2, #4
 8000b5c:	4910      	ldr	r1, [pc, #64]	; (8000ba0 <H_HC05_Recieve_Polling+0x58>)
 8000b5e:	4811      	ldr	r0, [pc, #68]	; (8000ba4 <H_HC05_Recieve_Polling+0x5c>)
 8000b60:	f003 fcb5 	bl	80044ce <HAL_UART_Receive>
 8000b64:	4603      	mov	r3, r0
 8000b66:	73fb      	strb	r3, [r7, #15]
    if(Local_enumRetValue != HAL_OK)
 8000b68:	7bfb      	ldrb	r3, [r7, #15]
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d002      	beq.n	8000b74 <H_HC05_Recieve_Polling+0x2c>
    {
        Local_enumRetValue = HAL_ERROR;
 8000b6e:	2301      	movs	r3, #1
 8000b70:	73fb      	strb	r3, [r7, #15]
 8000b72:	e00f      	b.n	8000b94 <H_HC05_Recieve_Polling+0x4c>
    }
    else
    {
        /* Copy received characters to the buffer */
        for(Local_u8Counter = 0; Local_u8Counter < HC05_RecCharNum; Local_u8Counter++)
 8000b74:	2300      	movs	r3, #0
 8000b76:	73bb      	strb	r3, [r7, #14]
 8000b78:	e009      	b.n	8000b8e <H_HC05_Recieve_Polling+0x46>
        {
            Copy_u8_Char[Local_u8Counter] = RxData[Local_u8Counter];
 8000b7a:	7bba      	ldrb	r2, [r7, #14]
 8000b7c:	7bbb      	ldrb	r3, [r7, #14]
 8000b7e:	6879      	ldr	r1, [r7, #4]
 8000b80:	440b      	add	r3, r1
 8000b82:	4907      	ldr	r1, [pc, #28]	; (8000ba0 <H_HC05_Recieve_Polling+0x58>)
 8000b84:	5c8a      	ldrb	r2, [r1, r2]
 8000b86:	701a      	strb	r2, [r3, #0]
        for(Local_u8Counter = 0; Local_u8Counter < HC05_RecCharNum; Local_u8Counter++)
 8000b88:	7bbb      	ldrb	r3, [r7, #14]
 8000b8a:	3301      	adds	r3, #1
 8000b8c:	73bb      	strb	r3, [r7, #14]
 8000b8e:	7bbb      	ldrb	r3, [r7, #14]
 8000b90:	2b03      	cmp	r3, #3
 8000b92:	d9f2      	bls.n	8000b7a <H_HC05_Recieve_Polling+0x32>
        }
    }

    return Local_enumRetValue;
 8000b94:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b96:	4618      	mov	r0, r3
 8000b98:	3710      	adds	r7, #16
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	bd80      	pop	{r7, pc}
 8000b9e:	bf00      	nop
 8000ba0:	20000080 	.word	0x20000080
 8000ba4:	20000410 	.word	0x20000410

08000ba8 <HAL_UART_RxCpltCallback>:
  * @brief  Callback function for UART Rx complete interrupt.
  * @param  huart: Pointer to UART handle
  * @retval None
  */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b082      	sub	sp, #8
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	6078      	str	r0, [r7, #4]
    if(huart->Instance == USART1)
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	4a05      	ldr	r2, [pc, #20]	; (8000bcc <HAL_UART_RxCpltCallback+0x24>)
 8000bb6:	4293      	cmp	r3, r2
 8000bb8:	d104      	bne.n	8000bc4 <HAL_UART_RxCpltCallback+0x1c>
    {
        /* Re-enable interrupt receive */
        HAL_UART_Receive_IT(&HC05_UART_PORT, &RxData[0], HC05_RecCharNum);
 8000bba:	2204      	movs	r2, #4
 8000bbc:	4904      	ldr	r1, [pc, #16]	; (8000bd0 <HAL_UART_RxCpltCallback+0x28>)
 8000bbe:	4805      	ldr	r0, [pc, #20]	; (8000bd4 <HAL_UART_RxCpltCallback+0x2c>)
 8000bc0:	f003 fd17 	bl	80045f2 <HAL_UART_Receive_IT>
    }
}
 8000bc4:	bf00      	nop
 8000bc6:	3708      	adds	r7, #8
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	bd80      	pop	{r7, pc}
 8000bcc:	40013800 	.word	0x40013800
 8000bd0:	20000080 	.word	0x20000080
 8000bd4:	20000410 	.word	0x20000410

08000bd8 <LCD_voidInit>:
//include LCD Header files
#include "LCD_interface.h"
#include "LCD_config.h"

void LCD_voidInit(void)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	af00      	add	r7, sp, #0
	// 4 bit initialisation

	//Wait for power-on initialization time (greater than 40ms)
	vTaskDelay(50);
 8000bdc:	2032      	movs	r0, #50	; 0x32
 8000bde:	f004 ff0f 	bl	8005a00 <vTaskDelay>
	
	//Send 0x33 command sequence for 4-bit mode
	LCD_voidWriteCommand(0x33);
 8000be2:	2033      	movs	r0, #51	; 0x33
 8000be4:	f000 f826 	bl	8000c34 <LCD_voidWriteCommand>
	vTaskDelay(10);
 8000be8:	200a      	movs	r0, #10
 8000bea:	f004 ff09 	bl	8005a00 <vTaskDelay>
	
	//Send 0x32 command sequence for 4-bit mode
	LCD_voidWriteCommand(0x32);
 8000bee:	2032      	movs	r0, #50	; 0x32
 8000bf0:	f000 f820 	bl	8000c34 <LCD_voidWriteCommand>
	vTaskDelay(10);
 8000bf4:	200a      	movs	r0, #10
 8000bf6:	f004 ff03 	bl	8005a00 <vTaskDelay>
	
	//Set interface to 4-bit mode and 2 lines, 5x8 font
	LCD_voidWriteCommand(0x28);
 8000bfa:	2028      	movs	r0, #40	; 0x28
 8000bfc:	f000 f81a 	bl	8000c34 <LCD_voidWriteCommand>
	vTaskDelay(1);
 8000c00:	2001      	movs	r0, #1
 8000c02:	f004 fefd 	bl	8005a00 <vTaskDelay>
	
	//Display on, cursor off, blink off
	LCD_voidWriteCommand(0x0C);
 8000c06:	200c      	movs	r0, #12
 8000c08:	f000 f814 	bl	8000c34 <LCD_voidWriteCommand>
	vTaskDelay(1);
 8000c0c:	2001      	movs	r0, #1
 8000c0e:	f004 fef7 	bl	8005a00 <vTaskDelay>
	
	//Entry mode set: increment cursor position, no display shift
	LCD_voidWriteCommand(0x06);
 8000c12:	2006      	movs	r0, #6
 8000c14:	f000 f80e 	bl	8000c34 <LCD_voidWriteCommand>
	vTaskDelay(1);
 8000c18:	2001      	movs	r0, #1
 8000c1a:	f004 fef1 	bl	8005a00 <vTaskDelay>
	
	//Clear the display
	LCD_voidWriteCommand(0x01);
 8000c1e:	2001      	movs	r0, #1
 8000c20:	f000 f808 	bl	8000c34 <LCD_voidWriteCommand>
	vTaskDelay(2);
 8000c24:	2002      	movs	r0, #2
 8000c26:	f004 feeb 	bl	8005a00 <vTaskDelay>
	
	//Set cursor to the beginning of the first line
	LCD_voidWriteCommand(0x80);
 8000c2a:	2080      	movs	r0, #128	; 0x80
 8000c2c:	f000 f802 	bl	8000c34 <LCD_voidWriteCommand>
}
 8000c30:	bf00      	nop
 8000c32:	bd80      	pop	{r7, pc}

08000c34 <LCD_voidWriteCommand>:

void LCD_voidWriteCommand(uint8_t copy_u8Cmd)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b082      	sub	sp, #8
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	71fb      	strb	r3, [r7, #7]
	// Write high nibble of command to data pins
	HAL_GPIO_WritePin(LCD_Data_Port, LCD_Pin7, (GET_BIT(copy_u8Cmd, 7)));
 8000c3e:	79fb      	ldrb	r3, [r7, #7]
 8000c40:	09db      	lsrs	r3, r3, #7
 8000c42:	b2db      	uxtb	r3, r3
 8000c44:	461a      	mov	r2, r3
 8000c46:	2120      	movs	r1, #32
 8000c48:	483f      	ldr	r0, [pc, #252]	; (8000d48 <LCD_voidWriteCommand+0x114>)
 8000c4a:	f001 fcd1 	bl	80025f0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_Data_Port, LCD_Pin6, (GET_BIT(copy_u8Cmd, 6)));
 8000c4e:	79fb      	ldrb	r3, [r7, #7]
 8000c50:	099b      	lsrs	r3, r3, #6
 8000c52:	b2db      	uxtb	r3, r3
 8000c54:	f003 0301 	and.w	r3, r3, #1
 8000c58:	b2db      	uxtb	r3, r3
 8000c5a:	461a      	mov	r2, r3
 8000c5c:	2110      	movs	r1, #16
 8000c5e:	483a      	ldr	r0, [pc, #232]	; (8000d48 <LCD_voidWriteCommand+0x114>)
 8000c60:	f001 fcc6 	bl	80025f0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_Data_Port, LCD_Pin5, (GET_BIT(copy_u8Cmd, 5)));
 8000c64:	79fb      	ldrb	r3, [r7, #7]
 8000c66:	095b      	lsrs	r3, r3, #5
 8000c68:	b2db      	uxtb	r3, r3
 8000c6a:	f003 0301 	and.w	r3, r3, #1
 8000c6e:	b2db      	uxtb	r3, r3
 8000c70:	461a      	mov	r2, r3
 8000c72:	2108      	movs	r1, #8
 8000c74:	4834      	ldr	r0, [pc, #208]	; (8000d48 <LCD_voidWriteCommand+0x114>)
 8000c76:	f001 fcbb 	bl	80025f0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_Data_Port, LCD_Pin4, (GET_BIT(copy_u8Cmd, 4)));
 8000c7a:	79fb      	ldrb	r3, [r7, #7]
 8000c7c:	091b      	lsrs	r3, r3, #4
 8000c7e:	b2db      	uxtb	r3, r3
 8000c80:	f003 0301 	and.w	r3, r3, #1
 8000c84:	b2db      	uxtb	r3, r3
 8000c86:	461a      	mov	r2, r3
 8000c88:	2104      	movs	r1, #4
 8000c8a:	482f      	ldr	r0, [pc, #188]	; (8000d48 <LCD_voidWriteCommand+0x114>)
 8000c8c:	f001 fcb0 	bl	80025f0 <HAL_GPIO_WritePin>

	// Set RS pin for command mode
	HAL_GPIO_WritePin(LCD_Ctrl_Port, LCD_RS_Pin, GPIO_PIN_RESET); /* command */
 8000c90:	2200      	movs	r2, #0
 8000c92:	2101      	movs	r1, #1
 8000c94:	482c      	ldr	r0, [pc, #176]	; (8000d48 <LCD_voidWriteCommand+0x114>)
 8000c96:	f001 fcab 	bl	80025f0 <HAL_GPIO_WritePin>

	// Enable pulse
	HAL_GPIO_WritePin(LCD_Ctrl_Port, LCD_EN_Pin, GPIO_PIN_SET);
 8000c9a:	2201      	movs	r2, #1
 8000c9c:	2102      	movs	r1, #2
 8000c9e:	482a      	ldr	r0, [pc, #168]	; (8000d48 <LCD_voidWriteCommand+0x114>)
 8000ca0:	f001 fca6 	bl	80025f0 <HAL_GPIO_WritePin>
	vTaskDelay(2);
 8000ca4:	2002      	movs	r0, #2
 8000ca6:	f004 feab 	bl	8005a00 <vTaskDelay>
	HAL_GPIO_WritePin(LCD_Ctrl_Port, LCD_EN_Pin, GPIO_PIN_RESET); // Disable enable pin
 8000caa:	2200      	movs	r2, #0
 8000cac:	2102      	movs	r1, #2
 8000cae:	4826      	ldr	r0, [pc, #152]	; (8000d48 <LCD_voidWriteCommand+0x114>)
 8000cb0:	f001 fc9e 	bl	80025f0 <HAL_GPIO_WritePin>
	vTaskDelay(2);
 8000cb4:	2002      	movs	r0, #2
 8000cb6:	f004 fea3 	bl	8005a00 <vTaskDelay>

	// Write low nibble of command to data pins
	HAL_GPIO_WritePin(LCD_Data_Port, LCD_Pin7, (GET_BIT(copy_u8Cmd, 3)));
 8000cba:	79fb      	ldrb	r3, [r7, #7]
 8000cbc:	08db      	lsrs	r3, r3, #3
 8000cbe:	b2db      	uxtb	r3, r3
 8000cc0:	f003 0301 	and.w	r3, r3, #1
 8000cc4:	b2db      	uxtb	r3, r3
 8000cc6:	461a      	mov	r2, r3
 8000cc8:	2120      	movs	r1, #32
 8000cca:	481f      	ldr	r0, [pc, #124]	; (8000d48 <LCD_voidWriteCommand+0x114>)
 8000ccc:	f001 fc90 	bl	80025f0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_Data_Port, LCD_Pin6, (GET_BIT(copy_u8Cmd, 2)));
 8000cd0:	79fb      	ldrb	r3, [r7, #7]
 8000cd2:	089b      	lsrs	r3, r3, #2
 8000cd4:	b2db      	uxtb	r3, r3
 8000cd6:	f003 0301 	and.w	r3, r3, #1
 8000cda:	b2db      	uxtb	r3, r3
 8000cdc:	461a      	mov	r2, r3
 8000cde:	2110      	movs	r1, #16
 8000ce0:	4819      	ldr	r0, [pc, #100]	; (8000d48 <LCD_voidWriteCommand+0x114>)
 8000ce2:	f001 fc85 	bl	80025f0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_Data_Port, LCD_Pin5, (GET_BIT(copy_u8Cmd, 1)));
 8000ce6:	79fb      	ldrb	r3, [r7, #7]
 8000ce8:	085b      	lsrs	r3, r3, #1
 8000cea:	b2db      	uxtb	r3, r3
 8000cec:	f003 0301 	and.w	r3, r3, #1
 8000cf0:	b2db      	uxtb	r3, r3
 8000cf2:	461a      	mov	r2, r3
 8000cf4:	2108      	movs	r1, #8
 8000cf6:	4814      	ldr	r0, [pc, #80]	; (8000d48 <LCD_voidWriteCommand+0x114>)
 8000cf8:	f001 fc7a 	bl	80025f0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_Data_Port, LCD_Pin4, (GET_BIT(copy_u8Cmd, 0)));
 8000cfc:	79fb      	ldrb	r3, [r7, #7]
 8000cfe:	f003 0301 	and.w	r3, r3, #1
 8000d02:	b2db      	uxtb	r3, r3
 8000d04:	461a      	mov	r2, r3
 8000d06:	2104      	movs	r1, #4
 8000d08:	480f      	ldr	r0, [pc, #60]	; (8000d48 <LCD_voidWriteCommand+0x114>)
 8000d0a:	f001 fc71 	bl	80025f0 <HAL_GPIO_WritePin>

	// Set RS pin for command mode
	HAL_GPIO_WritePin(LCD_Ctrl_Port, LCD_RS_Pin, GPIO_PIN_RESET); /* command */
 8000d0e:	2200      	movs	r2, #0
 8000d10:	2101      	movs	r1, #1
 8000d12:	480d      	ldr	r0, [pc, #52]	; (8000d48 <LCD_voidWriteCommand+0x114>)
 8000d14:	f001 fc6c 	bl	80025f0 <HAL_GPIO_WritePin>

	// Enable pulse
	HAL_GPIO_WritePin(LCD_Ctrl_Port, LCD_EN_Pin, GPIO_PIN_SET);
 8000d18:	2201      	movs	r2, #1
 8000d1a:	2102      	movs	r1, #2
 8000d1c:	480a      	ldr	r0, [pc, #40]	; (8000d48 <LCD_voidWriteCommand+0x114>)
 8000d1e:	f001 fc67 	bl	80025f0 <HAL_GPIO_WritePin>
	vTaskDelay(2);
 8000d22:	2002      	movs	r0, #2
 8000d24:	f004 fe6c 	bl	8005a00 <vTaskDelay>
	HAL_GPIO_WritePin(LCD_Ctrl_Port, LCD_EN_Pin, GPIO_PIN_RESET); // Disable enable pin
 8000d28:	2200      	movs	r2, #0
 8000d2a:	2102      	movs	r1, #2
 8000d2c:	4806      	ldr	r0, [pc, #24]	; (8000d48 <LCD_voidWriteCommand+0x114>)
 8000d2e:	f001 fc5f 	bl	80025f0 <HAL_GPIO_WritePin>
	vTaskDelay(2);
 8000d32:	2002      	movs	r0, #2
 8000d34:	f004 fe64 	bl	8005a00 <vTaskDelay>

	vTaskDelay(1);
 8000d38:	2001      	movs	r0, #1
 8000d3a:	f004 fe61 	bl	8005a00 <vTaskDelay>
}
 8000d3e:	bf00      	nop
 8000d40:	3708      	adds	r7, #8
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bd80      	pop	{r7, pc}
 8000d46:	bf00      	nop
 8000d48:	40010800 	.word	0x40010800

08000d4c <LCD_voidWriteData>:

void LCD_voidWriteData(uint8_t copy_u8Char)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b082      	sub	sp, #8
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	4603      	mov	r3, r0
 8000d54:	71fb      	strb	r3, [r7, #7]
	// Write high nibble of character to data pins
	HAL_GPIO_WritePin(LCD_Data_Port, LCD_Pin7, (GET_BIT(copy_u8Char, 7)));
 8000d56:	79fb      	ldrb	r3, [r7, #7]
 8000d58:	09db      	lsrs	r3, r3, #7
 8000d5a:	b2db      	uxtb	r3, r3
 8000d5c:	461a      	mov	r2, r3
 8000d5e:	2120      	movs	r1, #32
 8000d60:	483f      	ldr	r0, [pc, #252]	; (8000e60 <LCD_voidWriteData+0x114>)
 8000d62:	f001 fc45 	bl	80025f0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_Data_Port, LCD_Pin6, (GET_BIT(copy_u8Char, 6)));
 8000d66:	79fb      	ldrb	r3, [r7, #7]
 8000d68:	099b      	lsrs	r3, r3, #6
 8000d6a:	b2db      	uxtb	r3, r3
 8000d6c:	f003 0301 	and.w	r3, r3, #1
 8000d70:	b2db      	uxtb	r3, r3
 8000d72:	461a      	mov	r2, r3
 8000d74:	2110      	movs	r1, #16
 8000d76:	483a      	ldr	r0, [pc, #232]	; (8000e60 <LCD_voidWriteData+0x114>)
 8000d78:	f001 fc3a 	bl	80025f0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_Data_Port, LCD_Pin5, (GET_BIT(copy_u8Char, 5)));
 8000d7c:	79fb      	ldrb	r3, [r7, #7]
 8000d7e:	095b      	lsrs	r3, r3, #5
 8000d80:	b2db      	uxtb	r3, r3
 8000d82:	f003 0301 	and.w	r3, r3, #1
 8000d86:	b2db      	uxtb	r3, r3
 8000d88:	461a      	mov	r2, r3
 8000d8a:	2108      	movs	r1, #8
 8000d8c:	4834      	ldr	r0, [pc, #208]	; (8000e60 <LCD_voidWriteData+0x114>)
 8000d8e:	f001 fc2f 	bl	80025f0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_Data_Port, LCD_Pin4, (GET_BIT(copy_u8Char, 4)));
 8000d92:	79fb      	ldrb	r3, [r7, #7]
 8000d94:	091b      	lsrs	r3, r3, #4
 8000d96:	b2db      	uxtb	r3, r3
 8000d98:	f003 0301 	and.w	r3, r3, #1
 8000d9c:	b2db      	uxtb	r3, r3
 8000d9e:	461a      	mov	r2, r3
 8000da0:	2104      	movs	r1, #4
 8000da2:	482f      	ldr	r0, [pc, #188]	; (8000e60 <LCD_voidWriteData+0x114>)
 8000da4:	f001 fc24 	bl	80025f0 <HAL_GPIO_WritePin>

	// Set RS pin for data mode
	HAL_GPIO_WritePin(LCD_Ctrl_Port, LCD_RS_Pin, GPIO_PIN_SET);
 8000da8:	2201      	movs	r2, #1
 8000daa:	2101      	movs	r1, #1
 8000dac:	482c      	ldr	r0, [pc, #176]	; (8000e60 <LCD_voidWriteData+0x114>)
 8000dae:	f001 fc1f 	bl	80025f0 <HAL_GPIO_WritePin>

	// Enable pulse
	HAL_GPIO_WritePin(LCD_Ctrl_Port, LCD_EN_Pin, GPIO_PIN_SET);
 8000db2:	2201      	movs	r2, #1
 8000db4:	2102      	movs	r1, #2
 8000db6:	482a      	ldr	r0, [pc, #168]	; (8000e60 <LCD_voidWriteData+0x114>)
 8000db8:	f001 fc1a 	bl	80025f0 <HAL_GPIO_WritePin>
	vTaskDelay(2);
 8000dbc:	2002      	movs	r0, #2
 8000dbe:	f004 fe1f 	bl	8005a00 <vTaskDelay>
	HAL_GPIO_WritePin(LCD_Ctrl_Port, LCD_EN_Pin, GPIO_PIN_RESET); // Disable enable pin
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	2102      	movs	r1, #2
 8000dc6:	4826      	ldr	r0, [pc, #152]	; (8000e60 <LCD_voidWriteData+0x114>)
 8000dc8:	f001 fc12 	bl	80025f0 <HAL_GPIO_WritePin>
	vTaskDelay(2);
 8000dcc:	2002      	movs	r0, #2
 8000dce:	f004 fe17 	bl	8005a00 <vTaskDelay>

	// Write low nibble of character to data pins
	HAL_GPIO_WritePin(LCD_Data_Port, LCD_Pin7, (GET_BIT(copy_u8Char, 3)));
 8000dd2:	79fb      	ldrb	r3, [r7, #7]
 8000dd4:	08db      	lsrs	r3, r3, #3
 8000dd6:	b2db      	uxtb	r3, r3
 8000dd8:	f003 0301 	and.w	r3, r3, #1
 8000ddc:	b2db      	uxtb	r3, r3
 8000dde:	461a      	mov	r2, r3
 8000de0:	2120      	movs	r1, #32
 8000de2:	481f      	ldr	r0, [pc, #124]	; (8000e60 <LCD_voidWriteData+0x114>)
 8000de4:	f001 fc04 	bl	80025f0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_Data_Port, LCD_Pin6, (GET_BIT(copy_u8Char, 2)));
 8000de8:	79fb      	ldrb	r3, [r7, #7]
 8000dea:	089b      	lsrs	r3, r3, #2
 8000dec:	b2db      	uxtb	r3, r3
 8000dee:	f003 0301 	and.w	r3, r3, #1
 8000df2:	b2db      	uxtb	r3, r3
 8000df4:	461a      	mov	r2, r3
 8000df6:	2110      	movs	r1, #16
 8000df8:	4819      	ldr	r0, [pc, #100]	; (8000e60 <LCD_voidWriteData+0x114>)
 8000dfa:	f001 fbf9 	bl	80025f0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_Data_Port, LCD_Pin5, (GET_BIT(copy_u8Char, 1)));
 8000dfe:	79fb      	ldrb	r3, [r7, #7]
 8000e00:	085b      	lsrs	r3, r3, #1
 8000e02:	b2db      	uxtb	r3, r3
 8000e04:	f003 0301 	and.w	r3, r3, #1
 8000e08:	b2db      	uxtb	r3, r3
 8000e0a:	461a      	mov	r2, r3
 8000e0c:	2108      	movs	r1, #8
 8000e0e:	4814      	ldr	r0, [pc, #80]	; (8000e60 <LCD_voidWriteData+0x114>)
 8000e10:	f001 fbee 	bl	80025f0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_Data_Port, LCD_Pin4, (GET_BIT(copy_u8Char, 0)));
 8000e14:	79fb      	ldrb	r3, [r7, #7]
 8000e16:	f003 0301 	and.w	r3, r3, #1
 8000e1a:	b2db      	uxtb	r3, r3
 8000e1c:	461a      	mov	r2, r3
 8000e1e:	2104      	movs	r1, #4
 8000e20:	480f      	ldr	r0, [pc, #60]	; (8000e60 <LCD_voidWriteData+0x114>)
 8000e22:	f001 fbe5 	bl	80025f0 <HAL_GPIO_WritePin>

	// Set RS pin for data mode
	HAL_GPIO_WritePin(LCD_Ctrl_Port, LCD_RS_Pin, GPIO_PIN_SET);
 8000e26:	2201      	movs	r2, #1
 8000e28:	2101      	movs	r1, #1
 8000e2a:	480d      	ldr	r0, [pc, #52]	; (8000e60 <LCD_voidWriteData+0x114>)
 8000e2c:	f001 fbe0 	bl	80025f0 <HAL_GPIO_WritePin>

	// Enable pulse
	HAL_GPIO_WritePin(LCD_Ctrl_Port, LCD_EN_Pin, GPIO_PIN_SET);
 8000e30:	2201      	movs	r2, #1
 8000e32:	2102      	movs	r1, #2
 8000e34:	480a      	ldr	r0, [pc, #40]	; (8000e60 <LCD_voidWriteData+0x114>)
 8000e36:	f001 fbdb 	bl	80025f0 <HAL_GPIO_WritePin>
	vTaskDelay(2);
 8000e3a:	2002      	movs	r0, #2
 8000e3c:	f004 fde0 	bl	8005a00 <vTaskDelay>
	HAL_GPIO_WritePin(LCD_Ctrl_Port, LCD_EN_Pin, GPIO_PIN_RESET); // Disable enable pin
 8000e40:	2200      	movs	r2, #0
 8000e42:	2102      	movs	r1, #2
 8000e44:	4806      	ldr	r0, [pc, #24]	; (8000e60 <LCD_voidWriteData+0x114>)
 8000e46:	f001 fbd3 	bl	80025f0 <HAL_GPIO_WritePin>
	vTaskDelay(2);
 8000e4a:	2002      	movs	r0, #2
 8000e4c:	f004 fdd8 	bl	8005a00 <vTaskDelay>

	vTaskDelay(1);
 8000e50:	2001      	movs	r0, #1
 8000e52:	f004 fdd5 	bl	8005a00 <vTaskDelay>
}
 8000e56:	bf00      	nop
 8000e58:	3708      	adds	r7, #8
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	bd80      	pop	{r7, pc}
 8000e5e:	bf00      	nop
 8000e60:	40010800 	.word	0x40010800

08000e64 <LCD_voidClear>:

void LCD_voidClear(void)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	af00      	add	r7, sp, #0
	LCD_voidWriteCommand(0x01); // Send clear screen command
 8000e68:	2001      	movs	r0, #1
 8000e6a:	f7ff fee3 	bl	8000c34 <LCD_voidWriteCommand>
	vTaskDelay(2); // Delay for 2 milliseconds
 8000e6e:	2002      	movs	r0, #2
 8000e70:	f004 fdc6 	bl	8005a00 <vTaskDelay>
}
 8000e74:	bf00      	nop
 8000e76:	bd80      	pop	{r7, pc}

08000e78 <LCD_voidSetCursor>:

void LCD_voidSetCursor(uint8_t copy_u8Row, uint8_t copy_u8Col)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b082      	sub	sp, #8
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	4603      	mov	r3, r0
 8000e80:	460a      	mov	r2, r1
 8000e82:	71fb      	strb	r3, [r7, #7]
 8000e84:	4613      	mov	r3, r2
 8000e86:	71bb      	strb	r3, [r7, #6]
	LCD_voidWriteCommand((128 + (copy_u8Row * 64) + copy_u8Col)); // Set cursor position
 8000e88:	79fb      	ldrb	r3, [r7, #7]
 8000e8a:	3302      	adds	r3, #2
 8000e8c:	b2db      	uxtb	r3, r3
 8000e8e:	019b      	lsls	r3, r3, #6
 8000e90:	b2da      	uxtb	r2, r3
 8000e92:	79bb      	ldrb	r3, [r7, #6]
 8000e94:	4413      	add	r3, r2
 8000e96:	b2db      	uxtb	r3, r3
 8000e98:	4618      	mov	r0, r3
 8000e9a:	f7ff fecb 	bl	8000c34 <LCD_voidWriteCommand>
}
 8000e9e:	bf00      	nop
 8000ea0:	3708      	adds	r7, #8
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	bd80      	pop	{r7, pc}

08000ea6 <LCD_voidWriteString>:

void LCD_voidWriteString(const uint8_t *copy_cu8pString)
{
 8000ea6:	b580      	push	{r7, lr}
 8000ea8:	b084      	sub	sp, #16
 8000eaa:	af00      	add	r7, sp, #0
 8000eac:	6078      	str	r0, [r7, #4]
	uint8_t local_u8i = 0;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	73fb      	strb	r3, [r7, #15]
	do
	{
		LCD_voidWriteData(copy_cu8pString[local_u8i]); // Write each character in the string
 8000eb2:	7bfb      	ldrb	r3, [r7, #15]
 8000eb4:	687a      	ldr	r2, [r7, #4]
 8000eb6:	4413      	add	r3, r2
 8000eb8:	781b      	ldrb	r3, [r3, #0]
 8000eba:	4618      	mov	r0, r3
 8000ebc:	f7ff ff46 	bl	8000d4c <LCD_voidWriteData>
		local_u8i++;
 8000ec0:	7bfb      	ldrb	r3, [r7, #15]
 8000ec2:	3301      	adds	r3, #1
 8000ec4:	73fb      	strb	r3, [r7, #15]
	} while (copy_cu8pString[local_u8i] != '\0'); // Continue until null terminator is reached
 8000ec6:	7bfb      	ldrb	r3, [r7, #15]
 8000ec8:	687a      	ldr	r2, [r7, #4]
 8000eca:	4413      	add	r3, r2
 8000ecc:	781b      	ldrb	r3, [r3, #0]
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d1ef      	bne.n	8000eb2 <LCD_voidWriteString+0xc>
}
 8000ed2:	bf00      	nop
 8000ed4:	bf00      	nop
 8000ed6:	3710      	adds	r7, #16
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	bd80      	pop	{r7, pc}

08000edc <LCD_voidWriteNum>:

void LCD_voidWriteNum(uint32_t copy_u32Num)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b084      	sub	sp, #16
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]
	if (0 == copy_u32Num)
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d110      	bne.n	8000f0c <LCD_voidWriteNum+0x30>
	{
		LCD_voidWriteData((copy_u32Num % 10) + 48); // Write digit as character
 8000eea:	6879      	ldr	r1, [r7, #4]
 8000eec:	4b25      	ldr	r3, [pc, #148]	; (8000f84 <LCD_voidWriteNum+0xa8>)
 8000eee:	fba3 2301 	umull	r2, r3, r3, r1
 8000ef2:	08da      	lsrs	r2, r3, #3
 8000ef4:	4613      	mov	r3, r2
 8000ef6:	009b      	lsls	r3, r3, #2
 8000ef8:	4413      	add	r3, r2
 8000efa:	005b      	lsls	r3, r3, #1
 8000efc:	1aca      	subs	r2, r1, r3
 8000efe:	b2d3      	uxtb	r3, r2
 8000f00:	3330      	adds	r3, #48	; 0x30
 8000f02:	b2db      	uxtb	r3, r3
 8000f04:	4618      	mov	r0, r3
 8000f06:	f7ff ff21 	bl	8000d4c <LCD_voidWriteData>
		{
			LCD_voidWriteData((reverse % 10) + 48); // Write digit as character
			reverse /= 10;
		}
	}
}
 8000f0a:	e037      	b.n	8000f7c <LCD_voidWriteNum+0xa0>
		uint32_t reverse = 1;
 8000f0c:	2301      	movs	r3, #1
 8000f0e:	60fb      	str	r3, [r7, #12]
		while (copy_u32Num != 0)
 8000f10:	e017      	b.n	8000f42 <LCD_voidWriteNum+0x66>
			reverse = (reverse * 10) + (copy_u32Num % 10);
 8000f12:	68fa      	ldr	r2, [r7, #12]
 8000f14:	4613      	mov	r3, r2
 8000f16:	009b      	lsls	r3, r3, #2
 8000f18:	4413      	add	r3, r2
 8000f1a:	005b      	lsls	r3, r3, #1
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	6879      	ldr	r1, [r7, #4]
 8000f20:	4b18      	ldr	r3, [pc, #96]	; (8000f84 <LCD_voidWriteNum+0xa8>)
 8000f22:	fba3 2301 	umull	r2, r3, r3, r1
 8000f26:	08da      	lsrs	r2, r3, #3
 8000f28:	4613      	mov	r3, r2
 8000f2a:	009b      	lsls	r3, r3, #2
 8000f2c:	4413      	add	r3, r2
 8000f2e:	005b      	lsls	r3, r3, #1
 8000f30:	1aca      	subs	r2, r1, r3
 8000f32:	1883      	adds	r3, r0, r2
 8000f34:	60fb      	str	r3, [r7, #12]
			copy_u32Num /= 10;
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	4a12      	ldr	r2, [pc, #72]	; (8000f84 <LCD_voidWriteNum+0xa8>)
 8000f3a:	fba2 2303 	umull	r2, r3, r2, r3
 8000f3e:	08db      	lsrs	r3, r3, #3
 8000f40:	607b      	str	r3, [r7, #4]
		while (copy_u32Num != 0)
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d1e4      	bne.n	8000f12 <LCD_voidWriteNum+0x36>
		while (reverse != 1)
 8000f48:	e015      	b.n	8000f76 <LCD_voidWriteNum+0x9a>
			LCD_voidWriteData((reverse % 10) + 48); // Write digit as character
 8000f4a:	68f9      	ldr	r1, [r7, #12]
 8000f4c:	4b0d      	ldr	r3, [pc, #52]	; (8000f84 <LCD_voidWriteNum+0xa8>)
 8000f4e:	fba3 2301 	umull	r2, r3, r3, r1
 8000f52:	08da      	lsrs	r2, r3, #3
 8000f54:	4613      	mov	r3, r2
 8000f56:	009b      	lsls	r3, r3, #2
 8000f58:	4413      	add	r3, r2
 8000f5a:	005b      	lsls	r3, r3, #1
 8000f5c:	1aca      	subs	r2, r1, r3
 8000f5e:	b2d3      	uxtb	r3, r2
 8000f60:	3330      	adds	r3, #48	; 0x30
 8000f62:	b2db      	uxtb	r3, r3
 8000f64:	4618      	mov	r0, r3
 8000f66:	f7ff fef1 	bl	8000d4c <LCD_voidWriteData>
			reverse /= 10;
 8000f6a:	68fb      	ldr	r3, [r7, #12]
 8000f6c:	4a05      	ldr	r2, [pc, #20]	; (8000f84 <LCD_voidWriteNum+0xa8>)
 8000f6e:	fba2 2303 	umull	r2, r3, r2, r3
 8000f72:	08db      	lsrs	r3, r3, #3
 8000f74:	60fb      	str	r3, [r7, #12]
		while (reverse != 1)
 8000f76:	68fb      	ldr	r3, [r7, #12]
 8000f78:	2b01      	cmp	r3, #1
 8000f7a:	d1e6      	bne.n	8000f4a <LCD_voidWriteNum+0x6e>
}
 8000f7c:	bf00      	nop
 8000f7e:	3710      	adds	r7, #16
 8000f80:	46bd      	mov	sp, r7
 8000f82:	bd80      	pop	{r7, pc}
 8000f84:	cccccccd 	.word	0xcccccccd

08000f88 <HAL_TIM_IC_CaptureCallback>:

/**
 * @brief This function handles TIM1 capture compare interrupt.
 */
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	b083      	sub	sp, #12
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN voidTIM1_CC_IRQn 0 */

	if (State == 0) {
 8000f90:	4b23      	ldr	r3, [pc, #140]	; (8001020 <HAL_TIM_IC_CaptureCallback+0x98>)
 8000f92:	781b      	ldrb	r3, [r3, #0]
 8000f94:	b2db      	uxtb	r3, r3
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d11d      	bne.n	8000fd6 <HAL_TIM_IC_CaptureCallback+0x4e>

		TIM1->CNT = 0x0;
 8000f9a:	4b22      	ldr	r3, [pc, #136]	; (8001024 <HAL_TIM_IC_CaptureCallback+0x9c>)
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	625a      	str	r2, [r3, #36]	; 0x24
		TIM1->CCR1 = 0x0;
 8000fa0:	4b20      	ldr	r3, [pc, #128]	; (8001024 <HAL_TIM_IC_CaptureCallback+0x9c>)
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	635a      	str	r2, [r3, #52]	; 0x34


		//Input Capture Edge Select falling edge
		__HAL_TIM_SET_CAPTUREPOLARITY(&htim1 ,TIM_CHANNEL_1 ,TIM_INPUTCHANNELPOLARITY_FALLING) ;
 8000fa6:	4b20      	ldr	r3, [pc, #128]	; (8001028 <HAL_TIM_IC_CaptureCallback+0xa0>)
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	6a1a      	ldr	r2, [r3, #32]
 8000fac:	4b1e      	ldr	r3, [pc, #120]	; (8001028 <HAL_TIM_IC_CaptureCallback+0xa0>)
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	f022 020a 	bic.w	r2, r2, #10
 8000fb4:	621a      	str	r2, [r3, #32]
 8000fb6:	4b1c      	ldr	r3, [pc, #112]	; (8001028 <HAL_TIM_IC_CaptureCallback+0xa0>)
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	6a1a      	ldr	r2, [r3, #32]
 8000fbc:	4b1a      	ldr	r3, [pc, #104]	; (8001028 <HAL_TIM_IC_CaptureCallback+0xa0>)
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	f042 0202 	orr.w	r2, r2, #2
 8000fc4:	621a      	str	r2, [r3, #32]
		State++;
 8000fc6:	4b16      	ldr	r3, [pc, #88]	; (8001020 <HAL_TIM_IC_CaptureCallback+0x98>)
 8000fc8:	781b      	ldrb	r3, [r3, #0]
 8000fca:	b2db      	uxtb	r3, r3
 8000fcc:	3301      	adds	r3, #1
 8000fce:	b2da      	uxtb	r2, r3
 8000fd0:	4b13      	ldr	r3, [pc, #76]	; (8001020 <HAL_TIM_IC_CaptureCallback+0x98>)
 8000fd2:	701a      	strb	r2, [r3, #0]
	else {
		/*nothing**/
	}


}
 8000fd4:	e01e      	b.n	8001014 <HAL_TIM_IC_CaptureCallback+0x8c>
	else if (State == 1) {
 8000fd6:	4b12      	ldr	r3, [pc, #72]	; (8001020 <HAL_TIM_IC_CaptureCallback+0x98>)
 8000fd8:	781b      	ldrb	r3, [r3, #0]
 8000fda:	b2db      	uxtb	r3, r3
 8000fdc:	2b01      	cmp	r3, #1
 8000fde:	d119      	bne.n	8001014 <HAL_TIM_IC_CaptureCallback+0x8c>
		TIMEON = TIM1->CCR1;
 8000fe0:	4b10      	ldr	r3, [pc, #64]	; (8001024 <HAL_TIM_IC_CaptureCallback+0x9c>)
 8000fe2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000fe4:	b29a      	uxth	r2, r3
 8000fe6:	4b11      	ldr	r3, [pc, #68]	; (800102c <HAL_TIM_IC_CaptureCallback+0xa4>)
 8000fe8:	801a      	strh	r2, [r3, #0]
		__HAL_TIM_SET_CAPTUREPOLARITY(&htim1 ,TIM_CHANNEL_1 ,TIM_INPUTCHANNELPOLARITY_RISING) ;
 8000fea:	4b0f      	ldr	r3, [pc, #60]	; (8001028 <HAL_TIM_IC_CaptureCallback+0xa0>)
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	6a1a      	ldr	r2, [r3, #32]
 8000ff0:	4b0d      	ldr	r3, [pc, #52]	; (8001028 <HAL_TIM_IC_CaptureCallback+0xa0>)
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	f022 020a 	bic.w	r2, r2, #10
 8000ff8:	621a      	str	r2, [r3, #32]
 8000ffa:	4b0b      	ldr	r3, [pc, #44]	; (8001028 <HAL_TIM_IC_CaptureCallback+0xa0>)
 8000ffc:	681a      	ldr	r2, [r3, #0]
 8000ffe:	4b0a      	ldr	r3, [pc, #40]	; (8001028 <HAL_TIM_IC_CaptureCallback+0xa0>)
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	6a12      	ldr	r2, [r2, #32]
 8001004:	621a      	str	r2, [r3, #32]
		State++;
 8001006:	4b06      	ldr	r3, [pc, #24]	; (8001020 <HAL_TIM_IC_CaptureCallback+0x98>)
 8001008:	781b      	ldrb	r3, [r3, #0]
 800100a:	b2db      	uxtb	r3, r3
 800100c:	3301      	adds	r3, #1
 800100e:	b2da      	uxtb	r2, r3
 8001010:	4b03      	ldr	r3, [pc, #12]	; (8001020 <HAL_TIM_IC_CaptureCallback+0x98>)
 8001012:	701a      	strb	r2, [r3, #0]
}
 8001014:	bf00      	nop
 8001016:	370c      	adds	r7, #12
 8001018:	46bd      	mov	sp, r7
 800101a:	bc80      	pop	{r7}
 800101c:	4770      	bx	lr
 800101e:	bf00      	nop
 8001020:	20000096 	.word	0x20000096
 8001024:	40012c00 	.word	0x40012c00
 8001028:	20000338 	.word	0x20000338
 800102c:	20000094 	.word	0x20000094

08001030 <ICU_VoidGet_TON>:

/* USER CODE BEGIN 1 */
void ICU_VoidGet_TON( uint32_t*Copy_u32_TON_microSec) {
 8001030:	b480      	push	{r7}
 8001032:	b083      	sub	sp, #12
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]



	if (State == 2) {
 8001038:	4b09      	ldr	r3, [pc, #36]	; (8001060 <ICU_VoidGet_TON+0x30>)
 800103a:	781b      	ldrb	r3, [r3, #0]
 800103c:	b2db      	uxtb	r3, r3
 800103e:	2b02      	cmp	r3, #2
 8001040:	d108      	bne.n	8001054 <ICU_VoidGet_TON+0x24>

		State = 0;
 8001042:	4b07      	ldr	r3, [pc, #28]	; (8001060 <ICU_VoidGet_TON+0x30>)
 8001044:	2200      	movs	r2, #0
 8001046:	701a      	strb	r2, [r3, #0]

		*Copy_u32_TON_microSec = (TIMEON );
 8001048:	4b06      	ldr	r3, [pc, #24]	; (8001064 <ICU_VoidGet_TON+0x34>)
 800104a:	881b      	ldrh	r3, [r3, #0]
 800104c:	b29b      	uxth	r3, r3
 800104e:	461a      	mov	r2, r3
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	601a      	str	r2, [r3, #0]
	else {
		/*nothing*/
	}


}
 8001054:	bf00      	nop
 8001056:	370c      	adds	r7, #12
 8001058:	46bd      	mov	sp, r7
 800105a:	bc80      	pop	{r7}
 800105c:	4770      	bx	lr
 800105e:	bf00      	nop
 8001060:	20000096 	.word	0x20000096
 8001064:	20000094 	.word	0x20000094

08001068 <UltraSonic_INIT>:

void UltraSonic_INIT(void) {
 8001068:	b580      	push	{r7, lr}
 800106a:	af00      	add	r7, sp, #0

	HAL_NVIC_EnableIRQ(TIM1_CC_IRQn) ;
 800106c:	201b      	movs	r0, #27
 800106e:	f001 f86e 	bl	800214e <HAL_NVIC_EnableIRQ>
	HAL_TIM_IC_Start_IT(&htim1 ,TIM_CHANNEL_1) ;
 8001072:	2100      	movs	r1, #0
 8001074:	4802      	ldr	r0, [pc, #8]	; (8001080 <UltraSonic_INIT+0x18>)
 8001076:	f002 f8d7 	bl	8003228 <HAL_TIM_IC_Start_IT>

}
 800107a:	bf00      	nop
 800107c:	bd80      	pop	{r7, pc}
 800107e:	bf00      	nop
 8001080:	20000338 	.word	0x20000338
 8001084:	00000000 	.word	0x00000000

08001088 <UltraSonic_Get_Distance>:

void UltraSonic_Get_Distance(float*Distance_CM) {
 8001088:	b580      	push	{r7, lr}
 800108a:	b084      	sub	sp, #16
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]


	uint32_t TON_microSec =0 ;
 8001090:	2300      	movs	r3, #0
 8001092:	60fb      	str	r3, [r7, #12]


	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET);
 8001094:	2200      	movs	r2, #0
 8001096:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800109a:	4825      	ldr	r0, [pc, #148]	; (8001130 <UltraSonic_Get_Distance+0xa8>)
 800109c:	f001 faa8 	bl	80025f0 <HAL_GPIO_WritePin>
	vTaskDelay(3);
 80010a0:	2003      	movs	r0, #3
 80010a2:	f004 fcad 	bl	8005a00 <vTaskDelay>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_SET);
 80010a6:	2201      	movs	r2, #1
 80010a8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80010ac:	4820      	ldr	r0, [pc, #128]	; (8001130 <UltraSonic_Get_Distance+0xa8>)
 80010ae:	f001 fa9f 	bl	80025f0 <HAL_GPIO_WritePin>
	vTaskDelay(10);
 80010b2:	200a      	movs	r0, #10
 80010b4:	f004 fca4 	bl	8005a00 <vTaskDelay>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET);
 80010b8:	2200      	movs	r2, #0
 80010ba:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80010be:	481c      	ldr	r0, [pc, #112]	; (8001130 <UltraSonic_Get_Distance+0xa8>)
 80010c0:	f001 fa96 	bl	80025f0 <HAL_GPIO_WritePin>

	__HAL_TIM_ENABLE_IT(&htim1, TIM_IT_CC1);
 80010c4:	4b1b      	ldr	r3, [pc, #108]	; (8001134 <UltraSonic_Get_Distance+0xac>)
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	68da      	ldr	r2, [r3, #12]
 80010ca:	4b1a      	ldr	r3, [pc, #104]	; (8001134 <UltraSonic_Get_Distance+0xac>)
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	f042 0202 	orr.w	r2, r2, #2
 80010d2:	60da      	str	r2, [r3, #12]
	// Sense ECHO to measure distance

	ICU_VoidGet_TON( &TON_microSec) ;
 80010d4:	f107 030c 	add.w	r3, r7, #12
 80010d8:	4618      	mov	r0, r3
 80010da:	f7ff ffa9 	bl	8001030 <ICU_VoidGet_TON>
	*Distance_CM = (velocity * TON_microSec/10000.0 )/ 2.0;    // CENTIMETER
 80010de:	f240 1357 	movw	r3, #343	; 0x157
 80010e2:	461a      	mov	r2, r3
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	fb02 f303 	mul.w	r3, r2, r3
 80010ea:	4618      	mov	r0, r3
 80010ec:	f7ff f972 	bl	80003d4 <__aeabi_ui2d>
 80010f0:	a30d      	add	r3, pc, #52	; (adr r3, 8001128 <UltraSonic_Get_Distance+0xa0>)
 80010f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010f6:	f7ff fb11 	bl	800071c <__aeabi_ddiv>
 80010fa:	4602      	mov	r2, r0
 80010fc:	460b      	mov	r3, r1
 80010fe:	4610      	mov	r0, r2
 8001100:	4619      	mov	r1, r3
 8001102:	f04f 0200 	mov.w	r2, #0
 8001106:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800110a:	f7ff fb07 	bl	800071c <__aeabi_ddiv>
 800110e:	4602      	mov	r2, r0
 8001110:	460b      	mov	r3, r1
 8001112:	4610      	mov	r0, r2
 8001114:	4619      	mov	r1, r3
 8001116:	f7ff fbe9 	bl	80008ec <__aeabi_d2f>
 800111a:	4602      	mov	r2, r0
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	601a      	str	r2, [r3, #0]

}
 8001120:	bf00      	nop
 8001122:	3710      	adds	r7, #16
 8001124:	46bd      	mov	sp, r7
 8001126:	bd80      	pop	{r7, pc}
 8001128:	00000000 	.word	0x00000000
 800112c:	40c38800 	.word	0x40c38800
 8001130:	40010c00 	.word	0x40010c00
 8001134:	20000338 	.word	0x20000338

08001138 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8001138:	b480      	push	{r7}
 800113a:	b085      	sub	sp, #20
 800113c:	af00      	add	r7, sp, #0
 800113e:	60f8      	str	r0, [r7, #12]
 8001140:	60b9      	str	r1, [r7, #8]
 8001142:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	4a06      	ldr	r2, [pc, #24]	; (8001160 <vApplicationGetIdleTaskMemory+0x28>)
 8001148:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800114a:	68bb      	ldr	r3, [r7, #8]
 800114c:	4a05      	ldr	r2, [pc, #20]	; (8001164 <vApplicationGetIdleTaskMemory+0x2c>)
 800114e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	2280      	movs	r2, #128	; 0x80
 8001154:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8001156:	bf00      	nop
 8001158:	3714      	adds	r7, #20
 800115a:	46bd      	mov	sp, r7
 800115c:	bc80      	pop	{r7}
 800115e:	4770      	bx	lr
 8001160:	20000098 	.word	0x20000098
 8001164:	20000138 	.word	0x20000138

08001168 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001168:	b5b0      	push	{r4, r5, r7, lr}
 800116a:	b08a      	sub	sp, #40	; 0x28
 800116c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800116e:	f000 fe99 	bl	8001ea4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001172:	f000 f875 	bl	8001260 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001176:	f000 fa2d 	bl	80015d4 <MX_GPIO_Init>
  MX_TIM1_Init();
 800117a:	f000 f8b3 	bl	80012e4 <MX_TIM1_Init>
  MX_TIM3_Init();
 800117e:	f000 f907 	bl	8001390 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 8001182:	f000 f9d3 	bl	800152c <MX_USART1_UART_Init>
  MX_TIM4_Init();
 8001186:	f000 f95b 	bl	8001440 <MX_TIM4_Init>
  MX_USART3_UART_Init();
 800118a:	f000 f9f9 	bl	8001580 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
	EG_Action = xEventGroupCreate();
 800118e:	f004 f853 	bl	8005238 <xEventGroupCreate>
 8001192:	4603      	mov	r3, r0
 8001194:	4a29      	ldr	r2, [pc, #164]	; (800123c <main+0xd4>)
 8001196:	6013      	str	r3, [r2, #0]
	EG_V2V = xEventGroupCreate();
 8001198:	f004 f84e 	bl	8005238 <xEventGroupCreate>
 800119c:	4603      	mov	r3, r0
 800119e:	4a28      	ldr	r2, [pc, #160]	; (8001240 <main+0xd8>)
 80011a0:	6013      	str	r3, [r2, #0]
	xTaskCreate(BLE_Read_Task, NULL, 100 , NULL , 1 , NULL);
 80011a2:	2300      	movs	r3, #0
 80011a4:	9301      	str	r3, [sp, #4]
 80011a6:	2301      	movs	r3, #1
 80011a8:	9300      	str	r3, [sp, #0]
 80011aa:	2300      	movs	r3, #0
 80011ac:	2264      	movs	r2, #100	; 0x64
 80011ae:	2100      	movs	r1, #0
 80011b0:	4824      	ldr	r0, [pc, #144]	; (8001244 <main+0xdc>)
 80011b2:	f004 fae0 	bl	8005776 <xTaskCreate>
	xTaskCreate(V2V_Task, NULL, 100 , NULL , 2 , NULL);
 80011b6:	2300      	movs	r3, #0
 80011b8:	9301      	str	r3, [sp, #4]
 80011ba:	2302      	movs	r3, #2
 80011bc:	9300      	str	r3, [sp, #0]
 80011be:	2300      	movs	r3, #0
 80011c0:	2264      	movs	r2, #100	; 0x64
 80011c2:	2100      	movs	r1, #0
 80011c4:	4820      	ldr	r0, [pc, #128]	; (8001248 <main+0xe0>)
 80011c6:	f004 fad6 	bl	8005776 <xTaskCreate>
	xTaskCreate(ACC_Task, NULL, 100 , NULL , 3 , NULL);
 80011ca:	2300      	movs	r3, #0
 80011cc:	9301      	str	r3, [sp, #4]
 80011ce:	2303      	movs	r3, #3
 80011d0:	9300      	str	r3, [sp, #0]
 80011d2:	2300      	movs	r3, #0
 80011d4:	2264      	movs	r2, #100	; 0x64
 80011d6:	2100      	movs	r1, #0
 80011d8:	481c      	ldr	r0, [pc, #112]	; (800124c <main+0xe4>)
 80011da:	f004 facc 	bl	8005776 <xTaskCreate>
	xTaskCreate(Action_Task, NULL, 100 , NULL , 4 , NULL);
 80011de:	2300      	movs	r3, #0
 80011e0:	9301      	str	r3, [sp, #4]
 80011e2:	2304      	movs	r3, #4
 80011e4:	9300      	str	r3, [sp, #0]
 80011e6:	2300      	movs	r3, #0
 80011e8:	2264      	movs	r2, #100	; 0x64
 80011ea:	2100      	movs	r1, #0
 80011ec:	4818      	ldr	r0, [pc, #96]	; (8001250 <main+0xe8>)
 80011ee:	f004 fac2 	bl	8005776 <xTaskCreate>
	xTaskCreate(Display_Task, NULL, 100 , NULL , 5 , NULL);
 80011f2:	2300      	movs	r3, #0
 80011f4:	9301      	str	r3, [sp, #4]
 80011f6:	2305      	movs	r3, #5
 80011f8:	9300      	str	r3, [sp, #0]
 80011fa:	2300      	movs	r3, #0
 80011fc:	2264      	movs	r2, #100	; 0x64
 80011fe:	2100      	movs	r1, #0
 8001200:	4814      	ldr	r0, [pc, #80]	; (8001254 <main+0xec>)
 8001202:	f004 fab8 	bl	8005776 <xTaskCreate>
	UltraSonic_INIT();
 8001206:	f7ff ff2f 	bl	8001068 <UltraSonic_INIT>
	DC_Motor_Init();
 800120a:	f7ff fc55 	bl	8000ab8 <DC_Motor_Init>


	vTaskStartScheduler();
 800120e:	f004 fc2b 	bl	8005a68 <vTaskStartScheduler>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8001212:	4b11      	ldr	r3, [pc, #68]	; (8001258 <main+0xf0>)
 8001214:	1d3c      	adds	r4, r7, #4
 8001216:	461d      	mov	r5, r3
 8001218:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800121a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800121c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001220:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8001224:	1d3b      	adds	r3, r7, #4
 8001226:	2100      	movs	r1, #0
 8001228:	4618      	mov	r0, r3
 800122a:	f003 ffa5 	bl	8005178 <osThreadCreate>
 800122e:	4603      	mov	r3, r0
 8001230:	4a0a      	ldr	r2, [pc, #40]	; (800125c <main+0xf4>)
 8001232:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8001234:	f003 ff99 	bl	800516a <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
 8001238:	e7fe      	b.n	8001238 <main+0xd0>
 800123a:	bf00      	nop
 800123c:	200004a4 	.word	0x200004a4
 8001240:	200004ac 	.word	0x200004ac
 8001244:	080016ad 	.word	0x080016ad
 8001248:	0800173d 	.word	0x0800173d
 800124c:	080017f1 	.word	0x080017f1
 8001250:	080018d1 	.word	0x080018d1
 8001254:	080019e1 	.word	0x080019e1
 8001258:	08006be4 	.word	0x08006be4
 800125c:	200004a0 	.word	0x200004a0

08001260 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b090      	sub	sp, #64	; 0x40
 8001264:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001266:	f107 0318 	add.w	r3, r7, #24
 800126a:	2228      	movs	r2, #40	; 0x28
 800126c:	2100      	movs	r1, #0
 800126e:	4618      	mov	r0, r3
 8001270:	f005 fbce 	bl	8006a10 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001274:	1d3b      	adds	r3, r7, #4
 8001276:	2200      	movs	r2, #0
 8001278:	601a      	str	r2, [r3, #0]
 800127a:	605a      	str	r2, [r3, #4]
 800127c:	609a      	str	r2, [r3, #8]
 800127e:	60da      	str	r2, [r3, #12]
 8001280:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001282:	2302      	movs	r3, #2
 8001284:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001286:	2301      	movs	r3, #1
 8001288:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800128a:	2310      	movs	r3, #16
 800128c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800128e:	2302      	movs	r3, #2
 8001290:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8001292:	2300      	movs	r3, #0
 8001294:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8001296:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 800129a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800129c:	f107 0318 	add.w	r3, r7, #24
 80012a0:	4618      	mov	r0, r3
 80012a2:	f001 f9bd 	bl	8002620 <HAL_RCC_OscConfig>
 80012a6:	4603      	mov	r3, r0
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d001      	beq.n	80012b0 <SystemClock_Config+0x50>
  {
    Error_Handler();
 80012ac:	f000 fbf2 	bl	8001a94 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012b0:	230f      	movs	r3, #15
 80012b2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012b4:	2302      	movs	r3, #2
 80012b6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012b8:	2300      	movs	r3, #0
 80012ba:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80012bc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80012c0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80012c2:	2300      	movs	r3, #0
 80012c4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80012c6:	1d3b      	adds	r3, r7, #4
 80012c8:	2102      	movs	r1, #2
 80012ca:	4618      	mov	r0, r3
 80012cc:	f001 fc2a 	bl	8002b24 <HAL_RCC_ClockConfig>
 80012d0:	4603      	mov	r3, r0
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d001      	beq.n	80012da <SystemClock_Config+0x7a>
  {
    Error_Handler();
 80012d6:	f000 fbdd 	bl	8001a94 <Error_Handler>
  }
}
 80012da:	bf00      	nop
 80012dc:	3740      	adds	r7, #64	; 0x40
 80012de:	46bd      	mov	sp, r7
 80012e0:	bd80      	pop	{r7, pc}
	...

080012e4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b086      	sub	sp, #24
 80012e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012ea:	f107 0310 	add.w	r3, r7, #16
 80012ee:	2200      	movs	r2, #0
 80012f0:	601a      	str	r2, [r3, #0]
 80012f2:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80012f4:	463b      	mov	r3, r7
 80012f6:	2200      	movs	r2, #0
 80012f8:	601a      	str	r2, [r3, #0]
 80012fa:	605a      	str	r2, [r3, #4]
 80012fc:	609a      	str	r2, [r3, #8]
 80012fe:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001300:	4b21      	ldr	r3, [pc, #132]	; (8001388 <MX_TIM1_Init+0xa4>)
 8001302:	4a22      	ldr	r2, [pc, #136]	; (800138c <MX_TIM1_Init+0xa8>)
 8001304:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 64-1;
 8001306:	4b20      	ldr	r3, [pc, #128]	; (8001388 <MX_TIM1_Init+0xa4>)
 8001308:	223f      	movs	r2, #63	; 0x3f
 800130a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800130c:	4b1e      	ldr	r3, [pc, #120]	; (8001388 <MX_TIM1_Init+0xa4>)
 800130e:	2200      	movs	r2, #0
 8001310:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001312:	4b1d      	ldr	r3, [pc, #116]	; (8001388 <MX_TIM1_Init+0xa4>)
 8001314:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001318:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800131a:	4b1b      	ldr	r3, [pc, #108]	; (8001388 <MX_TIM1_Init+0xa4>)
 800131c:	2200      	movs	r2, #0
 800131e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001320:	4b19      	ldr	r3, [pc, #100]	; (8001388 <MX_TIM1_Init+0xa4>)
 8001322:	2200      	movs	r2, #0
 8001324:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001326:	4b18      	ldr	r3, [pc, #96]	; (8001388 <MX_TIM1_Init+0xa4>)
 8001328:	2200      	movs	r2, #0
 800132a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 800132c:	4816      	ldr	r0, [pc, #88]	; (8001388 <MX_TIM1_Init+0xa4>)
 800132e:	f001 ff2b 	bl	8003188 <HAL_TIM_IC_Init>
 8001332:	4603      	mov	r3, r0
 8001334:	2b00      	cmp	r3, #0
 8001336:	d001      	beq.n	800133c <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8001338:	f000 fbac 	bl	8001a94 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800133c:	2300      	movs	r3, #0
 800133e:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001340:	2300      	movs	r3, #0
 8001342:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001344:	f107 0310 	add.w	r3, r7, #16
 8001348:	4619      	mov	r1, r3
 800134a:	480f      	ldr	r0, [pc, #60]	; (8001388 <MX_TIM1_Init+0xa4>)
 800134c:	f002 ff7c 	bl	8004248 <HAL_TIMEx_MasterConfigSynchronization>
 8001350:	4603      	mov	r3, r0
 8001352:	2b00      	cmp	r3, #0
 8001354:	d001      	beq.n	800135a <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8001356:	f000 fb9d 	bl	8001a94 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800135a:	2300      	movs	r3, #0
 800135c:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800135e:	2301      	movs	r3, #1
 8001360:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001362:	2300      	movs	r3, #0
 8001364:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8001366:	2300      	movs	r3, #0
 8001368:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800136a:	463b      	mov	r3, r7
 800136c:	2200      	movs	r2, #0
 800136e:	4619      	mov	r1, r3
 8001370:	4805      	ldr	r0, [pc, #20]	; (8001388 <MX_TIM1_Init+0xa4>)
 8001372:	f002 f96d 	bl	8003650 <HAL_TIM_IC_ConfigChannel>
 8001376:	4603      	mov	r3, r0
 8001378:	2b00      	cmp	r3, #0
 800137a:	d001      	beq.n	8001380 <MX_TIM1_Init+0x9c>
  {
    Error_Handler();
 800137c:	f000 fb8a 	bl	8001a94 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001380:	bf00      	nop
 8001382:	3718      	adds	r7, #24
 8001384:	46bd      	mov	sp, r7
 8001386:	bd80      	pop	{r7, pc}
 8001388:	20000338 	.word	0x20000338
 800138c:	40012c00 	.word	0x40012c00

08001390 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b08a      	sub	sp, #40	; 0x28
 8001394:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001396:	f107 0320 	add.w	r3, r7, #32
 800139a:	2200      	movs	r2, #0
 800139c:	601a      	str	r2, [r3, #0]
 800139e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80013a0:	1d3b      	adds	r3, r7, #4
 80013a2:	2200      	movs	r2, #0
 80013a4:	601a      	str	r2, [r3, #0]
 80013a6:	605a      	str	r2, [r3, #4]
 80013a8:	609a      	str	r2, [r3, #8]
 80013aa:	60da      	str	r2, [r3, #12]
 80013ac:	611a      	str	r2, [r3, #16]
 80013ae:	615a      	str	r2, [r3, #20]
 80013b0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80013b2:	4b21      	ldr	r3, [pc, #132]	; (8001438 <MX_TIM3_Init+0xa8>)
 80013b4:	4a21      	ldr	r2, [pc, #132]	; (800143c <MX_TIM3_Init+0xac>)
 80013b6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 32-1;
 80013b8:	4b1f      	ldr	r3, [pc, #124]	; (8001438 <MX_TIM3_Init+0xa8>)
 80013ba:	221f      	movs	r2, #31
 80013bc:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013be:	4b1e      	ldr	r3, [pc, #120]	; (8001438 <MX_TIM3_Init+0xa8>)
 80013c0:	2200      	movs	r2, #0
 80013c2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100-1;
 80013c4:	4b1c      	ldr	r3, [pc, #112]	; (8001438 <MX_TIM3_Init+0xa8>)
 80013c6:	2263      	movs	r2, #99	; 0x63
 80013c8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013ca:	4b1b      	ldr	r3, [pc, #108]	; (8001438 <MX_TIM3_Init+0xa8>)
 80013cc:	2200      	movs	r2, #0
 80013ce:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013d0:	4b19      	ldr	r3, [pc, #100]	; (8001438 <MX_TIM3_Init+0xa8>)
 80013d2:	2200      	movs	r2, #0
 80013d4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80013d6:	4818      	ldr	r0, [pc, #96]	; (8001438 <MX_TIM3_Init+0xa8>)
 80013d8:	f001 fd81 	bl	8002ede <HAL_TIM_PWM_Init>
 80013dc:	4603      	mov	r3, r0
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d001      	beq.n	80013e6 <MX_TIM3_Init+0x56>
  {
    Error_Handler();
 80013e2:	f000 fb57 	bl	8001a94 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013e6:	2300      	movs	r3, #0
 80013e8:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013ea:	2300      	movs	r3, #0
 80013ec:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80013ee:	f107 0320 	add.w	r3, r7, #32
 80013f2:	4619      	mov	r1, r3
 80013f4:	4810      	ldr	r0, [pc, #64]	; (8001438 <MX_TIM3_Init+0xa8>)
 80013f6:	f002 ff27 	bl	8004248 <HAL_TIMEx_MasterConfigSynchronization>
 80013fa:	4603      	mov	r3, r0
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d001      	beq.n	8001404 <MX_TIM3_Init+0x74>
  {
    Error_Handler();
 8001400:	f000 fb48 	bl	8001a94 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001404:	2360      	movs	r3, #96	; 0x60
 8001406:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001408:	2300      	movs	r3, #0
 800140a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800140c:	2300      	movs	r3, #0
 800140e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001410:	2300      	movs	r3, #0
 8001412:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001414:	1d3b      	adds	r3, r7, #4
 8001416:	2200      	movs	r2, #0
 8001418:	4619      	mov	r1, r3
 800141a:	4807      	ldr	r0, [pc, #28]	; (8001438 <MX_TIM3_Init+0xa8>)
 800141c:	f002 f9b4 	bl	8003788 <HAL_TIM_PWM_ConfigChannel>
 8001420:	4603      	mov	r3, r0
 8001422:	2b00      	cmp	r3, #0
 8001424:	d001      	beq.n	800142a <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8001426:	f000 fb35 	bl	8001a94 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800142a:	4803      	ldr	r0, [pc, #12]	; (8001438 <MX_TIM3_Init+0xa8>)
 800142c:	f000 fbf4 	bl	8001c18 <HAL_TIM_MspPostInit>

}
 8001430:	bf00      	nop
 8001432:	3728      	adds	r7, #40	; 0x28
 8001434:	46bd      	mov	sp, r7
 8001436:	bd80      	pop	{r7, pc}
 8001438:	20000380 	.word	0x20000380
 800143c:	40000400 	.word	0x40000400

08001440 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b08e      	sub	sp, #56	; 0x38
 8001444:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001446:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800144a:	2200      	movs	r2, #0
 800144c:	601a      	str	r2, [r3, #0]
 800144e:	605a      	str	r2, [r3, #4]
 8001450:	609a      	str	r2, [r3, #8]
 8001452:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001454:	f107 0320 	add.w	r3, r7, #32
 8001458:	2200      	movs	r2, #0
 800145a:	601a      	str	r2, [r3, #0]
 800145c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800145e:	1d3b      	adds	r3, r7, #4
 8001460:	2200      	movs	r2, #0
 8001462:	601a      	str	r2, [r3, #0]
 8001464:	605a      	str	r2, [r3, #4]
 8001466:	609a      	str	r2, [r3, #8]
 8001468:	60da      	str	r2, [r3, #12]
 800146a:	611a      	str	r2, [r3, #16]
 800146c:	615a      	str	r2, [r3, #20]
 800146e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001470:	4b2c      	ldr	r3, [pc, #176]	; (8001524 <MX_TIM4_Init+0xe4>)
 8001472:	4a2d      	ldr	r2, [pc, #180]	; (8001528 <MX_TIM4_Init+0xe8>)
 8001474:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 32-1;
 8001476:	4b2b      	ldr	r3, [pc, #172]	; (8001524 <MX_TIM4_Init+0xe4>)
 8001478:	221f      	movs	r2, #31
 800147a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800147c:	4b29      	ldr	r3, [pc, #164]	; (8001524 <MX_TIM4_Init+0xe4>)
 800147e:	2200      	movs	r2, #0
 8001480:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 100-1;
 8001482:	4b28      	ldr	r3, [pc, #160]	; (8001524 <MX_TIM4_Init+0xe4>)
 8001484:	2263      	movs	r2, #99	; 0x63
 8001486:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001488:	4b26      	ldr	r3, [pc, #152]	; (8001524 <MX_TIM4_Init+0xe4>)
 800148a:	2200      	movs	r2, #0
 800148c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800148e:	4b25      	ldr	r3, [pc, #148]	; (8001524 <MX_TIM4_Init+0xe4>)
 8001490:	2200      	movs	r2, #0
 8001492:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001494:	4823      	ldr	r0, [pc, #140]	; (8001524 <MX_TIM4_Init+0xe4>)
 8001496:	f001 fcd3 	bl	8002e40 <HAL_TIM_Base_Init>
 800149a:	4603      	mov	r3, r0
 800149c:	2b00      	cmp	r3, #0
 800149e:	d001      	beq.n	80014a4 <MX_TIM4_Init+0x64>
  {
    Error_Handler();
 80014a0:	f000 faf8 	bl	8001a94 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80014a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014a8:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80014aa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80014ae:	4619      	mov	r1, r3
 80014b0:	481c      	ldr	r0, [pc, #112]	; (8001524 <MX_TIM4_Init+0xe4>)
 80014b2:	f002 fa2b 	bl	800390c <HAL_TIM_ConfigClockSource>
 80014b6:	4603      	mov	r3, r0
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d001      	beq.n	80014c0 <MX_TIM4_Init+0x80>
  {
    Error_Handler();
 80014bc:	f000 faea 	bl	8001a94 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80014c0:	4818      	ldr	r0, [pc, #96]	; (8001524 <MX_TIM4_Init+0xe4>)
 80014c2:	f001 fd0c 	bl	8002ede <HAL_TIM_PWM_Init>
 80014c6:	4603      	mov	r3, r0
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d001      	beq.n	80014d0 <MX_TIM4_Init+0x90>
  {
    Error_Handler();
 80014cc:	f000 fae2 	bl	8001a94 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014d0:	2300      	movs	r3, #0
 80014d2:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014d4:	2300      	movs	r3, #0
 80014d6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80014d8:	f107 0320 	add.w	r3, r7, #32
 80014dc:	4619      	mov	r1, r3
 80014de:	4811      	ldr	r0, [pc, #68]	; (8001524 <MX_TIM4_Init+0xe4>)
 80014e0:	f002 feb2 	bl	8004248 <HAL_TIMEx_MasterConfigSynchronization>
 80014e4:	4603      	mov	r3, r0
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d001      	beq.n	80014ee <MX_TIM4_Init+0xae>
  {
    Error_Handler();
 80014ea:	f000 fad3 	bl	8001a94 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80014ee:	2360      	movs	r3, #96	; 0x60
 80014f0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80014f2:	2300      	movs	r3, #0
 80014f4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80014f6:	2300      	movs	r3, #0
 80014f8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80014fa:	2300      	movs	r3, #0
 80014fc:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80014fe:	1d3b      	adds	r3, r7, #4
 8001500:	2200      	movs	r2, #0
 8001502:	4619      	mov	r1, r3
 8001504:	4807      	ldr	r0, [pc, #28]	; (8001524 <MX_TIM4_Init+0xe4>)
 8001506:	f002 f93f 	bl	8003788 <HAL_TIM_PWM_ConfigChannel>
 800150a:	4603      	mov	r3, r0
 800150c:	2b00      	cmp	r3, #0
 800150e:	d001      	beq.n	8001514 <MX_TIM4_Init+0xd4>
  {
    Error_Handler();
 8001510:	f000 fac0 	bl	8001a94 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001514:	4803      	ldr	r0, [pc, #12]	; (8001524 <MX_TIM4_Init+0xe4>)
 8001516:	f000 fb7f 	bl	8001c18 <HAL_TIM_MspPostInit>

}
 800151a:	bf00      	nop
 800151c:	3738      	adds	r7, #56	; 0x38
 800151e:	46bd      	mov	sp, r7
 8001520:	bd80      	pop	{r7, pc}
 8001522:	bf00      	nop
 8001524:	200003c8 	.word	0x200003c8
 8001528:	40000800 	.word	0x40000800

0800152c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001530:	4b11      	ldr	r3, [pc, #68]	; (8001578 <MX_USART1_UART_Init+0x4c>)
 8001532:	4a12      	ldr	r2, [pc, #72]	; (800157c <MX_USART1_UART_Init+0x50>)
 8001534:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8001536:	4b10      	ldr	r3, [pc, #64]	; (8001578 <MX_USART1_UART_Init+0x4c>)
 8001538:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800153c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800153e:	4b0e      	ldr	r3, [pc, #56]	; (8001578 <MX_USART1_UART_Init+0x4c>)
 8001540:	2200      	movs	r2, #0
 8001542:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001544:	4b0c      	ldr	r3, [pc, #48]	; (8001578 <MX_USART1_UART_Init+0x4c>)
 8001546:	2200      	movs	r2, #0
 8001548:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800154a:	4b0b      	ldr	r3, [pc, #44]	; (8001578 <MX_USART1_UART_Init+0x4c>)
 800154c:	2200      	movs	r2, #0
 800154e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001550:	4b09      	ldr	r3, [pc, #36]	; (8001578 <MX_USART1_UART_Init+0x4c>)
 8001552:	220c      	movs	r2, #12
 8001554:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001556:	4b08      	ldr	r3, [pc, #32]	; (8001578 <MX_USART1_UART_Init+0x4c>)
 8001558:	2200      	movs	r2, #0
 800155a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800155c:	4b06      	ldr	r3, [pc, #24]	; (8001578 <MX_USART1_UART_Init+0x4c>)
 800155e:	2200      	movs	r2, #0
 8001560:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001562:	4805      	ldr	r0, [pc, #20]	; (8001578 <MX_USART1_UART_Init+0x4c>)
 8001564:	f002 fee0 	bl	8004328 <HAL_UART_Init>
 8001568:	4603      	mov	r3, r0
 800156a:	2b00      	cmp	r3, #0
 800156c:	d001      	beq.n	8001572 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800156e:	f000 fa91 	bl	8001a94 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001572:	bf00      	nop
 8001574:	bd80      	pop	{r7, pc}
 8001576:	bf00      	nop
 8001578:	20000410 	.word	0x20000410
 800157c:	40013800 	.word	0x40013800

08001580 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001584:	4b11      	ldr	r3, [pc, #68]	; (80015cc <MX_USART3_UART_Init+0x4c>)
 8001586:	4a12      	ldr	r2, [pc, #72]	; (80015d0 <MX_USART3_UART_Init+0x50>)
 8001588:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 800158a:	4b10      	ldr	r3, [pc, #64]	; (80015cc <MX_USART3_UART_Init+0x4c>)
 800158c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001590:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001592:	4b0e      	ldr	r3, [pc, #56]	; (80015cc <MX_USART3_UART_Init+0x4c>)
 8001594:	2200      	movs	r2, #0
 8001596:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001598:	4b0c      	ldr	r3, [pc, #48]	; (80015cc <MX_USART3_UART_Init+0x4c>)
 800159a:	2200      	movs	r2, #0
 800159c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800159e:	4b0b      	ldr	r3, [pc, #44]	; (80015cc <MX_USART3_UART_Init+0x4c>)
 80015a0:	2200      	movs	r2, #0
 80015a2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80015a4:	4b09      	ldr	r3, [pc, #36]	; (80015cc <MX_USART3_UART_Init+0x4c>)
 80015a6:	220c      	movs	r2, #12
 80015a8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015aa:	4b08      	ldr	r3, [pc, #32]	; (80015cc <MX_USART3_UART_Init+0x4c>)
 80015ac:	2200      	movs	r2, #0
 80015ae:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80015b0:	4b06      	ldr	r3, [pc, #24]	; (80015cc <MX_USART3_UART_Init+0x4c>)
 80015b2:	2200      	movs	r2, #0
 80015b4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80015b6:	4805      	ldr	r0, [pc, #20]	; (80015cc <MX_USART3_UART_Init+0x4c>)
 80015b8:	f002 feb6 	bl	8004328 <HAL_UART_Init>
 80015bc:	4603      	mov	r3, r0
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d001      	beq.n	80015c6 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80015c2:	f000 fa67 	bl	8001a94 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80015c6:	bf00      	nop
 80015c8:	bd80      	pop	{r7, pc}
 80015ca:	bf00      	nop
 80015cc:	20000458 	.word	0x20000458
 80015d0:	40004800 	.word	0x40004800

080015d4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b088      	sub	sp, #32
 80015d8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015da:	f107 0310 	add.w	r3, r7, #16
 80015de:	2200      	movs	r2, #0
 80015e0:	601a      	str	r2, [r3, #0]
 80015e2:	605a      	str	r2, [r3, #4]
 80015e4:	609a      	str	r2, [r3, #8]
 80015e6:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80015e8:	4b2d      	ldr	r3, [pc, #180]	; (80016a0 <MX_GPIO_Init+0xcc>)
 80015ea:	699b      	ldr	r3, [r3, #24]
 80015ec:	4a2c      	ldr	r2, [pc, #176]	; (80016a0 <MX_GPIO_Init+0xcc>)
 80015ee:	f043 0310 	orr.w	r3, r3, #16
 80015f2:	6193      	str	r3, [r2, #24]
 80015f4:	4b2a      	ldr	r3, [pc, #168]	; (80016a0 <MX_GPIO_Init+0xcc>)
 80015f6:	699b      	ldr	r3, [r3, #24]
 80015f8:	f003 0310 	and.w	r3, r3, #16
 80015fc:	60fb      	str	r3, [r7, #12]
 80015fe:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001600:	4b27      	ldr	r3, [pc, #156]	; (80016a0 <MX_GPIO_Init+0xcc>)
 8001602:	699b      	ldr	r3, [r3, #24]
 8001604:	4a26      	ldr	r2, [pc, #152]	; (80016a0 <MX_GPIO_Init+0xcc>)
 8001606:	f043 0320 	orr.w	r3, r3, #32
 800160a:	6193      	str	r3, [r2, #24]
 800160c:	4b24      	ldr	r3, [pc, #144]	; (80016a0 <MX_GPIO_Init+0xcc>)
 800160e:	699b      	ldr	r3, [r3, #24]
 8001610:	f003 0320 	and.w	r3, r3, #32
 8001614:	60bb      	str	r3, [r7, #8]
 8001616:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001618:	4b21      	ldr	r3, [pc, #132]	; (80016a0 <MX_GPIO_Init+0xcc>)
 800161a:	699b      	ldr	r3, [r3, #24]
 800161c:	4a20      	ldr	r2, [pc, #128]	; (80016a0 <MX_GPIO_Init+0xcc>)
 800161e:	f043 0304 	orr.w	r3, r3, #4
 8001622:	6193      	str	r3, [r2, #24]
 8001624:	4b1e      	ldr	r3, [pc, #120]	; (80016a0 <MX_GPIO_Init+0xcc>)
 8001626:	699b      	ldr	r3, [r3, #24]
 8001628:	f003 0304 	and.w	r3, r3, #4
 800162c:	607b      	str	r3, [r7, #4]
 800162e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001630:	4b1b      	ldr	r3, [pc, #108]	; (80016a0 <MX_GPIO_Init+0xcc>)
 8001632:	699b      	ldr	r3, [r3, #24]
 8001634:	4a1a      	ldr	r2, [pc, #104]	; (80016a0 <MX_GPIO_Init+0xcc>)
 8001636:	f043 0308 	orr.w	r3, r3, #8
 800163a:	6193      	str	r3, [r2, #24]
 800163c:	4b18      	ldr	r3, [pc, #96]	; (80016a0 <MX_GPIO_Init+0xcc>)
 800163e:	699b      	ldr	r3, [r3, #24]
 8001640:	f003 0308 	and.w	r3, r3, #8
 8001644:	603b      	str	r3, [r7, #0]
 8001646:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001648:	2200      	movs	r2, #0
 800164a:	21bf      	movs	r1, #191	; 0xbf
 800164c:	4815      	ldr	r0, [pc, #84]	; (80016a4 <MX_GPIO_Init+0xd0>)
 800164e:	f000 ffcf 	bl	80025f0 <HAL_GPIO_WritePin>
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15, GPIO_PIN_RESET);
 8001652:	2200      	movs	r2, #0
 8001654:	f248 0103 	movw	r1, #32771	; 0x8003
 8001658:	4813      	ldr	r0, [pc, #76]	; (80016a8 <MX_GPIO_Init+0xd4>)
 800165a:	f000 ffc9 	bl	80025f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA0 PA1 PA2 PA3
                           PA4 PA5 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 800165e:	23bf      	movs	r3, #191	; 0xbf
 8001660:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001662:	2301      	movs	r3, #1
 8001664:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001666:	2300      	movs	r3, #0
 8001668:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800166a:	2302      	movs	r3, #2
 800166c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800166e:	f107 0310 	add.w	r3, r7, #16
 8001672:	4619      	mov	r1, r3
 8001674:	480b      	ldr	r0, [pc, #44]	; (80016a4 <MX_GPIO_Init+0xd0>)
 8001676:	f000 fe37 	bl	80022e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15;
 800167a:	f248 0303 	movw	r3, #32771	; 0x8003
 800167e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001680:	2301      	movs	r3, #1
 8001682:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001684:	2300      	movs	r3, #0
 8001686:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001688:	2302      	movs	r3, #2
 800168a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800168c:	f107 0310 	add.w	r3, r7, #16
 8001690:	4619      	mov	r1, r3
 8001692:	4805      	ldr	r0, [pc, #20]	; (80016a8 <MX_GPIO_Init+0xd4>)
 8001694:	f000 fe28 	bl	80022e8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001698:	bf00      	nop
 800169a:	3720      	adds	r7, #32
 800169c:	46bd      	mov	sp, r7
 800169e:	bd80      	pop	{r7, pc}
 80016a0:	40021000 	.word	0x40021000
 80016a4:	40010800 	.word	0x40010800
 80016a8:	40010c00 	.word	0x40010c00

080016ac <BLE_Read_Task>:

/* USER CODE BEGIN 4 */
void BLE_Read_Task    (void  * argument)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b084      	sub	sp, #16
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef RetValue = HAL_ERROR;
 80016b4:	2301      	movs	r3, #1
 80016b6:	73fb      	strb	r3, [r7, #15]
	uint8_t BLE_Rer_Arr[4]={0};
 80016b8:	2300      	movs	r3, #0
 80016ba:	60bb      	str	r3, [r7, #8]
	while(1)
	{
		RetValue =  H_HC05_Recieve_Polling  (&BLE_Rer_Arr[0]);
 80016bc:	f107 0308 	add.w	r3, r7, #8
 80016c0:	4618      	mov	r0, r3
 80016c2:	f7ff fa41 	bl	8000b48 <H_HC05_Recieve_Polling>
 80016c6:	4603      	mov	r3, r0
 80016c8:	73fb      	strb	r3, [r7, #15]
		if(RetValue == HAL_OK)
 80016ca:	7bfb      	ldrb	r3, [r7, #15]
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d12f      	bne.n	8001730 <BLE_Read_Task+0x84>
		{
			switch(BLE_Rer_Arr[0])
 80016d0:	7a3b      	ldrb	r3, [r7, #8]
 80016d2:	2b45      	cmp	r3, #69	; 0x45
 80016d4:	d015      	beq.n	8001702 <BLE_Read_Task+0x56>
 80016d6:	2b53      	cmp	r3, #83	; 0x53
 80016d8:	d12a      	bne.n	8001730 <BLE_Read_Task+0x84>
			{
			case 'S' :
				switch(BLE_Rer_Arr[1])
 80016da:	7a7b      	ldrb	r3, [r7, #9]
 80016dc:	2b30      	cmp	r3, #48	; 0x30
 80016de:	d008      	beq.n	80016f2 <BLE_Read_Task+0x46>
 80016e0:	2b31      	cmp	r3, #49	; 0x31
 80016e2:	d122      	bne.n	800172a <BLE_Read_Task+0x7e>
				{
				case '1':
					xEventGroupSetBits(EG_Action,EG_SPEED_UP);
 80016e4:	4b14      	ldr	r3, [pc, #80]	; (8001738 <BLE_Read_Task+0x8c>)
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	2104      	movs	r1, #4
 80016ea:	4618      	mov	r0, r3
 80016ec:	f003 fe8c 	bl	8005408 <xEventGroupSetBits>
					break;
 80016f0:	e006      	b.n	8001700 <BLE_Read_Task+0x54>
				case '0':
					xEventGroupSetBits(EG_Action,EG_SPEED_DOWN);
 80016f2:	4b11      	ldr	r3, [pc, #68]	; (8001738 <BLE_Read_Task+0x8c>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	2108      	movs	r1, #8
 80016f8:	4618      	mov	r0, r3
 80016fa:	f003 fe85 	bl	8005408 <xEventGroupSetBits>
					break;
 80016fe:	bf00      	nop
				}
				break;
 8001700:	e013      	b.n	800172a <BLE_Read_Task+0x7e>

				case 'E' :

					switch(BLE_Rer_Arr[1])
 8001702:	7a7b      	ldrb	r3, [r7, #9]
 8001704:	2b30      	cmp	r3, #48	; 0x30
 8001706:	d008      	beq.n	800171a <BLE_Read_Task+0x6e>
 8001708:	2b31      	cmp	r3, #49	; 0x31
 800170a:	d110      	bne.n	800172e <BLE_Read_Task+0x82>
					{
					case '1':
						xEventGroupSetBits(EG_Action,EG_ENGINE_START );
 800170c:	4b0a      	ldr	r3, [pc, #40]	; (8001738 <BLE_Read_Task+0x8c>)
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	2101      	movs	r1, #1
 8001712:	4618      	mov	r0, r3
 8001714:	f003 fe78 	bl	8005408 <xEventGroupSetBits>
						break;
 8001718:	e006      	b.n	8001728 <BLE_Read_Task+0x7c>
					case '0':
						xEventGroupSetBits(EG_Action,EG_ENGINE_STOP );
 800171a:	4b07      	ldr	r3, [pc, #28]	; (8001738 <BLE_Read_Task+0x8c>)
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	2102      	movs	r1, #2
 8001720:	4618      	mov	r0, r3
 8001722:	f003 fe71 	bl	8005408 <xEventGroupSetBits>
						break;
 8001726:	bf00      	nop
					}
					break;
 8001728:	e001      	b.n	800172e <BLE_Read_Task+0x82>
				break;
 800172a:	bf00      	nop
 800172c:	e000      	b.n	8001730 <BLE_Read_Task+0x84>
					break;
 800172e:	bf00      	nop
		}
		else
		{

		}
		vTaskDelay(15);
 8001730:	200f      	movs	r0, #15
 8001732:	f004 f965 	bl	8005a00 <vTaskDelay>
		RetValue =  H_HC05_Recieve_Polling  (&BLE_Rer_Arr[0]);
 8001736:	e7c1      	b.n	80016bc <BLE_Read_Task+0x10>
 8001738:	200004a4 	.word	0x200004a4

0800173c <V2V_Task>:
	}
}

void V2V_Task (void  * argument)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b086      	sub	sp, #24
 8001740:	af02      	add	r7, sp, #8
 8001742:	6078      	str	r0, [r7, #4]
	uint8_t Local_8uLess10Mssg[4] = {'1','0','\r','\n'};
 8001744:	4b22      	ldr	r3, [pc, #136]	; (80017d0 <V2V_Task+0x94>)
 8001746:	60fb      	str	r3, [r7, #12]
	uint8_t Local_8uLess5Mssg [4] = {'0','5','\r','\n'};
 8001748:	4b22      	ldr	r3, [pc, #136]	; (80017d4 <V2V_Task+0x98>)
 800174a:	60bb      	str	r3, [r7, #8]
	while(1)
	{
		EG_V2VValue = xEventGroupWaitBits(EG_V2V,
 800174c:	4b22      	ldr	r3, [pc, #136]	; (80017d8 <V2V_Task+0x9c>)
 800174e:	6818      	ldr	r0, [r3, #0]
 8001750:	f04f 33ff 	mov.w	r3, #4294967295
 8001754:	9300      	str	r3, [sp, #0]
 8001756:	2300      	movs	r3, #0
 8001758:	2201      	movs	r2, #1
 800175a:	2103      	movs	r1, #3
 800175c:	f003 fd86 	bl	800526c <xEventGroupWaitBits>
 8001760:	4603      	mov	r3, r0
 8001762:	4a1e      	ldr	r2, [pc, #120]	; (80017dc <V2V_Task+0xa0>)
 8001764:	6013      	str	r3, [r2, #0]
				( EG_DIS_LESS_10 | EG_DIS_LESS_5) ,
				1, // Auto Clear
				0, // Or Between bits not wait for all of the events
				portMAX_DELAY);
		if(EG_V2VValue & EG_DIS_LESS_10)
 8001766:	4b1d      	ldr	r3, [pc, #116]	; (80017dc <V2V_Task+0xa0>)
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	f003 0301 	and.w	r3, r3, #1
 800176e:	2b00      	cmp	r3, #0
 8001770:	d013      	beq.n	800179a <V2V_Task+0x5e>
		{
			if(u8FlagLess10 == 1)
 8001772:	4b1b      	ldr	r3, [pc, #108]	; (80017e0 <V2V_Task+0xa4>)
 8001774:	781b      	ldrb	r3, [r3, #0]
 8001776:	2b01      	cmp	r3, #1
 8001778:	d10f      	bne.n	800179a <V2V_Task+0x5e>
			{
				Counter++;
 800177a:	4b1a      	ldr	r3, [pc, #104]	; (80017e4 <V2V_Task+0xa8>)
 800177c:	781b      	ldrb	r3, [r3, #0]
 800177e:	3301      	adds	r3, #1
 8001780:	b2da      	uxtb	r2, r3
 8001782:	4b18      	ldr	r3, [pc, #96]	; (80017e4 <V2V_Task+0xa8>)
 8001784:	701a      	strb	r2, [r3, #0]
				HAL_UART_Transmit(&huart1, Local_8uLess10Mssg, 4, 100);
 8001786:	f107 010c 	add.w	r1, r7, #12
 800178a:	2364      	movs	r3, #100	; 0x64
 800178c:	2204      	movs	r2, #4
 800178e:	4816      	ldr	r0, [pc, #88]	; (80017e8 <V2V_Task+0xac>)
 8001790:	f002 fe1a 	bl	80043c8 <HAL_UART_Transmit>
				u8FlagLess10=0;
 8001794:	4b12      	ldr	r3, [pc, #72]	; (80017e0 <V2V_Task+0xa4>)
 8001796:	2200      	movs	r2, #0
 8001798:	701a      	strb	r2, [r3, #0]
			}
		}
		if(EG_V2VValue & EG_DIS_LESS_5)
 800179a:	4b10      	ldr	r3, [pc, #64]	; (80017dc <V2V_Task+0xa0>)
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	f003 0302 	and.w	r3, r3, #2
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d0d2      	beq.n	800174c <V2V_Task+0x10>
		{
			if(u8FlagLess5 == 1)
 80017a6:	4b11      	ldr	r3, [pc, #68]	; (80017ec <V2V_Task+0xb0>)
 80017a8:	781b      	ldrb	r3, [r3, #0]
 80017aa:	2b01      	cmp	r3, #1
 80017ac:	d1ce      	bne.n	800174c <V2V_Task+0x10>
			{
				HAL_UART_Transmit(&huart1, Local_8uLess5Mssg, 4, 100);
 80017ae:	f107 0108 	add.w	r1, r7, #8
 80017b2:	2364      	movs	r3, #100	; 0x64
 80017b4:	2204      	movs	r2, #4
 80017b6:	480c      	ldr	r0, [pc, #48]	; (80017e8 <V2V_Task+0xac>)
 80017b8:	f002 fe06 	bl	80043c8 <HAL_UART_Transmit>
				Counter--;
 80017bc:	4b09      	ldr	r3, [pc, #36]	; (80017e4 <V2V_Task+0xa8>)
 80017be:	781b      	ldrb	r3, [r3, #0]
 80017c0:	3b01      	subs	r3, #1
 80017c2:	b2da      	uxtb	r2, r3
 80017c4:	4b07      	ldr	r3, [pc, #28]	; (80017e4 <V2V_Task+0xa8>)
 80017c6:	701a      	strb	r2, [r3, #0]
				u8FlagLess5=0;
 80017c8:	4b08      	ldr	r3, [pc, #32]	; (80017ec <V2V_Task+0xb0>)
 80017ca:	2200      	movs	r2, #0
 80017cc:	701a      	strb	r2, [r3, #0]
		EG_V2VValue = xEventGroupWaitBits(EG_V2V,
 80017ce:	e7bd      	b.n	800174c <V2V_Task+0x10>
 80017d0:	0a0d3031 	.word	0x0a0d3031
 80017d4:	0a0d3530 	.word	0x0a0d3530
 80017d8:	200004ac 	.word	0x200004ac
 80017dc:	200004b0 	.word	0x200004b0
 80017e0:	20000000 	.word	0x20000000
 80017e4:	200004bc 	.word	0x200004bc
 80017e8:	20000410 	.word	0x20000410
 80017ec:	20000001 	.word	0x20000001

080017f0 <ACC_Task>:
			}
		}
	}
}
void ACC_Task         (void  * argument)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b082      	sub	sp, #8
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
	 * 3) if Distance < 10cm --> ACC on (Regulate the speed & change ACC Status & Yellow Led ON)
	 * 4) if Distance < 5cm  --> Stop The Car & Red Led ON & Buzzer ON
	 */
	while(1)
	{
		if(ENGINE_ON == Engine_State)
 80017f8:	4b2d      	ldr	r3, [pc, #180]	; (80018b0 <ACC_Task+0xc0>)
 80017fa:	781b      	ldrb	r3, [r3, #0]
 80017fc:	2b01      	cmp	r3, #1
 80017fe:	d151      	bne.n	80018a4 <ACC_Task+0xb4>
		{
			UltraSonic_Get_Distance(&Distance);
 8001800:	482c      	ldr	r0, [pc, #176]	; (80018b4 <ACC_Task+0xc4>)
 8001802:	f7ff fc41 	bl	8001088 <UltraSonic_Get_Distance>
			if(Distance > 10 )
 8001806:	4b2b      	ldr	r3, [pc, #172]	; (80018b4 <ACC_Task+0xc4>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	492b      	ldr	r1, [pc, #172]	; (80018b8 <ACC_Task+0xc8>)
 800180c:	4618      	mov	r0, r3
 800180e:	f7ff f929 	bl	8000a64 <__aeabi_fcmpgt>
 8001812:	4603      	mov	r3, r0
 8001814:	2b00      	cmp	r3, #0
 8001816:	d006      	beq.n	8001826 <ACC_Task+0x36>
			{
				u8FlagLess10 = 1;
 8001818:	4b28      	ldr	r3, [pc, #160]	; (80018bc <ACC_Task+0xcc>)
 800181a:	2201      	movs	r2, #1
 800181c:	701a      	strb	r2, [r3, #0]
				u8FlagLess5 =  1;
 800181e:	4b28      	ldr	r3, [pc, #160]	; (80018c0 <ACC_Task+0xd0>)
 8001820:	2201      	movs	r2, #1
 8001822:	701a      	strb	r2, [r3, #0]
 8001824:	e03e      	b.n	80018a4 <ACC_Task+0xb4>
			}
			else if(Distance <= 10.0 && Distance > 5.0)
 8001826:	4b23      	ldr	r3, [pc, #140]	; (80018b4 <ACC_Task+0xc4>)
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	4923      	ldr	r1, [pc, #140]	; (80018b8 <ACC_Task+0xc8>)
 800182c:	4618      	mov	r0, r3
 800182e:	f7ff f905 	bl	8000a3c <__aeabi_fcmple>
 8001832:	4603      	mov	r3, r0
 8001834:	2b00      	cmp	r3, #0
 8001836:	d01c      	beq.n	8001872 <ACC_Task+0x82>
 8001838:	4b1e      	ldr	r3, [pc, #120]	; (80018b4 <ACC_Task+0xc4>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	4921      	ldr	r1, [pc, #132]	; (80018c4 <ACC_Task+0xd4>)
 800183e:	4618      	mov	r0, r3
 8001840:	f7ff f910 	bl	8000a64 <__aeabi_fcmpgt>
 8001844:	4603      	mov	r3, r0
 8001846:	2b00      	cmp	r3, #0
 8001848:	d013      	beq.n	8001872 <ACC_Task+0x82>
			{
				Duty = 20;
 800184a:	4b1f      	ldr	r3, [pc, #124]	; (80018c8 <ACC_Task+0xd8>)
 800184c:	2214      	movs	r2, #20
 800184e:	701a      	strb	r2, [r3, #0]
				DC_Motor_SetSpeed(Duty);
 8001850:	4b1d      	ldr	r3, [pc, #116]	; (80018c8 <ACC_Task+0xd8>)
 8001852:	f993 3000 	ldrsb.w	r3, [r3]
 8001856:	b2db      	uxtb	r3, r3
 8001858:	4618      	mov	r0, r3
 800185a:	f7ff f947 	bl	8000aec <DC_Motor_SetSpeed>
				u8FlagLess5 =  1;
 800185e:	4b18      	ldr	r3, [pc, #96]	; (80018c0 <ACC_Task+0xd0>)
 8001860:	2201      	movs	r2, #1
 8001862:	701a      	strb	r2, [r3, #0]
				xEventGroupSetBits(EG_V2V, EG_DIS_LESS_10);
 8001864:	4b19      	ldr	r3, [pc, #100]	; (80018cc <ACC_Task+0xdc>)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	2101      	movs	r1, #1
 800186a:	4618      	mov	r0, r3
 800186c:	f003 fdcc 	bl	8005408 <xEventGroupSetBits>
 8001870:	e018      	b.n	80018a4 <ACC_Task+0xb4>
			}
			else if(Distance < 5.0)
 8001872:	4b10      	ldr	r3, [pc, #64]	; (80018b4 <ACC_Task+0xc4>)
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	4913      	ldr	r1, [pc, #76]	; (80018c4 <ACC_Task+0xd4>)
 8001878:	4618      	mov	r0, r3
 800187a:	f7ff f8d5 	bl	8000a28 <__aeabi_fcmplt>
 800187e:	4603      	mov	r3, r0
 8001880:	2b00      	cmp	r3, #0
 8001882:	d00f      	beq.n	80018a4 <ACC_Task+0xb4>
			{
				Duty = MOTOR_MIN_SPEED;
 8001884:	4b10      	ldr	r3, [pc, #64]	; (80018c8 <ACC_Task+0xd8>)
 8001886:	2200      	movs	r2, #0
 8001888:	701a      	strb	r2, [r3, #0]
				DC_Motor_SetSpeed(Duty);
 800188a:	4b0f      	ldr	r3, [pc, #60]	; (80018c8 <ACC_Task+0xd8>)
 800188c:	f993 3000 	ldrsb.w	r3, [r3]
 8001890:	b2db      	uxtb	r3, r3
 8001892:	4618      	mov	r0, r3
 8001894:	f7ff f92a 	bl	8000aec <DC_Motor_SetSpeed>
				xEventGroupSetBits(EG_V2V, EG_DIS_LESS_5);
 8001898:	4b0c      	ldr	r3, [pc, #48]	; (80018cc <ACC_Task+0xdc>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	2102      	movs	r1, #2
 800189e:	4618      	mov	r0, r3
 80018a0:	f003 fdb2 	bl	8005408 <xEventGroupSetBits>
			else
			{

			}
		}
		vTaskDelay(300);
 80018a4:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80018a8:	f004 f8aa 	bl	8005a00 <vTaskDelay>
		if(ENGINE_ON == Engine_State)
 80018ac:	e7a4      	b.n	80017f8 <ACC_Task+0x8>
 80018ae:	bf00      	nop
 80018b0:	200004b6 	.word	0x200004b6
 80018b4:	200004b8 	.word	0x200004b8
 80018b8:	41200000 	.word	0x41200000
 80018bc:	20000000 	.word	0x20000000
 80018c0:	20000001 	.word	0x20000001
 80018c4:	40a00000 	.word	0x40a00000
 80018c8:	200004b4 	.word	0x200004b4
 80018cc:	200004ac 	.word	0x200004ac

080018d0 <Action_Task>:
	}
}
void Action_Task      (void  * argument)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b084      	sub	sp, #16
 80018d4:	af02      	add	r7, sp, #8
 80018d6:	6078      	str	r0, [r7, #4]
	while(1)
	{
		EG_Value = xEventGroupWaitBits(EG_Action,
 80018d8:	4b3d      	ldr	r3, [pc, #244]	; (80019d0 <Action_Task+0x100>)
 80018da:	6818      	ldr	r0, [r3, #0]
 80018dc:	f04f 33ff 	mov.w	r3, #4294967295
 80018e0:	9300      	str	r3, [sp, #0]
 80018e2:	2300      	movs	r3, #0
 80018e4:	2201      	movs	r2, #1
 80018e6:	210f      	movs	r1, #15
 80018e8:	f003 fcc0 	bl	800526c <xEventGroupWaitBits>
 80018ec:	4603      	mov	r3, r0
 80018ee:	4a39      	ldr	r2, [pc, #228]	; (80019d4 <Action_Task+0x104>)
 80018f0:	6013      	str	r3, [r2, #0]
				(EG_ENGINE_START | EG_ENGINE_STOP | EG_SPEED_UP | EG_SPEED_DOWN) ,
				1, // Auto Clear
				0, // Or Between bits not wait for all of the events
				portMAX_DELAY);

		if(EG_Value & EG_ENGINE_START)
 80018f2:	4b38      	ldr	r3, [pc, #224]	; (80019d4 <Action_Task+0x104>)
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	f003 0301 	and.w	r3, r3, #1
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d004      	beq.n	8001908 <Action_Task+0x38>
		{
			// Start Motor with Duty 50%
			DC_Motor_Init();
 80018fe:	f7ff f8db 	bl	8000ab8 <DC_Motor_Init>
			Engine_State = ENGINE_ON;
 8001902:	4b35      	ldr	r3, [pc, #212]	; (80019d8 <Action_Task+0x108>)
 8001904:	2201      	movs	r2, #1
 8001906:	701a      	strb	r2, [r3, #0]
		}
		if(EG_Value & EG_ENGINE_STOP)
 8001908:	4b32      	ldr	r3, [pc, #200]	; (80019d4 <Action_Task+0x104>)
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	f003 0302 	and.w	r3, r3, #2
 8001910:	2b00      	cmp	r3, #0
 8001912:	d007      	beq.n	8001924 <Action_Task+0x54>
		{
			// Stop Motor Duty 0%
			Duty =0;
 8001914:	4b31      	ldr	r3, [pc, #196]	; (80019dc <Action_Task+0x10c>)
 8001916:	2200      	movs	r2, #0
 8001918:	701a      	strb	r2, [r3, #0]
			DC_Motor_STOP();
 800191a:	f7ff f8fb 	bl	8000b14 <DC_Motor_STOP>
			Engine_State = ENGINE_OFF;
 800191e:	4b2e      	ldr	r3, [pc, #184]	; (80019d8 <Action_Task+0x108>)
 8001920:	2200      	movs	r2, #0
 8001922:	701a      	strb	r2, [r3, #0]
		}
		if(EG_Value & EG_SPEED_UP)
 8001924:	4b2b      	ldr	r3, [pc, #172]	; (80019d4 <Action_Task+0x104>)
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	f003 0304 	and.w	r3, r3, #4
 800192c:	2b00      	cmp	r3, #0
 800192e:	d023      	beq.n	8001978 <Action_Task+0xa8>
		{
			if(ENGINE_ON == Engine_State)
 8001930:	4b29      	ldr	r3, [pc, #164]	; (80019d8 <Action_Task+0x108>)
 8001932:	781b      	ldrb	r3, [r3, #0]
 8001934:	2b01      	cmp	r3, #1
 8001936:	d11f      	bne.n	8001978 <Action_Task+0xa8>
			{
				Duty+=10;
 8001938:	4b28      	ldr	r3, [pc, #160]	; (80019dc <Action_Task+0x10c>)
 800193a:	f993 3000 	ldrsb.w	r3, [r3]
 800193e:	b2db      	uxtb	r3, r3
 8001940:	330a      	adds	r3, #10
 8001942:	b2db      	uxtb	r3, r3
 8001944:	b25a      	sxtb	r2, r3
 8001946:	4b25      	ldr	r3, [pc, #148]	; (80019dc <Action_Task+0x10c>)
 8001948:	701a      	strb	r2, [r3, #0]
				if(MOTOR_MAX_SPEED < Duty)
 800194a:	4b24      	ldr	r3, [pc, #144]	; (80019dc <Action_Task+0x10c>)
 800194c:	f993 3000 	ldrsb.w	r3, [r3]
 8001950:	2b64      	cmp	r3, #100	; 0x64
 8001952:	dd0a      	ble.n	800196a <Action_Task+0x9a>
				{
					Duty=MOTOR_MAX_SPEED;
 8001954:	4b21      	ldr	r3, [pc, #132]	; (80019dc <Action_Task+0x10c>)
 8001956:	2264      	movs	r2, #100	; 0x64
 8001958:	701a      	strb	r2, [r3, #0]
					DC_Motor_SetSpeed(Duty);
 800195a:	4b20      	ldr	r3, [pc, #128]	; (80019dc <Action_Task+0x10c>)
 800195c:	f993 3000 	ldrsb.w	r3, [r3]
 8001960:	b2db      	uxtb	r3, r3
 8001962:	4618      	mov	r0, r3
 8001964:	f7ff f8c2 	bl	8000aec <DC_Motor_SetSpeed>
 8001968:	e006      	b.n	8001978 <Action_Task+0xa8>
				}
				else
				{
					DC_Motor_SetSpeed(Duty);
 800196a:	4b1c      	ldr	r3, [pc, #112]	; (80019dc <Action_Task+0x10c>)
 800196c:	f993 3000 	ldrsb.w	r3, [r3]
 8001970:	b2db      	uxtb	r3, r3
 8001972:	4618      	mov	r0, r3
 8001974:	f7ff f8ba 	bl	8000aec <DC_Motor_SetSpeed>
				}
			}
		}
		if(EG_Value & EG_SPEED_DOWN)
 8001978:	4b16      	ldr	r3, [pc, #88]	; (80019d4 <Action_Task+0x104>)
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	f003 0308 	and.w	r3, r3, #8
 8001980:	2b00      	cmp	r3, #0
 8001982:	d0a9      	beq.n	80018d8 <Action_Task+0x8>
		{
			if(ENGINE_ON == Engine_State)
 8001984:	4b14      	ldr	r3, [pc, #80]	; (80019d8 <Action_Task+0x108>)
 8001986:	781b      	ldrb	r3, [r3, #0]
 8001988:	2b01      	cmp	r3, #1
 800198a:	d1a5      	bne.n	80018d8 <Action_Task+0x8>
			{
				Duty-=10;
 800198c:	4b13      	ldr	r3, [pc, #76]	; (80019dc <Action_Task+0x10c>)
 800198e:	f993 3000 	ldrsb.w	r3, [r3]
 8001992:	b2db      	uxtb	r3, r3
 8001994:	3b0a      	subs	r3, #10
 8001996:	b2db      	uxtb	r3, r3
 8001998:	b25a      	sxtb	r2, r3
 800199a:	4b10      	ldr	r3, [pc, #64]	; (80019dc <Action_Task+0x10c>)
 800199c:	701a      	strb	r2, [r3, #0]
				if(MOTOR_MIN_SPEED > Duty)
 800199e:	4b0f      	ldr	r3, [pc, #60]	; (80019dc <Action_Task+0x10c>)
 80019a0:	f993 3000 	ldrsb.w	r3, [r3]
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	da0a      	bge.n	80019be <Action_Task+0xee>
				{
					Duty = MOTOR_MIN_SPEED;
 80019a8:	4b0c      	ldr	r3, [pc, #48]	; (80019dc <Action_Task+0x10c>)
 80019aa:	2200      	movs	r2, #0
 80019ac:	701a      	strb	r2, [r3, #0]
					DC_Motor_SetSpeed(Duty);
 80019ae:	4b0b      	ldr	r3, [pc, #44]	; (80019dc <Action_Task+0x10c>)
 80019b0:	f993 3000 	ldrsb.w	r3, [r3]
 80019b4:	b2db      	uxtb	r3, r3
 80019b6:	4618      	mov	r0, r3
 80019b8:	f7ff f898 	bl	8000aec <DC_Motor_SetSpeed>
 80019bc:	e78c      	b.n	80018d8 <Action_Task+0x8>
				}
				else
				{
					DC_Motor_SetSpeed(Duty);
 80019be:	4b07      	ldr	r3, [pc, #28]	; (80019dc <Action_Task+0x10c>)
 80019c0:	f993 3000 	ldrsb.w	r3, [r3]
 80019c4:	b2db      	uxtb	r3, r3
 80019c6:	4618      	mov	r0, r3
 80019c8:	f7ff f890 	bl	8000aec <DC_Motor_SetSpeed>
		EG_Value = xEventGroupWaitBits(EG_Action,
 80019cc:	e784      	b.n	80018d8 <Action_Task+0x8>
 80019ce:	bf00      	nop
 80019d0:	200004a4 	.word	0x200004a4
 80019d4:	200004a8 	.word	0x200004a8
 80019d8:	200004b6 	.word	0x200004b6
 80019dc:	200004b4 	.word	0x200004b4

080019e0 <Display_Task>:
			}
		}
	}
}
void Display_Task     (void  * argument)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b082      	sub	sp, #8
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
	while(1)
	{
		if(Engine_State==1)
 80019e8:	4b1d      	ldr	r3, [pc, #116]	; (8001a60 <Display_Task+0x80>)
 80019ea:	781b      	ldrb	r3, [r3, #0]
 80019ec:	2b01      	cmp	r3, #1
 80019ee:	d132      	bne.n	8001a56 <Display_Task+0x76>
		{
			LCD_voidClear();
 80019f0:	f7ff fa38 	bl	8000e64 <LCD_voidClear>
			LCD_voidInit();
 80019f4:	f7ff f8f0 	bl	8000bd8 <LCD_voidInit>
			// Display ( Distance & Duty & ACC State On LCD)
			LCD_voidSetCursor(0, 0);
 80019f8:	2100      	movs	r1, #0
 80019fa:	2000      	movs	r0, #0
 80019fc:	f7ff fa3c 	bl	8000e78 <LCD_voidSetCursor>
			LCD_voidWriteString("Duty:");
 8001a00:	4818      	ldr	r0, [pc, #96]	; (8001a64 <Display_Task+0x84>)
 8001a02:	f7ff fa50 	bl	8000ea6 <LCD_voidWriteString>
			LCD_voidWriteNum(Duty);
 8001a06:	4b18      	ldr	r3, [pc, #96]	; (8001a68 <Display_Task+0x88>)
 8001a08:	f993 3000 	ldrsb.w	r3, [r3]
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	f7ff fa65 	bl	8000edc <LCD_voidWriteNum>
			LCD_voidSetCursor(0, 9);
 8001a12:	2109      	movs	r1, #9
 8001a14:	2000      	movs	r0, #0
 8001a16:	f7ff fa2f 	bl	8000e78 <LCD_voidSetCursor>
			LCD_voidWriteString("Dist:");
 8001a1a:	4814      	ldr	r0, [pc, #80]	; (8001a6c <Display_Task+0x8c>)
 8001a1c:	f7ff fa43 	bl	8000ea6 <LCD_voidWriteString>
			LCD_voidWriteNum(Distance);
 8001a20:	4b13      	ldr	r3, [pc, #76]	; (8001a70 <Display_Task+0x90>)
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	4618      	mov	r0, r3
 8001a26:	f7ff f827 	bl	8000a78 <__aeabi_f2uiz>
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	f7ff fa55 	bl	8000edc <LCD_voidWriteNum>
			LCD_voidSetCursor(1, 1);
 8001a32:	2101      	movs	r1, #1
 8001a34:	2001      	movs	r0, #1
 8001a36:	f7ff fa1f 	bl	8000e78 <LCD_voidSetCursor>
			LCD_voidWriteString("ACC State: ");
 8001a3a:	480e      	ldr	r0, [pc, #56]	; (8001a74 <Display_Task+0x94>)
 8001a3c:	f7ff fa33 	bl	8000ea6 <LCD_voidWriteString>
			if(ACC_State==1)
 8001a40:	4b0d      	ldr	r3, [pc, #52]	; (8001a78 <Display_Task+0x98>)
 8001a42:	781b      	ldrb	r3, [r3, #0]
 8001a44:	2b01      	cmp	r3, #1
 8001a46:	d103      	bne.n	8001a50 <Display_Task+0x70>
			{
				LCD_voidWriteString("ON");
 8001a48:	480c      	ldr	r0, [pc, #48]	; (8001a7c <Display_Task+0x9c>)
 8001a4a:	f7ff fa2c 	bl	8000ea6 <LCD_voidWriteString>
 8001a4e:	e002      	b.n	8001a56 <Display_Task+0x76>
			}
			else
			{
				LCD_voidWriteString("OFF");
 8001a50:	480b      	ldr	r0, [pc, #44]	; (8001a80 <Display_Task+0xa0>)
 8001a52:	f7ff fa28 	bl	8000ea6 <LCD_voidWriteString>
			}

		}
		vTaskDelay(1000);
 8001a56:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001a5a:	f003 ffd1 	bl	8005a00 <vTaskDelay>
		if(Engine_State==1)
 8001a5e:	e7c3      	b.n	80019e8 <Display_Task+0x8>
 8001a60:	200004b6 	.word	0x200004b6
 8001a64:	08006c00 	.word	0x08006c00
 8001a68:	200004b4 	.word	0x200004b4
 8001a6c:	08006c08 	.word	0x08006c08
 8001a70:	200004b8 	.word	0x200004b8
 8001a74:	08006c10 	.word	0x08006c10
 8001a78:	200004b5 	.word	0x200004b5
 8001a7c:	08006c1c 	.word	0x08006c1c
 8001a80:	08006c20 	.word	0x08006c20

08001a84 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b082      	sub	sp, #8
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001a8c:	2001      	movs	r0, #1
 8001a8e:	f003 fbbf 	bl	8005210 <osDelay>
 8001a92:	e7fb      	b.n	8001a8c <StartDefaultTask+0x8>

08001a94 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a94:	b480      	push	{r7}
 8001a96:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a98:	b672      	cpsid	i
}
 8001a9a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001a9c:	e7fe      	b.n	8001a9c <Error_Handler+0x8>
	...

08001aa0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b084      	sub	sp, #16
 8001aa4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001aa6:	4b18      	ldr	r3, [pc, #96]	; (8001b08 <HAL_MspInit+0x68>)
 8001aa8:	699b      	ldr	r3, [r3, #24]
 8001aaa:	4a17      	ldr	r2, [pc, #92]	; (8001b08 <HAL_MspInit+0x68>)
 8001aac:	f043 0301 	orr.w	r3, r3, #1
 8001ab0:	6193      	str	r3, [r2, #24]
 8001ab2:	4b15      	ldr	r3, [pc, #84]	; (8001b08 <HAL_MspInit+0x68>)
 8001ab4:	699b      	ldr	r3, [r3, #24]
 8001ab6:	f003 0301 	and.w	r3, r3, #1
 8001aba:	60bb      	str	r3, [r7, #8]
 8001abc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001abe:	4b12      	ldr	r3, [pc, #72]	; (8001b08 <HAL_MspInit+0x68>)
 8001ac0:	69db      	ldr	r3, [r3, #28]
 8001ac2:	4a11      	ldr	r2, [pc, #68]	; (8001b08 <HAL_MspInit+0x68>)
 8001ac4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ac8:	61d3      	str	r3, [r2, #28]
 8001aca:	4b0f      	ldr	r3, [pc, #60]	; (8001b08 <HAL_MspInit+0x68>)
 8001acc:	69db      	ldr	r3, [r3, #28]
 8001ace:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ad2:	607b      	str	r3, [r7, #4]
 8001ad4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	210f      	movs	r1, #15
 8001ada:	f06f 0001 	mvn.w	r0, #1
 8001ade:	f000 fb1a 	bl	8002116 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001ae2:	4b0a      	ldr	r3, [pc, #40]	; (8001b0c <HAL_MspInit+0x6c>)
 8001ae4:	685b      	ldr	r3, [r3, #4]
 8001ae6:	60fb      	str	r3, [r7, #12]
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001aee:	60fb      	str	r3, [r7, #12]
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001af6:	60fb      	str	r3, [r7, #12]
 8001af8:	4a04      	ldr	r2, [pc, #16]	; (8001b0c <HAL_MspInit+0x6c>)
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001afe:	bf00      	nop
 8001b00:	3710      	adds	r7, #16
 8001b02:	46bd      	mov	sp, r7
 8001b04:	bd80      	pop	{r7, pc}
 8001b06:	bf00      	nop
 8001b08:	40021000 	.word	0x40021000
 8001b0c:	40010000 	.word	0x40010000

08001b10 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b088      	sub	sp, #32
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b18:	f107 0310 	add.w	r3, r7, #16
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	601a      	str	r2, [r3, #0]
 8001b20:	605a      	str	r2, [r3, #4]
 8001b22:	609a      	str	r2, [r3, #8]
 8001b24:	60da      	str	r2, [r3, #12]
  if(htim_ic->Instance==TIM1)
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	4a1a      	ldr	r2, [pc, #104]	; (8001b94 <HAL_TIM_IC_MspInit+0x84>)
 8001b2c:	4293      	cmp	r3, r2
 8001b2e:	d12c      	bne.n	8001b8a <HAL_TIM_IC_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001b30:	4b19      	ldr	r3, [pc, #100]	; (8001b98 <HAL_TIM_IC_MspInit+0x88>)
 8001b32:	699b      	ldr	r3, [r3, #24]
 8001b34:	4a18      	ldr	r2, [pc, #96]	; (8001b98 <HAL_TIM_IC_MspInit+0x88>)
 8001b36:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001b3a:	6193      	str	r3, [r2, #24]
 8001b3c:	4b16      	ldr	r3, [pc, #88]	; (8001b98 <HAL_TIM_IC_MspInit+0x88>)
 8001b3e:	699b      	ldr	r3, [r3, #24]
 8001b40:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001b44:	60fb      	str	r3, [r7, #12]
 8001b46:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b48:	4b13      	ldr	r3, [pc, #76]	; (8001b98 <HAL_TIM_IC_MspInit+0x88>)
 8001b4a:	699b      	ldr	r3, [r3, #24]
 8001b4c:	4a12      	ldr	r2, [pc, #72]	; (8001b98 <HAL_TIM_IC_MspInit+0x88>)
 8001b4e:	f043 0304 	orr.w	r3, r3, #4
 8001b52:	6193      	str	r3, [r2, #24]
 8001b54:	4b10      	ldr	r3, [pc, #64]	; (8001b98 <HAL_TIM_IC_MspInit+0x88>)
 8001b56:	699b      	ldr	r3, [r3, #24]
 8001b58:	f003 0304 	and.w	r3, r3, #4
 8001b5c:	60bb      	str	r3, [r7, #8]
 8001b5e:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001b60:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001b64:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b66:	2300      	movs	r3, #0
 8001b68:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b6e:	f107 0310 	add.w	r3, r7, #16
 8001b72:	4619      	mov	r1, r3
 8001b74:	4809      	ldr	r0, [pc, #36]	; (8001b9c <HAL_TIM_IC_MspInit+0x8c>)
 8001b76:	f000 fbb7 	bl	80022e8 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 5, 0);
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	2105      	movs	r1, #5
 8001b7e:	201b      	movs	r0, #27
 8001b80:	f000 fac9 	bl	8002116 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8001b84:	201b      	movs	r0, #27
 8001b86:	f000 fae2 	bl	800214e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001b8a:	bf00      	nop
 8001b8c:	3720      	adds	r7, #32
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	bd80      	pop	{r7, pc}
 8001b92:	bf00      	nop
 8001b94:	40012c00 	.word	0x40012c00
 8001b98:	40021000 	.word	0x40021000
 8001b9c:	40010800 	.word	0x40010800

08001ba0 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	b085      	sub	sp, #20
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	4a09      	ldr	r2, [pc, #36]	; (8001bd4 <HAL_TIM_PWM_MspInit+0x34>)
 8001bae:	4293      	cmp	r3, r2
 8001bb0:	d10b      	bne.n	8001bca <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001bb2:	4b09      	ldr	r3, [pc, #36]	; (8001bd8 <HAL_TIM_PWM_MspInit+0x38>)
 8001bb4:	69db      	ldr	r3, [r3, #28]
 8001bb6:	4a08      	ldr	r2, [pc, #32]	; (8001bd8 <HAL_TIM_PWM_MspInit+0x38>)
 8001bb8:	f043 0302 	orr.w	r3, r3, #2
 8001bbc:	61d3      	str	r3, [r2, #28]
 8001bbe:	4b06      	ldr	r3, [pc, #24]	; (8001bd8 <HAL_TIM_PWM_MspInit+0x38>)
 8001bc0:	69db      	ldr	r3, [r3, #28]
 8001bc2:	f003 0302 	and.w	r3, r3, #2
 8001bc6:	60fb      	str	r3, [r7, #12]
 8001bc8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001bca:	bf00      	nop
 8001bcc:	3714      	adds	r7, #20
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	bc80      	pop	{r7}
 8001bd2:	4770      	bx	lr
 8001bd4:	40000400 	.word	0x40000400
 8001bd8:	40021000 	.word	0x40021000

08001bdc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001bdc:	b480      	push	{r7}
 8001bde:	b085      	sub	sp, #20
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	4a09      	ldr	r2, [pc, #36]	; (8001c10 <HAL_TIM_Base_MspInit+0x34>)
 8001bea:	4293      	cmp	r3, r2
 8001bec:	d10b      	bne.n	8001c06 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001bee:	4b09      	ldr	r3, [pc, #36]	; (8001c14 <HAL_TIM_Base_MspInit+0x38>)
 8001bf0:	69db      	ldr	r3, [r3, #28]
 8001bf2:	4a08      	ldr	r2, [pc, #32]	; (8001c14 <HAL_TIM_Base_MspInit+0x38>)
 8001bf4:	f043 0304 	orr.w	r3, r3, #4
 8001bf8:	61d3      	str	r3, [r2, #28]
 8001bfa:	4b06      	ldr	r3, [pc, #24]	; (8001c14 <HAL_TIM_Base_MspInit+0x38>)
 8001bfc:	69db      	ldr	r3, [r3, #28]
 8001bfe:	f003 0304 	and.w	r3, r3, #4
 8001c02:	60fb      	str	r3, [r7, #12]
 8001c04:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001c06:	bf00      	nop
 8001c08:	3714      	adds	r7, #20
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	bc80      	pop	{r7}
 8001c0e:	4770      	bx	lr
 8001c10:	40000800 	.word	0x40000800
 8001c14:	40021000 	.word	0x40021000

08001c18 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b088      	sub	sp, #32
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c20:	f107 0310 	add.w	r3, r7, #16
 8001c24:	2200      	movs	r2, #0
 8001c26:	601a      	str	r2, [r3, #0]
 8001c28:	605a      	str	r2, [r3, #4]
 8001c2a:	609a      	str	r2, [r3, #8]
 8001c2c:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	4a1e      	ldr	r2, [pc, #120]	; (8001cac <HAL_TIM_MspPostInit+0x94>)
 8001c34:	4293      	cmp	r3, r2
 8001c36:	d118      	bne.n	8001c6a <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c38:	4b1d      	ldr	r3, [pc, #116]	; (8001cb0 <HAL_TIM_MspPostInit+0x98>)
 8001c3a:	699b      	ldr	r3, [r3, #24]
 8001c3c:	4a1c      	ldr	r2, [pc, #112]	; (8001cb0 <HAL_TIM_MspPostInit+0x98>)
 8001c3e:	f043 0304 	orr.w	r3, r3, #4
 8001c42:	6193      	str	r3, [r2, #24]
 8001c44:	4b1a      	ldr	r3, [pc, #104]	; (8001cb0 <HAL_TIM_MspPostInit+0x98>)
 8001c46:	699b      	ldr	r3, [r3, #24]
 8001c48:	f003 0304 	and.w	r3, r3, #4
 8001c4c:	60fb      	str	r3, [r7, #12]
 8001c4e:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001c50:	2340      	movs	r3, #64	; 0x40
 8001c52:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c54:	2302      	movs	r3, #2
 8001c56:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c58:	2302      	movs	r3, #2
 8001c5a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c5c:	f107 0310 	add.w	r3, r7, #16
 8001c60:	4619      	mov	r1, r3
 8001c62:	4814      	ldr	r0, [pc, #80]	; (8001cb4 <HAL_TIM_MspPostInit+0x9c>)
 8001c64:	f000 fb40 	bl	80022e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001c68:	e01c      	b.n	8001ca4 <HAL_TIM_MspPostInit+0x8c>
  else if(htim->Instance==TIM4)
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	4a12      	ldr	r2, [pc, #72]	; (8001cb8 <HAL_TIM_MspPostInit+0xa0>)
 8001c70:	4293      	cmp	r3, r2
 8001c72:	d117      	bne.n	8001ca4 <HAL_TIM_MspPostInit+0x8c>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c74:	4b0e      	ldr	r3, [pc, #56]	; (8001cb0 <HAL_TIM_MspPostInit+0x98>)
 8001c76:	699b      	ldr	r3, [r3, #24]
 8001c78:	4a0d      	ldr	r2, [pc, #52]	; (8001cb0 <HAL_TIM_MspPostInit+0x98>)
 8001c7a:	f043 0308 	orr.w	r3, r3, #8
 8001c7e:	6193      	str	r3, [r2, #24]
 8001c80:	4b0b      	ldr	r3, [pc, #44]	; (8001cb0 <HAL_TIM_MspPostInit+0x98>)
 8001c82:	699b      	ldr	r3, [r3, #24]
 8001c84:	f003 0308 	and.w	r3, r3, #8
 8001c88:	60bb      	str	r3, [r7, #8]
 8001c8a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001c8c:	2340      	movs	r3, #64	; 0x40
 8001c8e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c90:	2302      	movs	r3, #2
 8001c92:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c94:	2302      	movs	r3, #2
 8001c96:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c98:	f107 0310 	add.w	r3, r7, #16
 8001c9c:	4619      	mov	r1, r3
 8001c9e:	4807      	ldr	r0, [pc, #28]	; (8001cbc <HAL_TIM_MspPostInit+0xa4>)
 8001ca0:	f000 fb22 	bl	80022e8 <HAL_GPIO_Init>
}
 8001ca4:	bf00      	nop
 8001ca6:	3720      	adds	r7, #32
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	bd80      	pop	{r7, pc}
 8001cac:	40000400 	.word	0x40000400
 8001cb0:	40021000 	.word	0x40021000
 8001cb4:	40010800 	.word	0x40010800
 8001cb8:	40000800 	.word	0x40000800
 8001cbc:	40010c00 	.word	0x40010c00

08001cc0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b08a      	sub	sp, #40	; 0x28
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cc8:	f107 0318 	add.w	r3, r7, #24
 8001ccc:	2200      	movs	r2, #0
 8001cce:	601a      	str	r2, [r3, #0]
 8001cd0:	605a      	str	r2, [r3, #4]
 8001cd2:	609a      	str	r2, [r3, #8]
 8001cd4:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	4a3c      	ldr	r2, [pc, #240]	; (8001dcc <HAL_UART_MspInit+0x10c>)
 8001cdc:	4293      	cmp	r3, r2
 8001cde:	d132      	bne.n	8001d46 <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001ce0:	4b3b      	ldr	r3, [pc, #236]	; (8001dd0 <HAL_UART_MspInit+0x110>)
 8001ce2:	699b      	ldr	r3, [r3, #24]
 8001ce4:	4a3a      	ldr	r2, [pc, #232]	; (8001dd0 <HAL_UART_MspInit+0x110>)
 8001ce6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001cea:	6193      	str	r3, [r2, #24]
 8001cec:	4b38      	ldr	r3, [pc, #224]	; (8001dd0 <HAL_UART_MspInit+0x110>)
 8001cee:	699b      	ldr	r3, [r3, #24]
 8001cf0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001cf4:	617b      	str	r3, [r7, #20]
 8001cf6:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cf8:	4b35      	ldr	r3, [pc, #212]	; (8001dd0 <HAL_UART_MspInit+0x110>)
 8001cfa:	699b      	ldr	r3, [r3, #24]
 8001cfc:	4a34      	ldr	r2, [pc, #208]	; (8001dd0 <HAL_UART_MspInit+0x110>)
 8001cfe:	f043 0304 	orr.w	r3, r3, #4
 8001d02:	6193      	str	r3, [r2, #24]
 8001d04:	4b32      	ldr	r3, [pc, #200]	; (8001dd0 <HAL_UART_MspInit+0x110>)
 8001d06:	699b      	ldr	r3, [r3, #24]
 8001d08:	f003 0304 	and.w	r3, r3, #4
 8001d0c:	613b      	str	r3, [r7, #16]
 8001d0e:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001d10:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001d14:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d16:	2302      	movs	r3, #2
 8001d18:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d1a:	2303      	movs	r3, #3
 8001d1c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d1e:	f107 0318 	add.w	r3, r7, #24
 8001d22:	4619      	mov	r1, r3
 8001d24:	482b      	ldr	r0, [pc, #172]	; (8001dd4 <HAL_UART_MspInit+0x114>)
 8001d26:	f000 fadf 	bl	80022e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001d2a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001d2e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d30:	2300      	movs	r3, #0
 8001d32:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d34:	2300      	movs	r3, #0
 8001d36:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d38:	f107 0318 	add.w	r3, r7, #24
 8001d3c:	4619      	mov	r1, r3
 8001d3e:	4825      	ldr	r0, [pc, #148]	; (8001dd4 <HAL_UART_MspInit+0x114>)
 8001d40:	f000 fad2 	bl	80022e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001d44:	e03e      	b.n	8001dc4 <HAL_UART_MspInit+0x104>
  else if(huart->Instance==USART3)
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	4a23      	ldr	r2, [pc, #140]	; (8001dd8 <HAL_UART_MspInit+0x118>)
 8001d4c:	4293      	cmp	r3, r2
 8001d4e:	d139      	bne.n	8001dc4 <HAL_UART_MspInit+0x104>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001d50:	4b1f      	ldr	r3, [pc, #124]	; (8001dd0 <HAL_UART_MspInit+0x110>)
 8001d52:	69db      	ldr	r3, [r3, #28]
 8001d54:	4a1e      	ldr	r2, [pc, #120]	; (8001dd0 <HAL_UART_MspInit+0x110>)
 8001d56:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d5a:	61d3      	str	r3, [r2, #28]
 8001d5c:	4b1c      	ldr	r3, [pc, #112]	; (8001dd0 <HAL_UART_MspInit+0x110>)
 8001d5e:	69db      	ldr	r3, [r3, #28]
 8001d60:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001d64:	60fb      	str	r3, [r7, #12]
 8001d66:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d68:	4b19      	ldr	r3, [pc, #100]	; (8001dd0 <HAL_UART_MspInit+0x110>)
 8001d6a:	699b      	ldr	r3, [r3, #24]
 8001d6c:	4a18      	ldr	r2, [pc, #96]	; (8001dd0 <HAL_UART_MspInit+0x110>)
 8001d6e:	f043 0308 	orr.w	r3, r3, #8
 8001d72:	6193      	str	r3, [r2, #24]
 8001d74:	4b16      	ldr	r3, [pc, #88]	; (8001dd0 <HAL_UART_MspInit+0x110>)
 8001d76:	699b      	ldr	r3, [r3, #24]
 8001d78:	f003 0308 	and.w	r3, r3, #8
 8001d7c:	60bb      	str	r3, [r7, #8]
 8001d7e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001d80:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001d84:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d86:	2302      	movs	r3, #2
 8001d88:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d8a:	2303      	movs	r3, #3
 8001d8c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d8e:	f107 0318 	add.w	r3, r7, #24
 8001d92:	4619      	mov	r1, r3
 8001d94:	4811      	ldr	r0, [pc, #68]	; (8001ddc <HAL_UART_MspInit+0x11c>)
 8001d96:	f000 faa7 	bl	80022e8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001d9a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001d9e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001da0:	2300      	movs	r3, #0
 8001da2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001da4:	2300      	movs	r3, #0
 8001da6:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001da8:	f107 0318 	add.w	r3, r7, #24
 8001dac:	4619      	mov	r1, r3
 8001dae:	480b      	ldr	r0, [pc, #44]	; (8001ddc <HAL_UART_MspInit+0x11c>)
 8001db0:	f000 fa9a 	bl	80022e8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8001db4:	2200      	movs	r2, #0
 8001db6:	2105      	movs	r1, #5
 8001db8:	2027      	movs	r0, #39	; 0x27
 8001dba:	f000 f9ac 	bl	8002116 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001dbe:	2027      	movs	r0, #39	; 0x27
 8001dc0:	f000 f9c5 	bl	800214e <HAL_NVIC_EnableIRQ>
}
 8001dc4:	bf00      	nop
 8001dc6:	3728      	adds	r7, #40	; 0x28
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	bd80      	pop	{r7, pc}
 8001dcc:	40013800 	.word	0x40013800
 8001dd0:	40021000 	.word	0x40021000
 8001dd4:	40010800 	.word	0x40010800
 8001dd8:	40004800 	.word	0x40004800
 8001ddc:	40010c00 	.word	0x40010c00

08001de0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001de0:	b480      	push	{r7}
 8001de2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001de4:	e7fe      	b.n	8001de4 <NMI_Handler+0x4>

08001de6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001de6:	b480      	push	{r7}
 8001de8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001dea:	e7fe      	b.n	8001dea <HardFault_Handler+0x4>

08001dec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001dec:	b480      	push	{r7}
 8001dee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001df0:	e7fe      	b.n	8001df0 <MemManage_Handler+0x4>

08001df2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001df2:	b480      	push	{r7}
 8001df4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001df6:	e7fe      	b.n	8001df6 <BusFault_Handler+0x4>

08001df8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001df8:	b480      	push	{r7}
 8001dfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001dfc:	e7fe      	b.n	8001dfc <UsageFault_Handler+0x4>

08001dfe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001dfe:	b480      	push	{r7}
 8001e00:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e02:	bf00      	nop
 8001e04:	46bd      	mov	sp, r7
 8001e06:	bc80      	pop	{r7}
 8001e08:	4770      	bx	lr

08001e0a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001e0a:	b580      	push	{r7, lr}
 8001e0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001e0e:	f000 f88f 	bl	8001f30 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8001e12:	f004 f9d9 	bl	80061c8 <xTaskGetSchedulerState>
 8001e16:	4603      	mov	r3, r0
 8001e18:	2b01      	cmp	r3, #1
 8001e1a:	d001      	beq.n	8001e20 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8001e1c:	f004 fbdc 	bl	80065d8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e20:	bf00      	nop
 8001e22:	bd80      	pop	{r7, pc}

08001e24 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001e28:	4802      	ldr	r0, [pc, #8]	; (8001e34 <TIM1_CC_IRQHandler+0x10>)
 8001e2a:	f001 fb09 	bl	8003440 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8001e2e:	bf00      	nop
 8001e30:	bd80      	pop	{r7, pc}
 8001e32:	bf00      	nop
 8001e34:	20000338 	.word	0x20000338

08001e38 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001e3c:	4802      	ldr	r0, [pc, #8]	; (8001e48 <USART3_IRQHandler+0x10>)
 8001e3e:	f002 fbfd 	bl	800463c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001e42:	bf00      	nop
 8001e44:	bd80      	pop	{r7, pc}
 8001e46:	bf00      	nop
 8001e48:	20000458 	.word	0x20000458

08001e4c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001e4c:	b480      	push	{r7}
 8001e4e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001e50:	bf00      	nop
 8001e52:	46bd      	mov	sp, r7
 8001e54:	bc80      	pop	{r7}
 8001e56:	4770      	bx	lr

08001e58 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001e58:	f7ff fff8 	bl	8001e4c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001e5c:	480b      	ldr	r0, [pc, #44]	; (8001e8c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001e5e:	490c      	ldr	r1, [pc, #48]	; (8001e90 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001e60:	4a0c      	ldr	r2, [pc, #48]	; (8001e94 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001e62:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e64:	e002      	b.n	8001e6c <LoopCopyDataInit>

08001e66 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e66:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e68:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e6a:	3304      	adds	r3, #4

08001e6c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e6c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e6e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e70:	d3f9      	bcc.n	8001e66 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e72:	4a09      	ldr	r2, [pc, #36]	; (8001e98 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001e74:	4c09      	ldr	r4, [pc, #36]	; (8001e9c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001e76:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e78:	e001      	b.n	8001e7e <LoopFillZerobss>

08001e7a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e7a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e7c:	3204      	adds	r2, #4

08001e7e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e7e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e80:	d3fb      	bcc.n	8001e7a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001e82:	f004 fe23 	bl	8006acc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001e86:	f7ff f96f 	bl	8001168 <main>
  bx lr
 8001e8a:	4770      	bx	lr
  ldr r0, =_sdata
 8001e8c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e90:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 8001e94:	08006c60 	.word	0x08006c60
  ldr r2, =_sbss
 8001e98:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 8001e9c:	20001350 	.word	0x20001350

08001ea0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001ea0:	e7fe      	b.n	8001ea0 <ADC1_2_IRQHandler>
	...

08001ea4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ea8:	4b08      	ldr	r3, [pc, #32]	; (8001ecc <HAL_Init+0x28>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	4a07      	ldr	r2, [pc, #28]	; (8001ecc <HAL_Init+0x28>)
 8001eae:	f043 0310 	orr.w	r3, r3, #16
 8001eb2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001eb4:	2003      	movs	r0, #3
 8001eb6:	f000 f923 	bl	8002100 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001eba:	200f      	movs	r0, #15
 8001ebc:	f000 f808 	bl	8001ed0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001ec0:	f7ff fdee 	bl	8001aa0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ec4:	2300      	movs	r3, #0
}
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	bd80      	pop	{r7, pc}
 8001eca:	bf00      	nop
 8001ecc:	40022000 	.word	0x40022000

08001ed0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b082      	sub	sp, #8
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001ed8:	4b12      	ldr	r3, [pc, #72]	; (8001f24 <HAL_InitTick+0x54>)
 8001eda:	681a      	ldr	r2, [r3, #0]
 8001edc:	4b12      	ldr	r3, [pc, #72]	; (8001f28 <HAL_InitTick+0x58>)
 8001ede:	781b      	ldrb	r3, [r3, #0]
 8001ee0:	4619      	mov	r1, r3
 8001ee2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ee6:	fbb3 f3f1 	udiv	r3, r3, r1
 8001eea:	fbb2 f3f3 	udiv	r3, r2, r3
 8001eee:	4618      	mov	r0, r3
 8001ef0:	f000 f93b 	bl	800216a <HAL_SYSTICK_Config>
 8001ef4:	4603      	mov	r3, r0
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d001      	beq.n	8001efe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001efa:	2301      	movs	r3, #1
 8001efc:	e00e      	b.n	8001f1c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	2b0f      	cmp	r3, #15
 8001f02:	d80a      	bhi.n	8001f1a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f04:	2200      	movs	r2, #0
 8001f06:	6879      	ldr	r1, [r7, #4]
 8001f08:	f04f 30ff 	mov.w	r0, #4294967295
 8001f0c:	f000 f903 	bl	8002116 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001f10:	4a06      	ldr	r2, [pc, #24]	; (8001f2c <HAL_InitTick+0x5c>)
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001f16:	2300      	movs	r3, #0
 8001f18:	e000      	b.n	8001f1c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001f1a:	2301      	movs	r3, #1
}
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	3708      	adds	r7, #8
 8001f20:	46bd      	mov	sp, r7
 8001f22:	bd80      	pop	{r7, pc}
 8001f24:	20000004 	.word	0x20000004
 8001f28:	2000000c 	.word	0x2000000c
 8001f2c:	20000008 	.word	0x20000008

08001f30 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f30:	b480      	push	{r7}
 8001f32:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001f34:	4b05      	ldr	r3, [pc, #20]	; (8001f4c <HAL_IncTick+0x1c>)
 8001f36:	781b      	ldrb	r3, [r3, #0]
 8001f38:	461a      	mov	r2, r3
 8001f3a:	4b05      	ldr	r3, [pc, #20]	; (8001f50 <HAL_IncTick+0x20>)
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	4413      	add	r3, r2
 8001f40:	4a03      	ldr	r2, [pc, #12]	; (8001f50 <HAL_IncTick+0x20>)
 8001f42:	6013      	str	r3, [r2, #0]
}
 8001f44:	bf00      	nop
 8001f46:	46bd      	mov	sp, r7
 8001f48:	bc80      	pop	{r7}
 8001f4a:	4770      	bx	lr
 8001f4c:	2000000c 	.word	0x2000000c
 8001f50:	200004c0 	.word	0x200004c0

08001f54 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f54:	b480      	push	{r7}
 8001f56:	af00      	add	r7, sp, #0
  return uwTick;
 8001f58:	4b02      	ldr	r3, [pc, #8]	; (8001f64 <HAL_GetTick+0x10>)
 8001f5a:	681b      	ldr	r3, [r3, #0]
}
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	bc80      	pop	{r7}
 8001f62:	4770      	bx	lr
 8001f64:	200004c0 	.word	0x200004c0

08001f68 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f68:	b480      	push	{r7}
 8001f6a:	b085      	sub	sp, #20
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	f003 0307 	and.w	r3, r3, #7
 8001f76:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f78:	4b0c      	ldr	r3, [pc, #48]	; (8001fac <__NVIC_SetPriorityGrouping+0x44>)
 8001f7a:	68db      	ldr	r3, [r3, #12]
 8001f7c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f7e:	68ba      	ldr	r2, [r7, #8]
 8001f80:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001f84:	4013      	ands	r3, r2
 8001f86:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f8c:	68bb      	ldr	r3, [r7, #8]
 8001f8e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f90:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001f94:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f98:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f9a:	4a04      	ldr	r2, [pc, #16]	; (8001fac <__NVIC_SetPriorityGrouping+0x44>)
 8001f9c:	68bb      	ldr	r3, [r7, #8]
 8001f9e:	60d3      	str	r3, [r2, #12]
}
 8001fa0:	bf00      	nop
 8001fa2:	3714      	adds	r7, #20
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	bc80      	pop	{r7}
 8001fa8:	4770      	bx	lr
 8001faa:	bf00      	nop
 8001fac:	e000ed00 	.word	0xe000ed00

08001fb0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001fb4:	4b04      	ldr	r3, [pc, #16]	; (8001fc8 <__NVIC_GetPriorityGrouping+0x18>)
 8001fb6:	68db      	ldr	r3, [r3, #12]
 8001fb8:	0a1b      	lsrs	r3, r3, #8
 8001fba:	f003 0307 	and.w	r3, r3, #7
}
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	bc80      	pop	{r7}
 8001fc4:	4770      	bx	lr
 8001fc6:	bf00      	nop
 8001fc8:	e000ed00 	.word	0xe000ed00

08001fcc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001fcc:	b480      	push	{r7}
 8001fce:	b083      	sub	sp, #12
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	4603      	mov	r3, r0
 8001fd4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	db0b      	blt.n	8001ff6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001fde:	79fb      	ldrb	r3, [r7, #7]
 8001fe0:	f003 021f 	and.w	r2, r3, #31
 8001fe4:	4906      	ldr	r1, [pc, #24]	; (8002000 <__NVIC_EnableIRQ+0x34>)
 8001fe6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fea:	095b      	lsrs	r3, r3, #5
 8001fec:	2001      	movs	r0, #1
 8001fee:	fa00 f202 	lsl.w	r2, r0, r2
 8001ff2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001ff6:	bf00      	nop
 8001ff8:	370c      	adds	r7, #12
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	bc80      	pop	{r7}
 8001ffe:	4770      	bx	lr
 8002000:	e000e100 	.word	0xe000e100

08002004 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002004:	b480      	push	{r7}
 8002006:	b083      	sub	sp, #12
 8002008:	af00      	add	r7, sp, #0
 800200a:	4603      	mov	r3, r0
 800200c:	6039      	str	r1, [r7, #0]
 800200e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002010:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002014:	2b00      	cmp	r3, #0
 8002016:	db0a      	blt.n	800202e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002018:	683b      	ldr	r3, [r7, #0]
 800201a:	b2da      	uxtb	r2, r3
 800201c:	490c      	ldr	r1, [pc, #48]	; (8002050 <__NVIC_SetPriority+0x4c>)
 800201e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002022:	0112      	lsls	r2, r2, #4
 8002024:	b2d2      	uxtb	r2, r2
 8002026:	440b      	add	r3, r1
 8002028:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800202c:	e00a      	b.n	8002044 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800202e:	683b      	ldr	r3, [r7, #0]
 8002030:	b2da      	uxtb	r2, r3
 8002032:	4908      	ldr	r1, [pc, #32]	; (8002054 <__NVIC_SetPriority+0x50>)
 8002034:	79fb      	ldrb	r3, [r7, #7]
 8002036:	f003 030f 	and.w	r3, r3, #15
 800203a:	3b04      	subs	r3, #4
 800203c:	0112      	lsls	r2, r2, #4
 800203e:	b2d2      	uxtb	r2, r2
 8002040:	440b      	add	r3, r1
 8002042:	761a      	strb	r2, [r3, #24]
}
 8002044:	bf00      	nop
 8002046:	370c      	adds	r7, #12
 8002048:	46bd      	mov	sp, r7
 800204a:	bc80      	pop	{r7}
 800204c:	4770      	bx	lr
 800204e:	bf00      	nop
 8002050:	e000e100 	.word	0xe000e100
 8002054:	e000ed00 	.word	0xe000ed00

08002058 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002058:	b480      	push	{r7}
 800205a:	b089      	sub	sp, #36	; 0x24
 800205c:	af00      	add	r7, sp, #0
 800205e:	60f8      	str	r0, [r7, #12]
 8002060:	60b9      	str	r1, [r7, #8]
 8002062:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	f003 0307 	and.w	r3, r3, #7
 800206a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800206c:	69fb      	ldr	r3, [r7, #28]
 800206e:	f1c3 0307 	rsb	r3, r3, #7
 8002072:	2b04      	cmp	r3, #4
 8002074:	bf28      	it	cs
 8002076:	2304      	movcs	r3, #4
 8002078:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800207a:	69fb      	ldr	r3, [r7, #28]
 800207c:	3304      	adds	r3, #4
 800207e:	2b06      	cmp	r3, #6
 8002080:	d902      	bls.n	8002088 <NVIC_EncodePriority+0x30>
 8002082:	69fb      	ldr	r3, [r7, #28]
 8002084:	3b03      	subs	r3, #3
 8002086:	e000      	b.n	800208a <NVIC_EncodePriority+0x32>
 8002088:	2300      	movs	r3, #0
 800208a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800208c:	f04f 32ff 	mov.w	r2, #4294967295
 8002090:	69bb      	ldr	r3, [r7, #24]
 8002092:	fa02 f303 	lsl.w	r3, r2, r3
 8002096:	43da      	mvns	r2, r3
 8002098:	68bb      	ldr	r3, [r7, #8]
 800209a:	401a      	ands	r2, r3
 800209c:	697b      	ldr	r3, [r7, #20]
 800209e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80020a0:	f04f 31ff 	mov.w	r1, #4294967295
 80020a4:	697b      	ldr	r3, [r7, #20]
 80020a6:	fa01 f303 	lsl.w	r3, r1, r3
 80020aa:	43d9      	mvns	r1, r3
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020b0:	4313      	orrs	r3, r2
         );
}
 80020b2:	4618      	mov	r0, r3
 80020b4:	3724      	adds	r7, #36	; 0x24
 80020b6:	46bd      	mov	sp, r7
 80020b8:	bc80      	pop	{r7}
 80020ba:	4770      	bx	lr

080020bc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	b082      	sub	sp, #8
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	3b01      	subs	r3, #1
 80020c8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80020cc:	d301      	bcc.n	80020d2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80020ce:	2301      	movs	r3, #1
 80020d0:	e00f      	b.n	80020f2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80020d2:	4a0a      	ldr	r2, [pc, #40]	; (80020fc <SysTick_Config+0x40>)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	3b01      	subs	r3, #1
 80020d8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80020da:	210f      	movs	r1, #15
 80020dc:	f04f 30ff 	mov.w	r0, #4294967295
 80020e0:	f7ff ff90 	bl	8002004 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80020e4:	4b05      	ldr	r3, [pc, #20]	; (80020fc <SysTick_Config+0x40>)
 80020e6:	2200      	movs	r2, #0
 80020e8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80020ea:	4b04      	ldr	r3, [pc, #16]	; (80020fc <SysTick_Config+0x40>)
 80020ec:	2207      	movs	r2, #7
 80020ee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80020f0:	2300      	movs	r3, #0
}
 80020f2:	4618      	mov	r0, r3
 80020f4:	3708      	adds	r7, #8
 80020f6:	46bd      	mov	sp, r7
 80020f8:	bd80      	pop	{r7, pc}
 80020fa:	bf00      	nop
 80020fc:	e000e010 	.word	0xe000e010

08002100 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	b082      	sub	sp, #8
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002108:	6878      	ldr	r0, [r7, #4]
 800210a:	f7ff ff2d 	bl	8001f68 <__NVIC_SetPriorityGrouping>
}
 800210e:	bf00      	nop
 8002110:	3708      	adds	r7, #8
 8002112:	46bd      	mov	sp, r7
 8002114:	bd80      	pop	{r7, pc}

08002116 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002116:	b580      	push	{r7, lr}
 8002118:	b086      	sub	sp, #24
 800211a:	af00      	add	r7, sp, #0
 800211c:	4603      	mov	r3, r0
 800211e:	60b9      	str	r1, [r7, #8]
 8002120:	607a      	str	r2, [r7, #4]
 8002122:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002124:	2300      	movs	r3, #0
 8002126:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002128:	f7ff ff42 	bl	8001fb0 <__NVIC_GetPriorityGrouping>
 800212c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800212e:	687a      	ldr	r2, [r7, #4]
 8002130:	68b9      	ldr	r1, [r7, #8]
 8002132:	6978      	ldr	r0, [r7, #20]
 8002134:	f7ff ff90 	bl	8002058 <NVIC_EncodePriority>
 8002138:	4602      	mov	r2, r0
 800213a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800213e:	4611      	mov	r1, r2
 8002140:	4618      	mov	r0, r3
 8002142:	f7ff ff5f 	bl	8002004 <__NVIC_SetPriority>
}
 8002146:	bf00      	nop
 8002148:	3718      	adds	r7, #24
 800214a:	46bd      	mov	sp, r7
 800214c:	bd80      	pop	{r7, pc}

0800214e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800214e:	b580      	push	{r7, lr}
 8002150:	b082      	sub	sp, #8
 8002152:	af00      	add	r7, sp, #0
 8002154:	4603      	mov	r3, r0
 8002156:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002158:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800215c:	4618      	mov	r0, r3
 800215e:	f7ff ff35 	bl	8001fcc <__NVIC_EnableIRQ>
}
 8002162:	bf00      	nop
 8002164:	3708      	adds	r7, #8
 8002166:	46bd      	mov	sp, r7
 8002168:	bd80      	pop	{r7, pc}

0800216a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800216a:	b580      	push	{r7, lr}
 800216c:	b082      	sub	sp, #8
 800216e:	af00      	add	r7, sp, #0
 8002170:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002172:	6878      	ldr	r0, [r7, #4]
 8002174:	f7ff ffa2 	bl	80020bc <SysTick_Config>
 8002178:	4603      	mov	r3, r0
}
 800217a:	4618      	mov	r0, r3
 800217c:	3708      	adds	r7, #8
 800217e:	46bd      	mov	sp, r7
 8002180:	bd80      	pop	{r7, pc}

08002182 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002182:	b480      	push	{r7}
 8002184:	b085      	sub	sp, #20
 8002186:	af00      	add	r7, sp, #0
 8002188:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800218a:	2300      	movs	r3, #0
 800218c:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002194:	b2db      	uxtb	r3, r3
 8002196:	2b02      	cmp	r3, #2
 8002198:	d008      	beq.n	80021ac <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	2204      	movs	r2, #4
 800219e:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	2200      	movs	r2, #0
 80021a4:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80021a8:	2301      	movs	r3, #1
 80021aa:	e020      	b.n	80021ee <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	681a      	ldr	r2, [r3, #0]
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f022 020e 	bic.w	r2, r2, #14
 80021ba:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	681a      	ldr	r2, [r3, #0]
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f022 0201 	bic.w	r2, r2, #1
 80021ca:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021d4:	2101      	movs	r1, #1
 80021d6:	fa01 f202 	lsl.w	r2, r1, r2
 80021da:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	2201      	movs	r2, #1
 80021e0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	2200      	movs	r2, #0
 80021e8:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80021ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80021ee:	4618      	mov	r0, r3
 80021f0:	3714      	adds	r7, #20
 80021f2:	46bd      	mov	sp, r7
 80021f4:	bc80      	pop	{r7}
 80021f6:	4770      	bx	lr

080021f8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80021f8:	b580      	push	{r7, lr}
 80021fa:	b084      	sub	sp, #16
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002200:	2300      	movs	r3, #0
 8002202:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800220a:	b2db      	uxtb	r3, r3
 800220c:	2b02      	cmp	r3, #2
 800220e:	d005      	beq.n	800221c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	2204      	movs	r2, #4
 8002214:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002216:	2301      	movs	r3, #1
 8002218:	73fb      	strb	r3, [r7, #15]
 800221a:	e051      	b.n	80022c0 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	681a      	ldr	r2, [r3, #0]
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f022 020e 	bic.w	r2, r2, #14
 800222a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	681a      	ldr	r2, [r3, #0]
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f022 0201 	bic.w	r2, r2, #1
 800223a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	4a22      	ldr	r2, [pc, #136]	; (80022cc <HAL_DMA_Abort_IT+0xd4>)
 8002242:	4293      	cmp	r3, r2
 8002244:	d029      	beq.n	800229a <HAL_DMA_Abort_IT+0xa2>
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	4a21      	ldr	r2, [pc, #132]	; (80022d0 <HAL_DMA_Abort_IT+0xd8>)
 800224c:	4293      	cmp	r3, r2
 800224e:	d022      	beq.n	8002296 <HAL_DMA_Abort_IT+0x9e>
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	4a1f      	ldr	r2, [pc, #124]	; (80022d4 <HAL_DMA_Abort_IT+0xdc>)
 8002256:	4293      	cmp	r3, r2
 8002258:	d01a      	beq.n	8002290 <HAL_DMA_Abort_IT+0x98>
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	4a1e      	ldr	r2, [pc, #120]	; (80022d8 <HAL_DMA_Abort_IT+0xe0>)
 8002260:	4293      	cmp	r3, r2
 8002262:	d012      	beq.n	800228a <HAL_DMA_Abort_IT+0x92>
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	4a1c      	ldr	r2, [pc, #112]	; (80022dc <HAL_DMA_Abort_IT+0xe4>)
 800226a:	4293      	cmp	r3, r2
 800226c:	d00a      	beq.n	8002284 <HAL_DMA_Abort_IT+0x8c>
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	4a1b      	ldr	r2, [pc, #108]	; (80022e0 <HAL_DMA_Abort_IT+0xe8>)
 8002274:	4293      	cmp	r3, r2
 8002276:	d102      	bne.n	800227e <HAL_DMA_Abort_IT+0x86>
 8002278:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800227c:	e00e      	b.n	800229c <HAL_DMA_Abort_IT+0xa4>
 800227e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002282:	e00b      	b.n	800229c <HAL_DMA_Abort_IT+0xa4>
 8002284:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002288:	e008      	b.n	800229c <HAL_DMA_Abort_IT+0xa4>
 800228a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800228e:	e005      	b.n	800229c <HAL_DMA_Abort_IT+0xa4>
 8002290:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002294:	e002      	b.n	800229c <HAL_DMA_Abort_IT+0xa4>
 8002296:	2310      	movs	r3, #16
 8002298:	e000      	b.n	800229c <HAL_DMA_Abort_IT+0xa4>
 800229a:	2301      	movs	r3, #1
 800229c:	4a11      	ldr	r2, [pc, #68]	; (80022e4 <HAL_DMA_Abort_IT+0xec>)
 800229e:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	2201      	movs	r2, #1
 80022a4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	2200      	movs	r2, #0
 80022ac:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d003      	beq.n	80022c0 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022bc:	6878      	ldr	r0, [r7, #4]
 80022be:	4798      	blx	r3
    } 
  }
  return status;
 80022c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80022c2:	4618      	mov	r0, r3
 80022c4:	3710      	adds	r7, #16
 80022c6:	46bd      	mov	sp, r7
 80022c8:	bd80      	pop	{r7, pc}
 80022ca:	bf00      	nop
 80022cc:	40020008 	.word	0x40020008
 80022d0:	4002001c 	.word	0x4002001c
 80022d4:	40020030 	.word	0x40020030
 80022d8:	40020044 	.word	0x40020044
 80022dc:	40020058 	.word	0x40020058
 80022e0:	4002006c 	.word	0x4002006c
 80022e4:	40020000 	.word	0x40020000

080022e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80022e8:	b480      	push	{r7}
 80022ea:	b08b      	sub	sp, #44	; 0x2c
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
 80022f0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80022f2:	2300      	movs	r3, #0
 80022f4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80022f6:	2300      	movs	r3, #0
 80022f8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80022fa:	e169      	b.n	80025d0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80022fc:	2201      	movs	r2, #1
 80022fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002300:	fa02 f303 	lsl.w	r3, r2, r3
 8002304:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002306:	683b      	ldr	r3, [r7, #0]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	69fa      	ldr	r2, [r7, #28]
 800230c:	4013      	ands	r3, r2
 800230e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002310:	69ba      	ldr	r2, [r7, #24]
 8002312:	69fb      	ldr	r3, [r7, #28]
 8002314:	429a      	cmp	r2, r3
 8002316:	f040 8158 	bne.w	80025ca <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800231a:	683b      	ldr	r3, [r7, #0]
 800231c:	685b      	ldr	r3, [r3, #4]
 800231e:	4a9a      	ldr	r2, [pc, #616]	; (8002588 <HAL_GPIO_Init+0x2a0>)
 8002320:	4293      	cmp	r3, r2
 8002322:	d05e      	beq.n	80023e2 <HAL_GPIO_Init+0xfa>
 8002324:	4a98      	ldr	r2, [pc, #608]	; (8002588 <HAL_GPIO_Init+0x2a0>)
 8002326:	4293      	cmp	r3, r2
 8002328:	d875      	bhi.n	8002416 <HAL_GPIO_Init+0x12e>
 800232a:	4a98      	ldr	r2, [pc, #608]	; (800258c <HAL_GPIO_Init+0x2a4>)
 800232c:	4293      	cmp	r3, r2
 800232e:	d058      	beq.n	80023e2 <HAL_GPIO_Init+0xfa>
 8002330:	4a96      	ldr	r2, [pc, #600]	; (800258c <HAL_GPIO_Init+0x2a4>)
 8002332:	4293      	cmp	r3, r2
 8002334:	d86f      	bhi.n	8002416 <HAL_GPIO_Init+0x12e>
 8002336:	4a96      	ldr	r2, [pc, #600]	; (8002590 <HAL_GPIO_Init+0x2a8>)
 8002338:	4293      	cmp	r3, r2
 800233a:	d052      	beq.n	80023e2 <HAL_GPIO_Init+0xfa>
 800233c:	4a94      	ldr	r2, [pc, #592]	; (8002590 <HAL_GPIO_Init+0x2a8>)
 800233e:	4293      	cmp	r3, r2
 8002340:	d869      	bhi.n	8002416 <HAL_GPIO_Init+0x12e>
 8002342:	4a94      	ldr	r2, [pc, #592]	; (8002594 <HAL_GPIO_Init+0x2ac>)
 8002344:	4293      	cmp	r3, r2
 8002346:	d04c      	beq.n	80023e2 <HAL_GPIO_Init+0xfa>
 8002348:	4a92      	ldr	r2, [pc, #584]	; (8002594 <HAL_GPIO_Init+0x2ac>)
 800234a:	4293      	cmp	r3, r2
 800234c:	d863      	bhi.n	8002416 <HAL_GPIO_Init+0x12e>
 800234e:	4a92      	ldr	r2, [pc, #584]	; (8002598 <HAL_GPIO_Init+0x2b0>)
 8002350:	4293      	cmp	r3, r2
 8002352:	d046      	beq.n	80023e2 <HAL_GPIO_Init+0xfa>
 8002354:	4a90      	ldr	r2, [pc, #576]	; (8002598 <HAL_GPIO_Init+0x2b0>)
 8002356:	4293      	cmp	r3, r2
 8002358:	d85d      	bhi.n	8002416 <HAL_GPIO_Init+0x12e>
 800235a:	2b12      	cmp	r3, #18
 800235c:	d82a      	bhi.n	80023b4 <HAL_GPIO_Init+0xcc>
 800235e:	2b12      	cmp	r3, #18
 8002360:	d859      	bhi.n	8002416 <HAL_GPIO_Init+0x12e>
 8002362:	a201      	add	r2, pc, #4	; (adr r2, 8002368 <HAL_GPIO_Init+0x80>)
 8002364:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002368:	080023e3 	.word	0x080023e3
 800236c:	080023bd 	.word	0x080023bd
 8002370:	080023cf 	.word	0x080023cf
 8002374:	08002411 	.word	0x08002411
 8002378:	08002417 	.word	0x08002417
 800237c:	08002417 	.word	0x08002417
 8002380:	08002417 	.word	0x08002417
 8002384:	08002417 	.word	0x08002417
 8002388:	08002417 	.word	0x08002417
 800238c:	08002417 	.word	0x08002417
 8002390:	08002417 	.word	0x08002417
 8002394:	08002417 	.word	0x08002417
 8002398:	08002417 	.word	0x08002417
 800239c:	08002417 	.word	0x08002417
 80023a0:	08002417 	.word	0x08002417
 80023a4:	08002417 	.word	0x08002417
 80023a8:	08002417 	.word	0x08002417
 80023ac:	080023c5 	.word	0x080023c5
 80023b0:	080023d9 	.word	0x080023d9
 80023b4:	4a79      	ldr	r2, [pc, #484]	; (800259c <HAL_GPIO_Init+0x2b4>)
 80023b6:	4293      	cmp	r3, r2
 80023b8:	d013      	beq.n	80023e2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80023ba:	e02c      	b.n	8002416 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80023bc:	683b      	ldr	r3, [r7, #0]
 80023be:	68db      	ldr	r3, [r3, #12]
 80023c0:	623b      	str	r3, [r7, #32]
          break;
 80023c2:	e029      	b.n	8002418 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	68db      	ldr	r3, [r3, #12]
 80023c8:	3304      	adds	r3, #4
 80023ca:	623b      	str	r3, [r7, #32]
          break;
 80023cc:	e024      	b.n	8002418 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80023ce:	683b      	ldr	r3, [r7, #0]
 80023d0:	68db      	ldr	r3, [r3, #12]
 80023d2:	3308      	adds	r3, #8
 80023d4:	623b      	str	r3, [r7, #32]
          break;
 80023d6:	e01f      	b.n	8002418 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80023d8:	683b      	ldr	r3, [r7, #0]
 80023da:	68db      	ldr	r3, [r3, #12]
 80023dc:	330c      	adds	r3, #12
 80023de:	623b      	str	r3, [r7, #32]
          break;
 80023e0:	e01a      	b.n	8002418 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80023e2:	683b      	ldr	r3, [r7, #0]
 80023e4:	689b      	ldr	r3, [r3, #8]
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d102      	bne.n	80023f0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80023ea:	2304      	movs	r3, #4
 80023ec:	623b      	str	r3, [r7, #32]
          break;
 80023ee:	e013      	b.n	8002418 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80023f0:	683b      	ldr	r3, [r7, #0]
 80023f2:	689b      	ldr	r3, [r3, #8]
 80023f4:	2b01      	cmp	r3, #1
 80023f6:	d105      	bne.n	8002404 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80023f8:	2308      	movs	r3, #8
 80023fa:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	69fa      	ldr	r2, [r7, #28]
 8002400:	611a      	str	r2, [r3, #16]
          break;
 8002402:	e009      	b.n	8002418 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002404:	2308      	movs	r3, #8
 8002406:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	69fa      	ldr	r2, [r7, #28]
 800240c:	615a      	str	r2, [r3, #20]
          break;
 800240e:	e003      	b.n	8002418 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002410:	2300      	movs	r3, #0
 8002412:	623b      	str	r3, [r7, #32]
          break;
 8002414:	e000      	b.n	8002418 <HAL_GPIO_Init+0x130>
          break;
 8002416:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002418:	69bb      	ldr	r3, [r7, #24]
 800241a:	2bff      	cmp	r3, #255	; 0xff
 800241c:	d801      	bhi.n	8002422 <HAL_GPIO_Init+0x13a>
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	e001      	b.n	8002426 <HAL_GPIO_Init+0x13e>
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	3304      	adds	r3, #4
 8002426:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002428:	69bb      	ldr	r3, [r7, #24]
 800242a:	2bff      	cmp	r3, #255	; 0xff
 800242c:	d802      	bhi.n	8002434 <HAL_GPIO_Init+0x14c>
 800242e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002430:	009b      	lsls	r3, r3, #2
 8002432:	e002      	b.n	800243a <HAL_GPIO_Init+0x152>
 8002434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002436:	3b08      	subs	r3, #8
 8002438:	009b      	lsls	r3, r3, #2
 800243a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800243c:	697b      	ldr	r3, [r7, #20]
 800243e:	681a      	ldr	r2, [r3, #0]
 8002440:	210f      	movs	r1, #15
 8002442:	693b      	ldr	r3, [r7, #16]
 8002444:	fa01 f303 	lsl.w	r3, r1, r3
 8002448:	43db      	mvns	r3, r3
 800244a:	401a      	ands	r2, r3
 800244c:	6a39      	ldr	r1, [r7, #32]
 800244e:	693b      	ldr	r3, [r7, #16]
 8002450:	fa01 f303 	lsl.w	r3, r1, r3
 8002454:	431a      	orrs	r2, r3
 8002456:	697b      	ldr	r3, [r7, #20]
 8002458:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800245a:	683b      	ldr	r3, [r7, #0]
 800245c:	685b      	ldr	r3, [r3, #4]
 800245e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002462:	2b00      	cmp	r3, #0
 8002464:	f000 80b1 	beq.w	80025ca <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002468:	4b4d      	ldr	r3, [pc, #308]	; (80025a0 <HAL_GPIO_Init+0x2b8>)
 800246a:	699b      	ldr	r3, [r3, #24]
 800246c:	4a4c      	ldr	r2, [pc, #304]	; (80025a0 <HAL_GPIO_Init+0x2b8>)
 800246e:	f043 0301 	orr.w	r3, r3, #1
 8002472:	6193      	str	r3, [r2, #24]
 8002474:	4b4a      	ldr	r3, [pc, #296]	; (80025a0 <HAL_GPIO_Init+0x2b8>)
 8002476:	699b      	ldr	r3, [r3, #24]
 8002478:	f003 0301 	and.w	r3, r3, #1
 800247c:	60bb      	str	r3, [r7, #8]
 800247e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002480:	4a48      	ldr	r2, [pc, #288]	; (80025a4 <HAL_GPIO_Init+0x2bc>)
 8002482:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002484:	089b      	lsrs	r3, r3, #2
 8002486:	3302      	adds	r3, #2
 8002488:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800248c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800248e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002490:	f003 0303 	and.w	r3, r3, #3
 8002494:	009b      	lsls	r3, r3, #2
 8002496:	220f      	movs	r2, #15
 8002498:	fa02 f303 	lsl.w	r3, r2, r3
 800249c:	43db      	mvns	r3, r3
 800249e:	68fa      	ldr	r2, [r7, #12]
 80024a0:	4013      	ands	r3, r2
 80024a2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	4a40      	ldr	r2, [pc, #256]	; (80025a8 <HAL_GPIO_Init+0x2c0>)
 80024a8:	4293      	cmp	r3, r2
 80024aa:	d013      	beq.n	80024d4 <HAL_GPIO_Init+0x1ec>
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	4a3f      	ldr	r2, [pc, #252]	; (80025ac <HAL_GPIO_Init+0x2c4>)
 80024b0:	4293      	cmp	r3, r2
 80024b2:	d00d      	beq.n	80024d0 <HAL_GPIO_Init+0x1e8>
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	4a3e      	ldr	r2, [pc, #248]	; (80025b0 <HAL_GPIO_Init+0x2c8>)
 80024b8:	4293      	cmp	r3, r2
 80024ba:	d007      	beq.n	80024cc <HAL_GPIO_Init+0x1e4>
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	4a3d      	ldr	r2, [pc, #244]	; (80025b4 <HAL_GPIO_Init+0x2cc>)
 80024c0:	4293      	cmp	r3, r2
 80024c2:	d101      	bne.n	80024c8 <HAL_GPIO_Init+0x1e0>
 80024c4:	2303      	movs	r3, #3
 80024c6:	e006      	b.n	80024d6 <HAL_GPIO_Init+0x1ee>
 80024c8:	2304      	movs	r3, #4
 80024ca:	e004      	b.n	80024d6 <HAL_GPIO_Init+0x1ee>
 80024cc:	2302      	movs	r3, #2
 80024ce:	e002      	b.n	80024d6 <HAL_GPIO_Init+0x1ee>
 80024d0:	2301      	movs	r3, #1
 80024d2:	e000      	b.n	80024d6 <HAL_GPIO_Init+0x1ee>
 80024d4:	2300      	movs	r3, #0
 80024d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80024d8:	f002 0203 	and.w	r2, r2, #3
 80024dc:	0092      	lsls	r2, r2, #2
 80024de:	4093      	lsls	r3, r2
 80024e0:	68fa      	ldr	r2, [r7, #12]
 80024e2:	4313      	orrs	r3, r2
 80024e4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80024e6:	492f      	ldr	r1, [pc, #188]	; (80025a4 <HAL_GPIO_Init+0x2bc>)
 80024e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ea:	089b      	lsrs	r3, r3, #2
 80024ec:	3302      	adds	r3, #2
 80024ee:	68fa      	ldr	r2, [r7, #12]
 80024f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80024f4:	683b      	ldr	r3, [r7, #0]
 80024f6:	685b      	ldr	r3, [r3, #4]
 80024f8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d006      	beq.n	800250e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002500:	4b2d      	ldr	r3, [pc, #180]	; (80025b8 <HAL_GPIO_Init+0x2d0>)
 8002502:	689a      	ldr	r2, [r3, #8]
 8002504:	492c      	ldr	r1, [pc, #176]	; (80025b8 <HAL_GPIO_Init+0x2d0>)
 8002506:	69bb      	ldr	r3, [r7, #24]
 8002508:	4313      	orrs	r3, r2
 800250a:	608b      	str	r3, [r1, #8]
 800250c:	e006      	b.n	800251c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800250e:	4b2a      	ldr	r3, [pc, #168]	; (80025b8 <HAL_GPIO_Init+0x2d0>)
 8002510:	689a      	ldr	r2, [r3, #8]
 8002512:	69bb      	ldr	r3, [r7, #24]
 8002514:	43db      	mvns	r3, r3
 8002516:	4928      	ldr	r1, [pc, #160]	; (80025b8 <HAL_GPIO_Init+0x2d0>)
 8002518:	4013      	ands	r3, r2
 800251a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	685b      	ldr	r3, [r3, #4]
 8002520:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002524:	2b00      	cmp	r3, #0
 8002526:	d006      	beq.n	8002536 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002528:	4b23      	ldr	r3, [pc, #140]	; (80025b8 <HAL_GPIO_Init+0x2d0>)
 800252a:	68da      	ldr	r2, [r3, #12]
 800252c:	4922      	ldr	r1, [pc, #136]	; (80025b8 <HAL_GPIO_Init+0x2d0>)
 800252e:	69bb      	ldr	r3, [r7, #24]
 8002530:	4313      	orrs	r3, r2
 8002532:	60cb      	str	r3, [r1, #12]
 8002534:	e006      	b.n	8002544 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002536:	4b20      	ldr	r3, [pc, #128]	; (80025b8 <HAL_GPIO_Init+0x2d0>)
 8002538:	68da      	ldr	r2, [r3, #12]
 800253a:	69bb      	ldr	r3, [r7, #24]
 800253c:	43db      	mvns	r3, r3
 800253e:	491e      	ldr	r1, [pc, #120]	; (80025b8 <HAL_GPIO_Init+0x2d0>)
 8002540:	4013      	ands	r3, r2
 8002542:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002544:	683b      	ldr	r3, [r7, #0]
 8002546:	685b      	ldr	r3, [r3, #4]
 8002548:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800254c:	2b00      	cmp	r3, #0
 800254e:	d006      	beq.n	800255e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002550:	4b19      	ldr	r3, [pc, #100]	; (80025b8 <HAL_GPIO_Init+0x2d0>)
 8002552:	685a      	ldr	r2, [r3, #4]
 8002554:	4918      	ldr	r1, [pc, #96]	; (80025b8 <HAL_GPIO_Init+0x2d0>)
 8002556:	69bb      	ldr	r3, [r7, #24]
 8002558:	4313      	orrs	r3, r2
 800255a:	604b      	str	r3, [r1, #4]
 800255c:	e006      	b.n	800256c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800255e:	4b16      	ldr	r3, [pc, #88]	; (80025b8 <HAL_GPIO_Init+0x2d0>)
 8002560:	685a      	ldr	r2, [r3, #4]
 8002562:	69bb      	ldr	r3, [r7, #24]
 8002564:	43db      	mvns	r3, r3
 8002566:	4914      	ldr	r1, [pc, #80]	; (80025b8 <HAL_GPIO_Init+0x2d0>)
 8002568:	4013      	ands	r3, r2
 800256a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800256c:	683b      	ldr	r3, [r7, #0]
 800256e:	685b      	ldr	r3, [r3, #4]
 8002570:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002574:	2b00      	cmp	r3, #0
 8002576:	d021      	beq.n	80025bc <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002578:	4b0f      	ldr	r3, [pc, #60]	; (80025b8 <HAL_GPIO_Init+0x2d0>)
 800257a:	681a      	ldr	r2, [r3, #0]
 800257c:	490e      	ldr	r1, [pc, #56]	; (80025b8 <HAL_GPIO_Init+0x2d0>)
 800257e:	69bb      	ldr	r3, [r7, #24]
 8002580:	4313      	orrs	r3, r2
 8002582:	600b      	str	r3, [r1, #0]
 8002584:	e021      	b.n	80025ca <HAL_GPIO_Init+0x2e2>
 8002586:	bf00      	nop
 8002588:	10320000 	.word	0x10320000
 800258c:	10310000 	.word	0x10310000
 8002590:	10220000 	.word	0x10220000
 8002594:	10210000 	.word	0x10210000
 8002598:	10120000 	.word	0x10120000
 800259c:	10110000 	.word	0x10110000
 80025a0:	40021000 	.word	0x40021000
 80025a4:	40010000 	.word	0x40010000
 80025a8:	40010800 	.word	0x40010800
 80025ac:	40010c00 	.word	0x40010c00
 80025b0:	40011000 	.word	0x40011000
 80025b4:	40011400 	.word	0x40011400
 80025b8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80025bc:	4b0b      	ldr	r3, [pc, #44]	; (80025ec <HAL_GPIO_Init+0x304>)
 80025be:	681a      	ldr	r2, [r3, #0]
 80025c0:	69bb      	ldr	r3, [r7, #24]
 80025c2:	43db      	mvns	r3, r3
 80025c4:	4909      	ldr	r1, [pc, #36]	; (80025ec <HAL_GPIO_Init+0x304>)
 80025c6:	4013      	ands	r3, r2
 80025c8:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80025ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025cc:	3301      	adds	r3, #1
 80025ce:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80025d0:	683b      	ldr	r3, [r7, #0]
 80025d2:	681a      	ldr	r2, [r3, #0]
 80025d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025d6:	fa22 f303 	lsr.w	r3, r2, r3
 80025da:	2b00      	cmp	r3, #0
 80025dc:	f47f ae8e 	bne.w	80022fc <HAL_GPIO_Init+0x14>
  }
}
 80025e0:	bf00      	nop
 80025e2:	bf00      	nop
 80025e4:	372c      	adds	r7, #44	; 0x2c
 80025e6:	46bd      	mov	sp, r7
 80025e8:	bc80      	pop	{r7}
 80025ea:	4770      	bx	lr
 80025ec:	40010400 	.word	0x40010400

080025f0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80025f0:	b480      	push	{r7}
 80025f2:	b083      	sub	sp, #12
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
 80025f8:	460b      	mov	r3, r1
 80025fa:	807b      	strh	r3, [r7, #2]
 80025fc:	4613      	mov	r3, r2
 80025fe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002600:	787b      	ldrb	r3, [r7, #1]
 8002602:	2b00      	cmp	r3, #0
 8002604:	d003      	beq.n	800260e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002606:	887a      	ldrh	r2, [r7, #2]
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800260c:	e003      	b.n	8002616 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800260e:	887b      	ldrh	r3, [r7, #2]
 8002610:	041a      	lsls	r2, r3, #16
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	611a      	str	r2, [r3, #16]
}
 8002616:	bf00      	nop
 8002618:	370c      	adds	r7, #12
 800261a:	46bd      	mov	sp, r7
 800261c:	bc80      	pop	{r7}
 800261e:	4770      	bx	lr

08002620 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002620:	b580      	push	{r7, lr}
 8002622:	b086      	sub	sp, #24
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	2b00      	cmp	r3, #0
 800262c:	d101      	bne.n	8002632 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800262e:	2301      	movs	r3, #1
 8002630:	e272      	b.n	8002b18 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f003 0301 	and.w	r3, r3, #1
 800263a:	2b00      	cmp	r3, #0
 800263c:	f000 8087 	beq.w	800274e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002640:	4b92      	ldr	r3, [pc, #584]	; (800288c <HAL_RCC_OscConfig+0x26c>)
 8002642:	685b      	ldr	r3, [r3, #4]
 8002644:	f003 030c 	and.w	r3, r3, #12
 8002648:	2b04      	cmp	r3, #4
 800264a:	d00c      	beq.n	8002666 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800264c:	4b8f      	ldr	r3, [pc, #572]	; (800288c <HAL_RCC_OscConfig+0x26c>)
 800264e:	685b      	ldr	r3, [r3, #4]
 8002650:	f003 030c 	and.w	r3, r3, #12
 8002654:	2b08      	cmp	r3, #8
 8002656:	d112      	bne.n	800267e <HAL_RCC_OscConfig+0x5e>
 8002658:	4b8c      	ldr	r3, [pc, #560]	; (800288c <HAL_RCC_OscConfig+0x26c>)
 800265a:	685b      	ldr	r3, [r3, #4]
 800265c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002660:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002664:	d10b      	bne.n	800267e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002666:	4b89      	ldr	r3, [pc, #548]	; (800288c <HAL_RCC_OscConfig+0x26c>)
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800266e:	2b00      	cmp	r3, #0
 8002670:	d06c      	beq.n	800274c <HAL_RCC_OscConfig+0x12c>
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	685b      	ldr	r3, [r3, #4]
 8002676:	2b00      	cmp	r3, #0
 8002678:	d168      	bne.n	800274c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800267a:	2301      	movs	r3, #1
 800267c:	e24c      	b.n	8002b18 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	685b      	ldr	r3, [r3, #4]
 8002682:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002686:	d106      	bne.n	8002696 <HAL_RCC_OscConfig+0x76>
 8002688:	4b80      	ldr	r3, [pc, #512]	; (800288c <HAL_RCC_OscConfig+0x26c>)
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	4a7f      	ldr	r2, [pc, #508]	; (800288c <HAL_RCC_OscConfig+0x26c>)
 800268e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002692:	6013      	str	r3, [r2, #0]
 8002694:	e02e      	b.n	80026f4 <HAL_RCC_OscConfig+0xd4>
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	685b      	ldr	r3, [r3, #4]
 800269a:	2b00      	cmp	r3, #0
 800269c:	d10c      	bne.n	80026b8 <HAL_RCC_OscConfig+0x98>
 800269e:	4b7b      	ldr	r3, [pc, #492]	; (800288c <HAL_RCC_OscConfig+0x26c>)
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	4a7a      	ldr	r2, [pc, #488]	; (800288c <HAL_RCC_OscConfig+0x26c>)
 80026a4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80026a8:	6013      	str	r3, [r2, #0]
 80026aa:	4b78      	ldr	r3, [pc, #480]	; (800288c <HAL_RCC_OscConfig+0x26c>)
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	4a77      	ldr	r2, [pc, #476]	; (800288c <HAL_RCC_OscConfig+0x26c>)
 80026b0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80026b4:	6013      	str	r3, [r2, #0]
 80026b6:	e01d      	b.n	80026f4 <HAL_RCC_OscConfig+0xd4>
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	685b      	ldr	r3, [r3, #4]
 80026bc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80026c0:	d10c      	bne.n	80026dc <HAL_RCC_OscConfig+0xbc>
 80026c2:	4b72      	ldr	r3, [pc, #456]	; (800288c <HAL_RCC_OscConfig+0x26c>)
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	4a71      	ldr	r2, [pc, #452]	; (800288c <HAL_RCC_OscConfig+0x26c>)
 80026c8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80026cc:	6013      	str	r3, [r2, #0]
 80026ce:	4b6f      	ldr	r3, [pc, #444]	; (800288c <HAL_RCC_OscConfig+0x26c>)
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	4a6e      	ldr	r2, [pc, #440]	; (800288c <HAL_RCC_OscConfig+0x26c>)
 80026d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026d8:	6013      	str	r3, [r2, #0]
 80026da:	e00b      	b.n	80026f4 <HAL_RCC_OscConfig+0xd4>
 80026dc:	4b6b      	ldr	r3, [pc, #428]	; (800288c <HAL_RCC_OscConfig+0x26c>)
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	4a6a      	ldr	r2, [pc, #424]	; (800288c <HAL_RCC_OscConfig+0x26c>)
 80026e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80026e6:	6013      	str	r3, [r2, #0]
 80026e8:	4b68      	ldr	r3, [pc, #416]	; (800288c <HAL_RCC_OscConfig+0x26c>)
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	4a67      	ldr	r2, [pc, #412]	; (800288c <HAL_RCC_OscConfig+0x26c>)
 80026ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80026f2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	685b      	ldr	r3, [r3, #4]
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d013      	beq.n	8002724 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026fc:	f7ff fc2a 	bl	8001f54 <HAL_GetTick>
 8002700:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002702:	e008      	b.n	8002716 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002704:	f7ff fc26 	bl	8001f54 <HAL_GetTick>
 8002708:	4602      	mov	r2, r0
 800270a:	693b      	ldr	r3, [r7, #16]
 800270c:	1ad3      	subs	r3, r2, r3
 800270e:	2b64      	cmp	r3, #100	; 0x64
 8002710:	d901      	bls.n	8002716 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002712:	2303      	movs	r3, #3
 8002714:	e200      	b.n	8002b18 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002716:	4b5d      	ldr	r3, [pc, #372]	; (800288c <HAL_RCC_OscConfig+0x26c>)
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800271e:	2b00      	cmp	r3, #0
 8002720:	d0f0      	beq.n	8002704 <HAL_RCC_OscConfig+0xe4>
 8002722:	e014      	b.n	800274e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002724:	f7ff fc16 	bl	8001f54 <HAL_GetTick>
 8002728:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800272a:	e008      	b.n	800273e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800272c:	f7ff fc12 	bl	8001f54 <HAL_GetTick>
 8002730:	4602      	mov	r2, r0
 8002732:	693b      	ldr	r3, [r7, #16]
 8002734:	1ad3      	subs	r3, r2, r3
 8002736:	2b64      	cmp	r3, #100	; 0x64
 8002738:	d901      	bls.n	800273e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800273a:	2303      	movs	r3, #3
 800273c:	e1ec      	b.n	8002b18 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800273e:	4b53      	ldr	r3, [pc, #332]	; (800288c <HAL_RCC_OscConfig+0x26c>)
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002746:	2b00      	cmp	r3, #0
 8002748:	d1f0      	bne.n	800272c <HAL_RCC_OscConfig+0x10c>
 800274a:	e000      	b.n	800274e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800274c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f003 0302 	and.w	r3, r3, #2
 8002756:	2b00      	cmp	r3, #0
 8002758:	d063      	beq.n	8002822 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800275a:	4b4c      	ldr	r3, [pc, #304]	; (800288c <HAL_RCC_OscConfig+0x26c>)
 800275c:	685b      	ldr	r3, [r3, #4]
 800275e:	f003 030c 	and.w	r3, r3, #12
 8002762:	2b00      	cmp	r3, #0
 8002764:	d00b      	beq.n	800277e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002766:	4b49      	ldr	r3, [pc, #292]	; (800288c <HAL_RCC_OscConfig+0x26c>)
 8002768:	685b      	ldr	r3, [r3, #4]
 800276a:	f003 030c 	and.w	r3, r3, #12
 800276e:	2b08      	cmp	r3, #8
 8002770:	d11c      	bne.n	80027ac <HAL_RCC_OscConfig+0x18c>
 8002772:	4b46      	ldr	r3, [pc, #280]	; (800288c <HAL_RCC_OscConfig+0x26c>)
 8002774:	685b      	ldr	r3, [r3, #4]
 8002776:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800277a:	2b00      	cmp	r3, #0
 800277c:	d116      	bne.n	80027ac <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800277e:	4b43      	ldr	r3, [pc, #268]	; (800288c <HAL_RCC_OscConfig+0x26c>)
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f003 0302 	and.w	r3, r3, #2
 8002786:	2b00      	cmp	r3, #0
 8002788:	d005      	beq.n	8002796 <HAL_RCC_OscConfig+0x176>
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	691b      	ldr	r3, [r3, #16]
 800278e:	2b01      	cmp	r3, #1
 8002790:	d001      	beq.n	8002796 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002792:	2301      	movs	r3, #1
 8002794:	e1c0      	b.n	8002b18 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002796:	4b3d      	ldr	r3, [pc, #244]	; (800288c <HAL_RCC_OscConfig+0x26c>)
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	695b      	ldr	r3, [r3, #20]
 80027a2:	00db      	lsls	r3, r3, #3
 80027a4:	4939      	ldr	r1, [pc, #228]	; (800288c <HAL_RCC_OscConfig+0x26c>)
 80027a6:	4313      	orrs	r3, r2
 80027a8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80027aa:	e03a      	b.n	8002822 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	691b      	ldr	r3, [r3, #16]
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d020      	beq.n	80027f6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80027b4:	4b36      	ldr	r3, [pc, #216]	; (8002890 <HAL_RCC_OscConfig+0x270>)
 80027b6:	2201      	movs	r2, #1
 80027b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027ba:	f7ff fbcb 	bl	8001f54 <HAL_GetTick>
 80027be:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027c0:	e008      	b.n	80027d4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80027c2:	f7ff fbc7 	bl	8001f54 <HAL_GetTick>
 80027c6:	4602      	mov	r2, r0
 80027c8:	693b      	ldr	r3, [r7, #16]
 80027ca:	1ad3      	subs	r3, r2, r3
 80027cc:	2b02      	cmp	r3, #2
 80027ce:	d901      	bls.n	80027d4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80027d0:	2303      	movs	r3, #3
 80027d2:	e1a1      	b.n	8002b18 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027d4:	4b2d      	ldr	r3, [pc, #180]	; (800288c <HAL_RCC_OscConfig+0x26c>)
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f003 0302 	and.w	r3, r3, #2
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d0f0      	beq.n	80027c2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027e0:	4b2a      	ldr	r3, [pc, #168]	; (800288c <HAL_RCC_OscConfig+0x26c>)
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	695b      	ldr	r3, [r3, #20]
 80027ec:	00db      	lsls	r3, r3, #3
 80027ee:	4927      	ldr	r1, [pc, #156]	; (800288c <HAL_RCC_OscConfig+0x26c>)
 80027f0:	4313      	orrs	r3, r2
 80027f2:	600b      	str	r3, [r1, #0]
 80027f4:	e015      	b.n	8002822 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80027f6:	4b26      	ldr	r3, [pc, #152]	; (8002890 <HAL_RCC_OscConfig+0x270>)
 80027f8:	2200      	movs	r2, #0
 80027fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027fc:	f7ff fbaa 	bl	8001f54 <HAL_GetTick>
 8002800:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002802:	e008      	b.n	8002816 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002804:	f7ff fba6 	bl	8001f54 <HAL_GetTick>
 8002808:	4602      	mov	r2, r0
 800280a:	693b      	ldr	r3, [r7, #16]
 800280c:	1ad3      	subs	r3, r2, r3
 800280e:	2b02      	cmp	r3, #2
 8002810:	d901      	bls.n	8002816 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002812:	2303      	movs	r3, #3
 8002814:	e180      	b.n	8002b18 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002816:	4b1d      	ldr	r3, [pc, #116]	; (800288c <HAL_RCC_OscConfig+0x26c>)
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f003 0302 	and.w	r3, r3, #2
 800281e:	2b00      	cmp	r3, #0
 8002820:	d1f0      	bne.n	8002804 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f003 0308 	and.w	r3, r3, #8
 800282a:	2b00      	cmp	r3, #0
 800282c:	d03a      	beq.n	80028a4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	699b      	ldr	r3, [r3, #24]
 8002832:	2b00      	cmp	r3, #0
 8002834:	d019      	beq.n	800286a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002836:	4b17      	ldr	r3, [pc, #92]	; (8002894 <HAL_RCC_OscConfig+0x274>)
 8002838:	2201      	movs	r2, #1
 800283a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800283c:	f7ff fb8a 	bl	8001f54 <HAL_GetTick>
 8002840:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002842:	e008      	b.n	8002856 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002844:	f7ff fb86 	bl	8001f54 <HAL_GetTick>
 8002848:	4602      	mov	r2, r0
 800284a:	693b      	ldr	r3, [r7, #16]
 800284c:	1ad3      	subs	r3, r2, r3
 800284e:	2b02      	cmp	r3, #2
 8002850:	d901      	bls.n	8002856 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002852:	2303      	movs	r3, #3
 8002854:	e160      	b.n	8002b18 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002856:	4b0d      	ldr	r3, [pc, #52]	; (800288c <HAL_RCC_OscConfig+0x26c>)
 8002858:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800285a:	f003 0302 	and.w	r3, r3, #2
 800285e:	2b00      	cmp	r3, #0
 8002860:	d0f0      	beq.n	8002844 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002862:	2001      	movs	r0, #1
 8002864:	f000 face 	bl	8002e04 <RCC_Delay>
 8002868:	e01c      	b.n	80028a4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800286a:	4b0a      	ldr	r3, [pc, #40]	; (8002894 <HAL_RCC_OscConfig+0x274>)
 800286c:	2200      	movs	r2, #0
 800286e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002870:	f7ff fb70 	bl	8001f54 <HAL_GetTick>
 8002874:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002876:	e00f      	b.n	8002898 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002878:	f7ff fb6c 	bl	8001f54 <HAL_GetTick>
 800287c:	4602      	mov	r2, r0
 800287e:	693b      	ldr	r3, [r7, #16]
 8002880:	1ad3      	subs	r3, r2, r3
 8002882:	2b02      	cmp	r3, #2
 8002884:	d908      	bls.n	8002898 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002886:	2303      	movs	r3, #3
 8002888:	e146      	b.n	8002b18 <HAL_RCC_OscConfig+0x4f8>
 800288a:	bf00      	nop
 800288c:	40021000 	.word	0x40021000
 8002890:	42420000 	.word	0x42420000
 8002894:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002898:	4b92      	ldr	r3, [pc, #584]	; (8002ae4 <HAL_RCC_OscConfig+0x4c4>)
 800289a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800289c:	f003 0302 	and.w	r3, r3, #2
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d1e9      	bne.n	8002878 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f003 0304 	and.w	r3, r3, #4
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	f000 80a6 	beq.w	80029fe <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80028b2:	2300      	movs	r3, #0
 80028b4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80028b6:	4b8b      	ldr	r3, [pc, #556]	; (8002ae4 <HAL_RCC_OscConfig+0x4c4>)
 80028b8:	69db      	ldr	r3, [r3, #28]
 80028ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d10d      	bne.n	80028de <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80028c2:	4b88      	ldr	r3, [pc, #544]	; (8002ae4 <HAL_RCC_OscConfig+0x4c4>)
 80028c4:	69db      	ldr	r3, [r3, #28]
 80028c6:	4a87      	ldr	r2, [pc, #540]	; (8002ae4 <HAL_RCC_OscConfig+0x4c4>)
 80028c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028cc:	61d3      	str	r3, [r2, #28]
 80028ce:	4b85      	ldr	r3, [pc, #532]	; (8002ae4 <HAL_RCC_OscConfig+0x4c4>)
 80028d0:	69db      	ldr	r3, [r3, #28]
 80028d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028d6:	60bb      	str	r3, [r7, #8]
 80028d8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80028da:	2301      	movs	r3, #1
 80028dc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028de:	4b82      	ldr	r3, [pc, #520]	; (8002ae8 <HAL_RCC_OscConfig+0x4c8>)
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d118      	bne.n	800291c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80028ea:	4b7f      	ldr	r3, [pc, #508]	; (8002ae8 <HAL_RCC_OscConfig+0x4c8>)
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	4a7e      	ldr	r2, [pc, #504]	; (8002ae8 <HAL_RCC_OscConfig+0x4c8>)
 80028f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028f4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80028f6:	f7ff fb2d 	bl	8001f54 <HAL_GetTick>
 80028fa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028fc:	e008      	b.n	8002910 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80028fe:	f7ff fb29 	bl	8001f54 <HAL_GetTick>
 8002902:	4602      	mov	r2, r0
 8002904:	693b      	ldr	r3, [r7, #16]
 8002906:	1ad3      	subs	r3, r2, r3
 8002908:	2b64      	cmp	r3, #100	; 0x64
 800290a:	d901      	bls.n	8002910 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800290c:	2303      	movs	r3, #3
 800290e:	e103      	b.n	8002b18 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002910:	4b75      	ldr	r3, [pc, #468]	; (8002ae8 <HAL_RCC_OscConfig+0x4c8>)
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002918:	2b00      	cmp	r3, #0
 800291a:	d0f0      	beq.n	80028fe <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	68db      	ldr	r3, [r3, #12]
 8002920:	2b01      	cmp	r3, #1
 8002922:	d106      	bne.n	8002932 <HAL_RCC_OscConfig+0x312>
 8002924:	4b6f      	ldr	r3, [pc, #444]	; (8002ae4 <HAL_RCC_OscConfig+0x4c4>)
 8002926:	6a1b      	ldr	r3, [r3, #32]
 8002928:	4a6e      	ldr	r2, [pc, #440]	; (8002ae4 <HAL_RCC_OscConfig+0x4c4>)
 800292a:	f043 0301 	orr.w	r3, r3, #1
 800292e:	6213      	str	r3, [r2, #32]
 8002930:	e02d      	b.n	800298e <HAL_RCC_OscConfig+0x36e>
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	68db      	ldr	r3, [r3, #12]
 8002936:	2b00      	cmp	r3, #0
 8002938:	d10c      	bne.n	8002954 <HAL_RCC_OscConfig+0x334>
 800293a:	4b6a      	ldr	r3, [pc, #424]	; (8002ae4 <HAL_RCC_OscConfig+0x4c4>)
 800293c:	6a1b      	ldr	r3, [r3, #32]
 800293e:	4a69      	ldr	r2, [pc, #420]	; (8002ae4 <HAL_RCC_OscConfig+0x4c4>)
 8002940:	f023 0301 	bic.w	r3, r3, #1
 8002944:	6213      	str	r3, [r2, #32]
 8002946:	4b67      	ldr	r3, [pc, #412]	; (8002ae4 <HAL_RCC_OscConfig+0x4c4>)
 8002948:	6a1b      	ldr	r3, [r3, #32]
 800294a:	4a66      	ldr	r2, [pc, #408]	; (8002ae4 <HAL_RCC_OscConfig+0x4c4>)
 800294c:	f023 0304 	bic.w	r3, r3, #4
 8002950:	6213      	str	r3, [r2, #32]
 8002952:	e01c      	b.n	800298e <HAL_RCC_OscConfig+0x36e>
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	68db      	ldr	r3, [r3, #12]
 8002958:	2b05      	cmp	r3, #5
 800295a:	d10c      	bne.n	8002976 <HAL_RCC_OscConfig+0x356>
 800295c:	4b61      	ldr	r3, [pc, #388]	; (8002ae4 <HAL_RCC_OscConfig+0x4c4>)
 800295e:	6a1b      	ldr	r3, [r3, #32]
 8002960:	4a60      	ldr	r2, [pc, #384]	; (8002ae4 <HAL_RCC_OscConfig+0x4c4>)
 8002962:	f043 0304 	orr.w	r3, r3, #4
 8002966:	6213      	str	r3, [r2, #32]
 8002968:	4b5e      	ldr	r3, [pc, #376]	; (8002ae4 <HAL_RCC_OscConfig+0x4c4>)
 800296a:	6a1b      	ldr	r3, [r3, #32]
 800296c:	4a5d      	ldr	r2, [pc, #372]	; (8002ae4 <HAL_RCC_OscConfig+0x4c4>)
 800296e:	f043 0301 	orr.w	r3, r3, #1
 8002972:	6213      	str	r3, [r2, #32]
 8002974:	e00b      	b.n	800298e <HAL_RCC_OscConfig+0x36e>
 8002976:	4b5b      	ldr	r3, [pc, #364]	; (8002ae4 <HAL_RCC_OscConfig+0x4c4>)
 8002978:	6a1b      	ldr	r3, [r3, #32]
 800297a:	4a5a      	ldr	r2, [pc, #360]	; (8002ae4 <HAL_RCC_OscConfig+0x4c4>)
 800297c:	f023 0301 	bic.w	r3, r3, #1
 8002980:	6213      	str	r3, [r2, #32]
 8002982:	4b58      	ldr	r3, [pc, #352]	; (8002ae4 <HAL_RCC_OscConfig+0x4c4>)
 8002984:	6a1b      	ldr	r3, [r3, #32]
 8002986:	4a57      	ldr	r2, [pc, #348]	; (8002ae4 <HAL_RCC_OscConfig+0x4c4>)
 8002988:	f023 0304 	bic.w	r3, r3, #4
 800298c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	68db      	ldr	r3, [r3, #12]
 8002992:	2b00      	cmp	r3, #0
 8002994:	d015      	beq.n	80029c2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002996:	f7ff fadd 	bl	8001f54 <HAL_GetTick>
 800299a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800299c:	e00a      	b.n	80029b4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800299e:	f7ff fad9 	bl	8001f54 <HAL_GetTick>
 80029a2:	4602      	mov	r2, r0
 80029a4:	693b      	ldr	r3, [r7, #16]
 80029a6:	1ad3      	subs	r3, r2, r3
 80029a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80029ac:	4293      	cmp	r3, r2
 80029ae:	d901      	bls.n	80029b4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80029b0:	2303      	movs	r3, #3
 80029b2:	e0b1      	b.n	8002b18 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029b4:	4b4b      	ldr	r3, [pc, #300]	; (8002ae4 <HAL_RCC_OscConfig+0x4c4>)
 80029b6:	6a1b      	ldr	r3, [r3, #32]
 80029b8:	f003 0302 	and.w	r3, r3, #2
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d0ee      	beq.n	800299e <HAL_RCC_OscConfig+0x37e>
 80029c0:	e014      	b.n	80029ec <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029c2:	f7ff fac7 	bl	8001f54 <HAL_GetTick>
 80029c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80029c8:	e00a      	b.n	80029e0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029ca:	f7ff fac3 	bl	8001f54 <HAL_GetTick>
 80029ce:	4602      	mov	r2, r0
 80029d0:	693b      	ldr	r3, [r7, #16]
 80029d2:	1ad3      	subs	r3, r2, r3
 80029d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80029d8:	4293      	cmp	r3, r2
 80029da:	d901      	bls.n	80029e0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80029dc:	2303      	movs	r3, #3
 80029de:	e09b      	b.n	8002b18 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80029e0:	4b40      	ldr	r3, [pc, #256]	; (8002ae4 <HAL_RCC_OscConfig+0x4c4>)
 80029e2:	6a1b      	ldr	r3, [r3, #32]
 80029e4:	f003 0302 	and.w	r3, r3, #2
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d1ee      	bne.n	80029ca <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80029ec:	7dfb      	ldrb	r3, [r7, #23]
 80029ee:	2b01      	cmp	r3, #1
 80029f0:	d105      	bne.n	80029fe <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80029f2:	4b3c      	ldr	r3, [pc, #240]	; (8002ae4 <HAL_RCC_OscConfig+0x4c4>)
 80029f4:	69db      	ldr	r3, [r3, #28]
 80029f6:	4a3b      	ldr	r2, [pc, #236]	; (8002ae4 <HAL_RCC_OscConfig+0x4c4>)
 80029f8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80029fc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	69db      	ldr	r3, [r3, #28]
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	f000 8087 	beq.w	8002b16 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002a08:	4b36      	ldr	r3, [pc, #216]	; (8002ae4 <HAL_RCC_OscConfig+0x4c4>)
 8002a0a:	685b      	ldr	r3, [r3, #4]
 8002a0c:	f003 030c 	and.w	r3, r3, #12
 8002a10:	2b08      	cmp	r3, #8
 8002a12:	d061      	beq.n	8002ad8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	69db      	ldr	r3, [r3, #28]
 8002a18:	2b02      	cmp	r3, #2
 8002a1a:	d146      	bne.n	8002aaa <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a1c:	4b33      	ldr	r3, [pc, #204]	; (8002aec <HAL_RCC_OscConfig+0x4cc>)
 8002a1e:	2200      	movs	r2, #0
 8002a20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a22:	f7ff fa97 	bl	8001f54 <HAL_GetTick>
 8002a26:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a28:	e008      	b.n	8002a3c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a2a:	f7ff fa93 	bl	8001f54 <HAL_GetTick>
 8002a2e:	4602      	mov	r2, r0
 8002a30:	693b      	ldr	r3, [r7, #16]
 8002a32:	1ad3      	subs	r3, r2, r3
 8002a34:	2b02      	cmp	r3, #2
 8002a36:	d901      	bls.n	8002a3c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002a38:	2303      	movs	r3, #3
 8002a3a:	e06d      	b.n	8002b18 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a3c:	4b29      	ldr	r3, [pc, #164]	; (8002ae4 <HAL_RCC_OscConfig+0x4c4>)
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d1f0      	bne.n	8002a2a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	6a1b      	ldr	r3, [r3, #32]
 8002a4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a50:	d108      	bne.n	8002a64 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002a52:	4b24      	ldr	r3, [pc, #144]	; (8002ae4 <HAL_RCC_OscConfig+0x4c4>)
 8002a54:	685b      	ldr	r3, [r3, #4]
 8002a56:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	689b      	ldr	r3, [r3, #8]
 8002a5e:	4921      	ldr	r1, [pc, #132]	; (8002ae4 <HAL_RCC_OscConfig+0x4c4>)
 8002a60:	4313      	orrs	r3, r2
 8002a62:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002a64:	4b1f      	ldr	r3, [pc, #124]	; (8002ae4 <HAL_RCC_OscConfig+0x4c4>)
 8002a66:	685b      	ldr	r3, [r3, #4]
 8002a68:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	6a19      	ldr	r1, [r3, #32]
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a74:	430b      	orrs	r3, r1
 8002a76:	491b      	ldr	r1, [pc, #108]	; (8002ae4 <HAL_RCC_OscConfig+0x4c4>)
 8002a78:	4313      	orrs	r3, r2
 8002a7a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002a7c:	4b1b      	ldr	r3, [pc, #108]	; (8002aec <HAL_RCC_OscConfig+0x4cc>)
 8002a7e:	2201      	movs	r2, #1
 8002a80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a82:	f7ff fa67 	bl	8001f54 <HAL_GetTick>
 8002a86:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002a88:	e008      	b.n	8002a9c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a8a:	f7ff fa63 	bl	8001f54 <HAL_GetTick>
 8002a8e:	4602      	mov	r2, r0
 8002a90:	693b      	ldr	r3, [r7, #16]
 8002a92:	1ad3      	subs	r3, r2, r3
 8002a94:	2b02      	cmp	r3, #2
 8002a96:	d901      	bls.n	8002a9c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002a98:	2303      	movs	r3, #3
 8002a9a:	e03d      	b.n	8002b18 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002a9c:	4b11      	ldr	r3, [pc, #68]	; (8002ae4 <HAL_RCC_OscConfig+0x4c4>)
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d0f0      	beq.n	8002a8a <HAL_RCC_OscConfig+0x46a>
 8002aa8:	e035      	b.n	8002b16 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002aaa:	4b10      	ldr	r3, [pc, #64]	; (8002aec <HAL_RCC_OscConfig+0x4cc>)
 8002aac:	2200      	movs	r2, #0
 8002aae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ab0:	f7ff fa50 	bl	8001f54 <HAL_GetTick>
 8002ab4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ab6:	e008      	b.n	8002aca <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ab8:	f7ff fa4c 	bl	8001f54 <HAL_GetTick>
 8002abc:	4602      	mov	r2, r0
 8002abe:	693b      	ldr	r3, [r7, #16]
 8002ac0:	1ad3      	subs	r3, r2, r3
 8002ac2:	2b02      	cmp	r3, #2
 8002ac4:	d901      	bls.n	8002aca <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002ac6:	2303      	movs	r3, #3
 8002ac8:	e026      	b.n	8002b18 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002aca:	4b06      	ldr	r3, [pc, #24]	; (8002ae4 <HAL_RCC_OscConfig+0x4c4>)
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d1f0      	bne.n	8002ab8 <HAL_RCC_OscConfig+0x498>
 8002ad6:	e01e      	b.n	8002b16 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	69db      	ldr	r3, [r3, #28]
 8002adc:	2b01      	cmp	r3, #1
 8002ade:	d107      	bne.n	8002af0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002ae0:	2301      	movs	r3, #1
 8002ae2:	e019      	b.n	8002b18 <HAL_RCC_OscConfig+0x4f8>
 8002ae4:	40021000 	.word	0x40021000
 8002ae8:	40007000 	.word	0x40007000
 8002aec:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002af0:	4b0b      	ldr	r3, [pc, #44]	; (8002b20 <HAL_RCC_OscConfig+0x500>)
 8002af2:	685b      	ldr	r3, [r3, #4]
 8002af4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	6a1b      	ldr	r3, [r3, #32]
 8002b00:	429a      	cmp	r2, r3
 8002b02:	d106      	bne.n	8002b12 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b0e:	429a      	cmp	r2, r3
 8002b10:	d001      	beq.n	8002b16 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002b12:	2301      	movs	r3, #1
 8002b14:	e000      	b.n	8002b18 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002b16:	2300      	movs	r3, #0
}
 8002b18:	4618      	mov	r0, r3
 8002b1a:	3718      	adds	r7, #24
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	bd80      	pop	{r7, pc}
 8002b20:	40021000 	.word	0x40021000

08002b24 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b24:	b580      	push	{r7, lr}
 8002b26:	b084      	sub	sp, #16
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]
 8002b2c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d101      	bne.n	8002b38 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002b34:	2301      	movs	r3, #1
 8002b36:	e0d0      	b.n	8002cda <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002b38:	4b6a      	ldr	r3, [pc, #424]	; (8002ce4 <HAL_RCC_ClockConfig+0x1c0>)
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f003 0307 	and.w	r3, r3, #7
 8002b40:	683a      	ldr	r2, [r7, #0]
 8002b42:	429a      	cmp	r2, r3
 8002b44:	d910      	bls.n	8002b68 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b46:	4b67      	ldr	r3, [pc, #412]	; (8002ce4 <HAL_RCC_ClockConfig+0x1c0>)
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f023 0207 	bic.w	r2, r3, #7
 8002b4e:	4965      	ldr	r1, [pc, #404]	; (8002ce4 <HAL_RCC_ClockConfig+0x1c0>)
 8002b50:	683b      	ldr	r3, [r7, #0]
 8002b52:	4313      	orrs	r3, r2
 8002b54:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b56:	4b63      	ldr	r3, [pc, #396]	; (8002ce4 <HAL_RCC_ClockConfig+0x1c0>)
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f003 0307 	and.w	r3, r3, #7
 8002b5e:	683a      	ldr	r2, [r7, #0]
 8002b60:	429a      	cmp	r2, r3
 8002b62:	d001      	beq.n	8002b68 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002b64:	2301      	movs	r3, #1
 8002b66:	e0b8      	b.n	8002cda <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f003 0302 	and.w	r3, r3, #2
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d020      	beq.n	8002bb6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f003 0304 	and.w	r3, r3, #4
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d005      	beq.n	8002b8c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002b80:	4b59      	ldr	r3, [pc, #356]	; (8002ce8 <HAL_RCC_ClockConfig+0x1c4>)
 8002b82:	685b      	ldr	r3, [r3, #4]
 8002b84:	4a58      	ldr	r2, [pc, #352]	; (8002ce8 <HAL_RCC_ClockConfig+0x1c4>)
 8002b86:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002b8a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f003 0308 	and.w	r3, r3, #8
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d005      	beq.n	8002ba4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002b98:	4b53      	ldr	r3, [pc, #332]	; (8002ce8 <HAL_RCC_ClockConfig+0x1c4>)
 8002b9a:	685b      	ldr	r3, [r3, #4]
 8002b9c:	4a52      	ldr	r2, [pc, #328]	; (8002ce8 <HAL_RCC_ClockConfig+0x1c4>)
 8002b9e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002ba2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ba4:	4b50      	ldr	r3, [pc, #320]	; (8002ce8 <HAL_RCC_ClockConfig+0x1c4>)
 8002ba6:	685b      	ldr	r3, [r3, #4]
 8002ba8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	689b      	ldr	r3, [r3, #8]
 8002bb0:	494d      	ldr	r1, [pc, #308]	; (8002ce8 <HAL_RCC_ClockConfig+0x1c4>)
 8002bb2:	4313      	orrs	r3, r2
 8002bb4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f003 0301 	and.w	r3, r3, #1
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d040      	beq.n	8002c44 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	685b      	ldr	r3, [r3, #4]
 8002bc6:	2b01      	cmp	r3, #1
 8002bc8:	d107      	bne.n	8002bda <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002bca:	4b47      	ldr	r3, [pc, #284]	; (8002ce8 <HAL_RCC_ClockConfig+0x1c4>)
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d115      	bne.n	8002c02 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002bd6:	2301      	movs	r3, #1
 8002bd8:	e07f      	b.n	8002cda <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	685b      	ldr	r3, [r3, #4]
 8002bde:	2b02      	cmp	r3, #2
 8002be0:	d107      	bne.n	8002bf2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002be2:	4b41      	ldr	r3, [pc, #260]	; (8002ce8 <HAL_RCC_ClockConfig+0x1c4>)
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d109      	bne.n	8002c02 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002bee:	2301      	movs	r3, #1
 8002bf0:	e073      	b.n	8002cda <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bf2:	4b3d      	ldr	r3, [pc, #244]	; (8002ce8 <HAL_RCC_ClockConfig+0x1c4>)
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f003 0302 	and.w	r3, r3, #2
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d101      	bne.n	8002c02 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002bfe:	2301      	movs	r3, #1
 8002c00:	e06b      	b.n	8002cda <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002c02:	4b39      	ldr	r3, [pc, #228]	; (8002ce8 <HAL_RCC_ClockConfig+0x1c4>)
 8002c04:	685b      	ldr	r3, [r3, #4]
 8002c06:	f023 0203 	bic.w	r2, r3, #3
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	685b      	ldr	r3, [r3, #4]
 8002c0e:	4936      	ldr	r1, [pc, #216]	; (8002ce8 <HAL_RCC_ClockConfig+0x1c4>)
 8002c10:	4313      	orrs	r3, r2
 8002c12:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002c14:	f7ff f99e 	bl	8001f54 <HAL_GetTick>
 8002c18:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c1a:	e00a      	b.n	8002c32 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c1c:	f7ff f99a 	bl	8001f54 <HAL_GetTick>
 8002c20:	4602      	mov	r2, r0
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	1ad3      	subs	r3, r2, r3
 8002c26:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c2a:	4293      	cmp	r3, r2
 8002c2c:	d901      	bls.n	8002c32 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002c2e:	2303      	movs	r3, #3
 8002c30:	e053      	b.n	8002cda <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c32:	4b2d      	ldr	r3, [pc, #180]	; (8002ce8 <HAL_RCC_ClockConfig+0x1c4>)
 8002c34:	685b      	ldr	r3, [r3, #4]
 8002c36:	f003 020c 	and.w	r2, r3, #12
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	685b      	ldr	r3, [r3, #4]
 8002c3e:	009b      	lsls	r3, r3, #2
 8002c40:	429a      	cmp	r2, r3
 8002c42:	d1eb      	bne.n	8002c1c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002c44:	4b27      	ldr	r3, [pc, #156]	; (8002ce4 <HAL_RCC_ClockConfig+0x1c0>)
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f003 0307 	and.w	r3, r3, #7
 8002c4c:	683a      	ldr	r2, [r7, #0]
 8002c4e:	429a      	cmp	r2, r3
 8002c50:	d210      	bcs.n	8002c74 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c52:	4b24      	ldr	r3, [pc, #144]	; (8002ce4 <HAL_RCC_ClockConfig+0x1c0>)
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f023 0207 	bic.w	r2, r3, #7
 8002c5a:	4922      	ldr	r1, [pc, #136]	; (8002ce4 <HAL_RCC_ClockConfig+0x1c0>)
 8002c5c:	683b      	ldr	r3, [r7, #0]
 8002c5e:	4313      	orrs	r3, r2
 8002c60:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c62:	4b20      	ldr	r3, [pc, #128]	; (8002ce4 <HAL_RCC_ClockConfig+0x1c0>)
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f003 0307 	and.w	r3, r3, #7
 8002c6a:	683a      	ldr	r2, [r7, #0]
 8002c6c:	429a      	cmp	r2, r3
 8002c6e:	d001      	beq.n	8002c74 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002c70:	2301      	movs	r3, #1
 8002c72:	e032      	b.n	8002cda <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f003 0304 	and.w	r3, r3, #4
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d008      	beq.n	8002c92 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002c80:	4b19      	ldr	r3, [pc, #100]	; (8002ce8 <HAL_RCC_ClockConfig+0x1c4>)
 8002c82:	685b      	ldr	r3, [r3, #4]
 8002c84:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	68db      	ldr	r3, [r3, #12]
 8002c8c:	4916      	ldr	r1, [pc, #88]	; (8002ce8 <HAL_RCC_ClockConfig+0x1c4>)
 8002c8e:	4313      	orrs	r3, r2
 8002c90:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f003 0308 	and.w	r3, r3, #8
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d009      	beq.n	8002cb2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002c9e:	4b12      	ldr	r3, [pc, #72]	; (8002ce8 <HAL_RCC_ClockConfig+0x1c4>)
 8002ca0:	685b      	ldr	r3, [r3, #4]
 8002ca2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	691b      	ldr	r3, [r3, #16]
 8002caa:	00db      	lsls	r3, r3, #3
 8002cac:	490e      	ldr	r1, [pc, #56]	; (8002ce8 <HAL_RCC_ClockConfig+0x1c4>)
 8002cae:	4313      	orrs	r3, r2
 8002cb0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002cb2:	f000 f821 	bl	8002cf8 <HAL_RCC_GetSysClockFreq>
 8002cb6:	4602      	mov	r2, r0
 8002cb8:	4b0b      	ldr	r3, [pc, #44]	; (8002ce8 <HAL_RCC_ClockConfig+0x1c4>)
 8002cba:	685b      	ldr	r3, [r3, #4]
 8002cbc:	091b      	lsrs	r3, r3, #4
 8002cbe:	f003 030f 	and.w	r3, r3, #15
 8002cc2:	490a      	ldr	r1, [pc, #40]	; (8002cec <HAL_RCC_ClockConfig+0x1c8>)
 8002cc4:	5ccb      	ldrb	r3, [r1, r3]
 8002cc6:	fa22 f303 	lsr.w	r3, r2, r3
 8002cca:	4a09      	ldr	r2, [pc, #36]	; (8002cf0 <HAL_RCC_ClockConfig+0x1cc>)
 8002ccc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002cce:	4b09      	ldr	r3, [pc, #36]	; (8002cf4 <HAL_RCC_ClockConfig+0x1d0>)
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	f7ff f8fc 	bl	8001ed0 <HAL_InitTick>

  return HAL_OK;
 8002cd8:	2300      	movs	r3, #0
}
 8002cda:	4618      	mov	r0, r3
 8002cdc:	3710      	adds	r7, #16
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	bd80      	pop	{r7, pc}
 8002ce2:	bf00      	nop
 8002ce4:	40022000 	.word	0x40022000
 8002ce8:	40021000 	.word	0x40021000
 8002cec:	08006c2c 	.word	0x08006c2c
 8002cf0:	20000004 	.word	0x20000004
 8002cf4:	20000008 	.word	0x20000008

08002cf8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002cf8:	b480      	push	{r7}
 8002cfa:	b087      	sub	sp, #28
 8002cfc:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002cfe:	2300      	movs	r3, #0
 8002d00:	60fb      	str	r3, [r7, #12]
 8002d02:	2300      	movs	r3, #0
 8002d04:	60bb      	str	r3, [r7, #8]
 8002d06:	2300      	movs	r3, #0
 8002d08:	617b      	str	r3, [r7, #20]
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002d0e:	2300      	movs	r3, #0
 8002d10:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002d12:	4b1e      	ldr	r3, [pc, #120]	; (8002d8c <HAL_RCC_GetSysClockFreq+0x94>)
 8002d14:	685b      	ldr	r3, [r3, #4]
 8002d16:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	f003 030c 	and.w	r3, r3, #12
 8002d1e:	2b04      	cmp	r3, #4
 8002d20:	d002      	beq.n	8002d28 <HAL_RCC_GetSysClockFreq+0x30>
 8002d22:	2b08      	cmp	r3, #8
 8002d24:	d003      	beq.n	8002d2e <HAL_RCC_GetSysClockFreq+0x36>
 8002d26:	e027      	b.n	8002d78 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002d28:	4b19      	ldr	r3, [pc, #100]	; (8002d90 <HAL_RCC_GetSysClockFreq+0x98>)
 8002d2a:	613b      	str	r3, [r7, #16]
      break;
 8002d2c:	e027      	b.n	8002d7e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	0c9b      	lsrs	r3, r3, #18
 8002d32:	f003 030f 	and.w	r3, r3, #15
 8002d36:	4a17      	ldr	r2, [pc, #92]	; (8002d94 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002d38:	5cd3      	ldrb	r3, [r2, r3]
 8002d3a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d010      	beq.n	8002d68 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002d46:	4b11      	ldr	r3, [pc, #68]	; (8002d8c <HAL_RCC_GetSysClockFreq+0x94>)
 8002d48:	685b      	ldr	r3, [r3, #4]
 8002d4a:	0c5b      	lsrs	r3, r3, #17
 8002d4c:	f003 0301 	and.w	r3, r3, #1
 8002d50:	4a11      	ldr	r2, [pc, #68]	; (8002d98 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002d52:	5cd3      	ldrb	r3, [r2, r3]
 8002d54:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	4a0d      	ldr	r2, [pc, #52]	; (8002d90 <HAL_RCC_GetSysClockFreq+0x98>)
 8002d5a:	fb03 f202 	mul.w	r2, r3, r2
 8002d5e:	68bb      	ldr	r3, [r7, #8]
 8002d60:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d64:	617b      	str	r3, [r7, #20]
 8002d66:	e004      	b.n	8002d72 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	4a0c      	ldr	r2, [pc, #48]	; (8002d9c <HAL_RCC_GetSysClockFreq+0xa4>)
 8002d6c:	fb02 f303 	mul.w	r3, r2, r3
 8002d70:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002d72:	697b      	ldr	r3, [r7, #20]
 8002d74:	613b      	str	r3, [r7, #16]
      break;
 8002d76:	e002      	b.n	8002d7e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002d78:	4b05      	ldr	r3, [pc, #20]	; (8002d90 <HAL_RCC_GetSysClockFreq+0x98>)
 8002d7a:	613b      	str	r3, [r7, #16]
      break;
 8002d7c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002d7e:	693b      	ldr	r3, [r7, #16]
}
 8002d80:	4618      	mov	r0, r3
 8002d82:	371c      	adds	r7, #28
 8002d84:	46bd      	mov	sp, r7
 8002d86:	bc80      	pop	{r7}
 8002d88:	4770      	bx	lr
 8002d8a:	bf00      	nop
 8002d8c:	40021000 	.word	0x40021000
 8002d90:	007a1200 	.word	0x007a1200
 8002d94:	08006c44 	.word	0x08006c44
 8002d98:	08006c54 	.word	0x08006c54
 8002d9c:	003d0900 	.word	0x003d0900

08002da0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002da0:	b480      	push	{r7}
 8002da2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002da4:	4b02      	ldr	r3, [pc, #8]	; (8002db0 <HAL_RCC_GetHCLKFreq+0x10>)
 8002da6:	681b      	ldr	r3, [r3, #0]
}
 8002da8:	4618      	mov	r0, r3
 8002daa:	46bd      	mov	sp, r7
 8002dac:	bc80      	pop	{r7}
 8002dae:	4770      	bx	lr
 8002db0:	20000004 	.word	0x20000004

08002db4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002db4:	b580      	push	{r7, lr}
 8002db6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002db8:	f7ff fff2 	bl	8002da0 <HAL_RCC_GetHCLKFreq>
 8002dbc:	4602      	mov	r2, r0
 8002dbe:	4b05      	ldr	r3, [pc, #20]	; (8002dd4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002dc0:	685b      	ldr	r3, [r3, #4]
 8002dc2:	0a1b      	lsrs	r3, r3, #8
 8002dc4:	f003 0307 	and.w	r3, r3, #7
 8002dc8:	4903      	ldr	r1, [pc, #12]	; (8002dd8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002dca:	5ccb      	ldrb	r3, [r1, r3]
 8002dcc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002dd0:	4618      	mov	r0, r3
 8002dd2:	bd80      	pop	{r7, pc}
 8002dd4:	40021000 	.word	0x40021000
 8002dd8:	08006c3c 	.word	0x08006c3c

08002ddc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002de0:	f7ff ffde 	bl	8002da0 <HAL_RCC_GetHCLKFreq>
 8002de4:	4602      	mov	r2, r0
 8002de6:	4b05      	ldr	r3, [pc, #20]	; (8002dfc <HAL_RCC_GetPCLK2Freq+0x20>)
 8002de8:	685b      	ldr	r3, [r3, #4]
 8002dea:	0adb      	lsrs	r3, r3, #11
 8002dec:	f003 0307 	and.w	r3, r3, #7
 8002df0:	4903      	ldr	r1, [pc, #12]	; (8002e00 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002df2:	5ccb      	ldrb	r3, [r1, r3]
 8002df4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002df8:	4618      	mov	r0, r3
 8002dfa:	bd80      	pop	{r7, pc}
 8002dfc:	40021000 	.word	0x40021000
 8002e00:	08006c3c 	.word	0x08006c3c

08002e04 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002e04:	b480      	push	{r7}
 8002e06:	b085      	sub	sp, #20
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002e0c:	4b0a      	ldr	r3, [pc, #40]	; (8002e38 <RCC_Delay+0x34>)
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	4a0a      	ldr	r2, [pc, #40]	; (8002e3c <RCC_Delay+0x38>)
 8002e12:	fba2 2303 	umull	r2, r3, r2, r3
 8002e16:	0a5b      	lsrs	r3, r3, #9
 8002e18:	687a      	ldr	r2, [r7, #4]
 8002e1a:	fb02 f303 	mul.w	r3, r2, r3
 8002e1e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002e20:	bf00      	nop
  }
  while (Delay --);
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	1e5a      	subs	r2, r3, #1
 8002e26:	60fa      	str	r2, [r7, #12]
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d1f9      	bne.n	8002e20 <RCC_Delay+0x1c>
}
 8002e2c:	bf00      	nop
 8002e2e:	bf00      	nop
 8002e30:	3714      	adds	r7, #20
 8002e32:	46bd      	mov	sp, r7
 8002e34:	bc80      	pop	{r7}
 8002e36:	4770      	bx	lr
 8002e38:	20000004 	.word	0x20000004
 8002e3c:	10624dd3 	.word	0x10624dd3

08002e40 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002e40:	b580      	push	{r7, lr}
 8002e42:	b082      	sub	sp, #8
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d101      	bne.n	8002e52 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002e4e:	2301      	movs	r3, #1
 8002e50:	e041      	b.n	8002ed6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e58:	b2db      	uxtb	r3, r3
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d106      	bne.n	8002e6c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	2200      	movs	r2, #0
 8002e62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002e66:	6878      	ldr	r0, [r7, #4]
 8002e68:	f7fe feb8 	bl	8001bdc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	2202      	movs	r2, #2
 8002e70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681a      	ldr	r2, [r3, #0]
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	3304      	adds	r3, #4
 8002e7c:	4619      	mov	r1, r3
 8002e7e:	4610      	mov	r0, r2
 8002e80:	f000 fe30 	bl	8003ae4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	2201      	movs	r2, #1
 8002e88:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	2201      	movs	r2, #1
 8002e90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	2201      	movs	r2, #1
 8002e98:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	2201      	movs	r2, #1
 8002ea0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	2201      	movs	r2, #1
 8002ea8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	2201      	movs	r2, #1
 8002eb0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	2201      	movs	r2, #1
 8002eb8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	2201      	movs	r2, #1
 8002ec0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	2201      	movs	r2, #1
 8002ec8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	2201      	movs	r2, #1
 8002ed0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002ed4:	2300      	movs	r3, #0
}
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	3708      	adds	r7, #8
 8002eda:	46bd      	mov	sp, r7
 8002edc:	bd80      	pop	{r7, pc}

08002ede <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002ede:	b580      	push	{r7, lr}
 8002ee0:	b082      	sub	sp, #8
 8002ee2:	af00      	add	r7, sp, #0
 8002ee4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d101      	bne.n	8002ef0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002eec:	2301      	movs	r3, #1
 8002eee:	e041      	b.n	8002f74 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ef6:	b2db      	uxtb	r3, r3
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d106      	bne.n	8002f0a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	2200      	movs	r2, #0
 8002f00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002f04:	6878      	ldr	r0, [r7, #4]
 8002f06:	f7fe fe4b 	bl	8001ba0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	2202      	movs	r2, #2
 8002f0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681a      	ldr	r2, [r3, #0]
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	3304      	adds	r3, #4
 8002f1a:	4619      	mov	r1, r3
 8002f1c:	4610      	mov	r0, r2
 8002f1e:	f000 fde1 	bl	8003ae4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	2201      	movs	r2, #1
 8002f26:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	2201      	movs	r2, #1
 8002f2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	2201      	movs	r2, #1
 8002f36:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	2201      	movs	r2, #1
 8002f3e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	2201      	movs	r2, #1
 8002f46:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	2201      	movs	r2, #1
 8002f4e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	2201      	movs	r2, #1
 8002f56:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	2201      	movs	r2, #1
 8002f5e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	2201      	movs	r2, #1
 8002f66:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	2201      	movs	r2, #1
 8002f6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002f72:	2300      	movs	r3, #0
}
 8002f74:	4618      	mov	r0, r3
 8002f76:	3708      	adds	r7, #8
 8002f78:	46bd      	mov	sp, r7
 8002f7a:	bd80      	pop	{r7, pc}

08002f7c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002f7c:	b580      	push	{r7, lr}
 8002f7e:	b084      	sub	sp, #16
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	6078      	str	r0, [r7, #4]
 8002f84:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002f86:	683b      	ldr	r3, [r7, #0]
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d109      	bne.n	8002fa0 <HAL_TIM_PWM_Start+0x24>
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002f92:	b2db      	uxtb	r3, r3
 8002f94:	2b01      	cmp	r3, #1
 8002f96:	bf14      	ite	ne
 8002f98:	2301      	movne	r3, #1
 8002f9a:	2300      	moveq	r3, #0
 8002f9c:	b2db      	uxtb	r3, r3
 8002f9e:	e022      	b.n	8002fe6 <HAL_TIM_PWM_Start+0x6a>
 8002fa0:	683b      	ldr	r3, [r7, #0]
 8002fa2:	2b04      	cmp	r3, #4
 8002fa4:	d109      	bne.n	8002fba <HAL_TIM_PWM_Start+0x3e>
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002fac:	b2db      	uxtb	r3, r3
 8002fae:	2b01      	cmp	r3, #1
 8002fb0:	bf14      	ite	ne
 8002fb2:	2301      	movne	r3, #1
 8002fb4:	2300      	moveq	r3, #0
 8002fb6:	b2db      	uxtb	r3, r3
 8002fb8:	e015      	b.n	8002fe6 <HAL_TIM_PWM_Start+0x6a>
 8002fba:	683b      	ldr	r3, [r7, #0]
 8002fbc:	2b08      	cmp	r3, #8
 8002fbe:	d109      	bne.n	8002fd4 <HAL_TIM_PWM_Start+0x58>
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002fc6:	b2db      	uxtb	r3, r3
 8002fc8:	2b01      	cmp	r3, #1
 8002fca:	bf14      	ite	ne
 8002fcc:	2301      	movne	r3, #1
 8002fce:	2300      	moveq	r3, #0
 8002fd0:	b2db      	uxtb	r3, r3
 8002fd2:	e008      	b.n	8002fe6 <HAL_TIM_PWM_Start+0x6a>
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002fda:	b2db      	uxtb	r3, r3
 8002fdc:	2b01      	cmp	r3, #1
 8002fde:	bf14      	ite	ne
 8002fe0:	2301      	movne	r3, #1
 8002fe2:	2300      	moveq	r3, #0
 8002fe4:	b2db      	uxtb	r3, r3
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d001      	beq.n	8002fee <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002fea:	2301      	movs	r3, #1
 8002fec:	e05e      	b.n	80030ac <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002fee:	683b      	ldr	r3, [r7, #0]
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d104      	bne.n	8002ffe <HAL_TIM_PWM_Start+0x82>
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	2202      	movs	r2, #2
 8002ff8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002ffc:	e013      	b.n	8003026 <HAL_TIM_PWM_Start+0xaa>
 8002ffe:	683b      	ldr	r3, [r7, #0]
 8003000:	2b04      	cmp	r3, #4
 8003002:	d104      	bne.n	800300e <HAL_TIM_PWM_Start+0x92>
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	2202      	movs	r2, #2
 8003008:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800300c:	e00b      	b.n	8003026 <HAL_TIM_PWM_Start+0xaa>
 800300e:	683b      	ldr	r3, [r7, #0]
 8003010:	2b08      	cmp	r3, #8
 8003012:	d104      	bne.n	800301e <HAL_TIM_PWM_Start+0xa2>
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	2202      	movs	r2, #2
 8003018:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800301c:	e003      	b.n	8003026 <HAL_TIM_PWM_Start+0xaa>
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	2202      	movs	r2, #2
 8003022:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	2201      	movs	r2, #1
 800302c:	6839      	ldr	r1, [r7, #0]
 800302e:	4618      	mov	r0, r3
 8003030:	f001 f8e5 	bl	80041fe <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	4a1e      	ldr	r2, [pc, #120]	; (80030b4 <HAL_TIM_PWM_Start+0x138>)
 800303a:	4293      	cmp	r3, r2
 800303c:	d107      	bne.n	800304e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800304c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	4a18      	ldr	r2, [pc, #96]	; (80030b4 <HAL_TIM_PWM_Start+0x138>)
 8003054:	4293      	cmp	r3, r2
 8003056:	d00e      	beq.n	8003076 <HAL_TIM_PWM_Start+0xfa>
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003060:	d009      	beq.n	8003076 <HAL_TIM_PWM_Start+0xfa>
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	4a14      	ldr	r2, [pc, #80]	; (80030b8 <HAL_TIM_PWM_Start+0x13c>)
 8003068:	4293      	cmp	r3, r2
 800306a:	d004      	beq.n	8003076 <HAL_TIM_PWM_Start+0xfa>
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	4a12      	ldr	r2, [pc, #72]	; (80030bc <HAL_TIM_PWM_Start+0x140>)
 8003072:	4293      	cmp	r3, r2
 8003074:	d111      	bne.n	800309a <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	689b      	ldr	r3, [r3, #8]
 800307c:	f003 0307 	and.w	r3, r3, #7
 8003080:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	2b06      	cmp	r3, #6
 8003086:	d010      	beq.n	80030aa <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	681a      	ldr	r2, [r3, #0]
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f042 0201 	orr.w	r2, r2, #1
 8003096:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003098:	e007      	b.n	80030aa <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	681a      	ldr	r2, [r3, #0]
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f042 0201 	orr.w	r2, r2, #1
 80030a8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80030aa:	2300      	movs	r3, #0
}
 80030ac:	4618      	mov	r0, r3
 80030ae:	3710      	adds	r7, #16
 80030b0:	46bd      	mov	sp, r7
 80030b2:	bd80      	pop	{r7, pc}
 80030b4:	40012c00 	.word	0x40012c00
 80030b8:	40000400 	.word	0x40000400
 80030bc:	40000800 	.word	0x40000800

080030c0 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80030c0:	b580      	push	{r7, lr}
 80030c2:	b082      	sub	sp, #8
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	6078      	str	r0, [r7, #4]
 80030c8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	2200      	movs	r2, #0
 80030d0:	6839      	ldr	r1, [r7, #0]
 80030d2:	4618      	mov	r0, r3
 80030d4:	f001 f893 	bl	80041fe <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	4a29      	ldr	r2, [pc, #164]	; (8003184 <HAL_TIM_PWM_Stop+0xc4>)
 80030de:	4293      	cmp	r3, r2
 80030e0:	d117      	bne.n	8003112 <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	6a1a      	ldr	r2, [r3, #32]
 80030e8:	f241 1311 	movw	r3, #4369	; 0x1111
 80030ec:	4013      	ands	r3, r2
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d10f      	bne.n	8003112 <HAL_TIM_PWM_Stop+0x52>
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	6a1a      	ldr	r2, [r3, #32]
 80030f8:	f240 4344 	movw	r3, #1092	; 0x444
 80030fc:	4013      	ands	r3, r2
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d107      	bne.n	8003112 <HAL_TIM_PWM_Stop+0x52>
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003110:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	6a1a      	ldr	r2, [r3, #32]
 8003118:	f241 1311 	movw	r3, #4369	; 0x1111
 800311c:	4013      	ands	r3, r2
 800311e:	2b00      	cmp	r3, #0
 8003120:	d10f      	bne.n	8003142 <HAL_TIM_PWM_Stop+0x82>
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	6a1a      	ldr	r2, [r3, #32]
 8003128:	f240 4344 	movw	r3, #1092	; 0x444
 800312c:	4013      	ands	r3, r2
 800312e:	2b00      	cmp	r3, #0
 8003130:	d107      	bne.n	8003142 <HAL_TIM_PWM_Stop+0x82>
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	681a      	ldr	r2, [r3, #0]
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f022 0201 	bic.w	r2, r2, #1
 8003140:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8003142:	683b      	ldr	r3, [r7, #0]
 8003144:	2b00      	cmp	r3, #0
 8003146:	d104      	bne.n	8003152 <HAL_TIM_PWM_Stop+0x92>
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	2201      	movs	r2, #1
 800314c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003150:	e013      	b.n	800317a <HAL_TIM_PWM_Stop+0xba>
 8003152:	683b      	ldr	r3, [r7, #0]
 8003154:	2b04      	cmp	r3, #4
 8003156:	d104      	bne.n	8003162 <HAL_TIM_PWM_Stop+0xa2>
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	2201      	movs	r2, #1
 800315c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003160:	e00b      	b.n	800317a <HAL_TIM_PWM_Stop+0xba>
 8003162:	683b      	ldr	r3, [r7, #0]
 8003164:	2b08      	cmp	r3, #8
 8003166:	d104      	bne.n	8003172 <HAL_TIM_PWM_Stop+0xb2>
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	2201      	movs	r2, #1
 800316c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003170:	e003      	b.n	800317a <HAL_TIM_PWM_Stop+0xba>
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	2201      	movs	r2, #1
 8003176:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 800317a:	2300      	movs	r3, #0
}
 800317c:	4618      	mov	r0, r3
 800317e:	3708      	adds	r7, #8
 8003180:	46bd      	mov	sp, r7
 8003182:	bd80      	pop	{r7, pc}
 8003184:	40012c00 	.word	0x40012c00

08003188 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8003188:	b580      	push	{r7, lr}
 800318a:	b082      	sub	sp, #8
 800318c:	af00      	add	r7, sp, #0
 800318e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	2b00      	cmp	r3, #0
 8003194:	d101      	bne.n	800319a <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8003196:	2301      	movs	r3, #1
 8003198:	e041      	b.n	800321e <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031a0:	b2db      	uxtb	r3, r3
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d106      	bne.n	80031b4 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	2200      	movs	r2, #0
 80031aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80031ae:	6878      	ldr	r0, [r7, #4]
 80031b0:	f7fe fcae 	bl	8001b10 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	2202      	movs	r2, #2
 80031b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681a      	ldr	r2, [r3, #0]
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	3304      	adds	r3, #4
 80031c4:	4619      	mov	r1, r3
 80031c6:	4610      	mov	r0, r2
 80031c8:	f000 fc8c 	bl	8003ae4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	2201      	movs	r2, #1
 80031d0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	2201      	movs	r2, #1
 80031d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	2201      	movs	r2, #1
 80031e0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	2201      	movs	r2, #1
 80031e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	2201      	movs	r2, #1
 80031f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	2201      	movs	r2, #1
 80031f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	2201      	movs	r2, #1
 8003200:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	2201      	movs	r2, #1
 8003208:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	2201      	movs	r2, #1
 8003210:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	2201      	movs	r2, #1
 8003218:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800321c:	2300      	movs	r3, #0
}
 800321e:	4618      	mov	r0, r3
 8003220:	3708      	adds	r7, #8
 8003222:	46bd      	mov	sp, r7
 8003224:	bd80      	pop	{r7, pc}
	...

08003228 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003228:	b580      	push	{r7, lr}
 800322a:	b084      	sub	sp, #16
 800322c:	af00      	add	r7, sp, #0
 800322e:	6078      	str	r0, [r7, #4]
 8003230:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003232:	2300      	movs	r3, #0
 8003234:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8003236:	683b      	ldr	r3, [r7, #0]
 8003238:	2b00      	cmp	r3, #0
 800323a:	d104      	bne.n	8003246 <HAL_TIM_IC_Start_IT+0x1e>
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003242:	b2db      	uxtb	r3, r3
 8003244:	e013      	b.n	800326e <HAL_TIM_IC_Start_IT+0x46>
 8003246:	683b      	ldr	r3, [r7, #0]
 8003248:	2b04      	cmp	r3, #4
 800324a:	d104      	bne.n	8003256 <HAL_TIM_IC_Start_IT+0x2e>
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003252:	b2db      	uxtb	r3, r3
 8003254:	e00b      	b.n	800326e <HAL_TIM_IC_Start_IT+0x46>
 8003256:	683b      	ldr	r3, [r7, #0]
 8003258:	2b08      	cmp	r3, #8
 800325a:	d104      	bne.n	8003266 <HAL_TIM_IC_Start_IT+0x3e>
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003262:	b2db      	uxtb	r3, r3
 8003264:	e003      	b.n	800326e <HAL_TIM_IC_Start_IT+0x46>
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800326c:	b2db      	uxtb	r3, r3
 800326e:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8003270:	683b      	ldr	r3, [r7, #0]
 8003272:	2b00      	cmp	r3, #0
 8003274:	d104      	bne.n	8003280 <HAL_TIM_IC_Start_IT+0x58>
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800327c:	b2db      	uxtb	r3, r3
 800327e:	e013      	b.n	80032a8 <HAL_TIM_IC_Start_IT+0x80>
 8003280:	683b      	ldr	r3, [r7, #0]
 8003282:	2b04      	cmp	r3, #4
 8003284:	d104      	bne.n	8003290 <HAL_TIM_IC_Start_IT+0x68>
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800328c:	b2db      	uxtb	r3, r3
 800328e:	e00b      	b.n	80032a8 <HAL_TIM_IC_Start_IT+0x80>
 8003290:	683b      	ldr	r3, [r7, #0]
 8003292:	2b08      	cmp	r3, #8
 8003294:	d104      	bne.n	80032a0 <HAL_TIM_IC_Start_IT+0x78>
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800329c:	b2db      	uxtb	r3, r3
 800329e:	e003      	b.n	80032a8 <HAL_TIM_IC_Start_IT+0x80>
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80032a6:	b2db      	uxtb	r3, r3
 80032a8:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80032aa:	7bbb      	ldrb	r3, [r7, #14]
 80032ac:	2b01      	cmp	r3, #1
 80032ae:	d102      	bne.n	80032b6 <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 80032b0:	7b7b      	ldrb	r3, [r7, #13]
 80032b2:	2b01      	cmp	r3, #1
 80032b4:	d001      	beq.n	80032ba <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 80032b6:	2301      	movs	r3, #1
 80032b8:	e0b8      	b.n	800342c <HAL_TIM_IC_Start_IT+0x204>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80032ba:	683b      	ldr	r3, [r7, #0]
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d104      	bne.n	80032ca <HAL_TIM_IC_Start_IT+0xa2>
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	2202      	movs	r2, #2
 80032c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80032c8:	e013      	b.n	80032f2 <HAL_TIM_IC_Start_IT+0xca>
 80032ca:	683b      	ldr	r3, [r7, #0]
 80032cc:	2b04      	cmp	r3, #4
 80032ce:	d104      	bne.n	80032da <HAL_TIM_IC_Start_IT+0xb2>
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	2202      	movs	r2, #2
 80032d4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80032d8:	e00b      	b.n	80032f2 <HAL_TIM_IC_Start_IT+0xca>
 80032da:	683b      	ldr	r3, [r7, #0]
 80032dc:	2b08      	cmp	r3, #8
 80032de:	d104      	bne.n	80032ea <HAL_TIM_IC_Start_IT+0xc2>
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	2202      	movs	r2, #2
 80032e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80032e8:	e003      	b.n	80032f2 <HAL_TIM_IC_Start_IT+0xca>
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	2202      	movs	r2, #2
 80032ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80032f2:	683b      	ldr	r3, [r7, #0]
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d104      	bne.n	8003302 <HAL_TIM_IC_Start_IT+0xda>
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	2202      	movs	r2, #2
 80032fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003300:	e013      	b.n	800332a <HAL_TIM_IC_Start_IT+0x102>
 8003302:	683b      	ldr	r3, [r7, #0]
 8003304:	2b04      	cmp	r3, #4
 8003306:	d104      	bne.n	8003312 <HAL_TIM_IC_Start_IT+0xea>
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	2202      	movs	r2, #2
 800330c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003310:	e00b      	b.n	800332a <HAL_TIM_IC_Start_IT+0x102>
 8003312:	683b      	ldr	r3, [r7, #0]
 8003314:	2b08      	cmp	r3, #8
 8003316:	d104      	bne.n	8003322 <HAL_TIM_IC_Start_IT+0xfa>
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	2202      	movs	r2, #2
 800331c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003320:	e003      	b.n	800332a <HAL_TIM_IC_Start_IT+0x102>
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	2202      	movs	r2, #2
 8003326:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 800332a:	683b      	ldr	r3, [r7, #0]
 800332c:	2b0c      	cmp	r3, #12
 800332e:	d841      	bhi.n	80033b4 <HAL_TIM_IC_Start_IT+0x18c>
 8003330:	a201      	add	r2, pc, #4	; (adr r2, 8003338 <HAL_TIM_IC_Start_IT+0x110>)
 8003332:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003336:	bf00      	nop
 8003338:	0800336d 	.word	0x0800336d
 800333c:	080033b5 	.word	0x080033b5
 8003340:	080033b5 	.word	0x080033b5
 8003344:	080033b5 	.word	0x080033b5
 8003348:	0800337f 	.word	0x0800337f
 800334c:	080033b5 	.word	0x080033b5
 8003350:	080033b5 	.word	0x080033b5
 8003354:	080033b5 	.word	0x080033b5
 8003358:	08003391 	.word	0x08003391
 800335c:	080033b5 	.word	0x080033b5
 8003360:	080033b5 	.word	0x080033b5
 8003364:	080033b5 	.word	0x080033b5
 8003368:	080033a3 	.word	0x080033a3
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	68da      	ldr	r2, [r3, #12]
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f042 0202 	orr.w	r2, r2, #2
 800337a:	60da      	str	r2, [r3, #12]
      break;
 800337c:	e01d      	b.n	80033ba <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	68da      	ldr	r2, [r3, #12]
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f042 0204 	orr.w	r2, r2, #4
 800338c:	60da      	str	r2, [r3, #12]
      break;
 800338e:	e014      	b.n	80033ba <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	68da      	ldr	r2, [r3, #12]
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f042 0208 	orr.w	r2, r2, #8
 800339e:	60da      	str	r2, [r3, #12]
      break;
 80033a0:	e00b      	b.n	80033ba <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	68da      	ldr	r2, [r3, #12]
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f042 0210 	orr.w	r2, r2, #16
 80033b0:	60da      	str	r2, [r3, #12]
      break;
 80033b2:	e002      	b.n	80033ba <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 80033b4:	2301      	movs	r3, #1
 80033b6:	73fb      	strb	r3, [r7, #15]
      break;
 80033b8:	bf00      	nop
  }

  if (status == HAL_OK)
 80033ba:	7bfb      	ldrb	r3, [r7, #15]
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d134      	bne.n	800342a <HAL_TIM_IC_Start_IT+0x202>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	2201      	movs	r2, #1
 80033c6:	6839      	ldr	r1, [r7, #0]
 80033c8:	4618      	mov	r0, r3
 80033ca:	f000 ff18 	bl	80041fe <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	4a18      	ldr	r2, [pc, #96]	; (8003434 <HAL_TIM_IC_Start_IT+0x20c>)
 80033d4:	4293      	cmp	r3, r2
 80033d6:	d00e      	beq.n	80033f6 <HAL_TIM_IC_Start_IT+0x1ce>
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033e0:	d009      	beq.n	80033f6 <HAL_TIM_IC_Start_IT+0x1ce>
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	4a14      	ldr	r2, [pc, #80]	; (8003438 <HAL_TIM_IC_Start_IT+0x210>)
 80033e8:	4293      	cmp	r3, r2
 80033ea:	d004      	beq.n	80033f6 <HAL_TIM_IC_Start_IT+0x1ce>
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	4a12      	ldr	r2, [pc, #72]	; (800343c <HAL_TIM_IC_Start_IT+0x214>)
 80033f2:	4293      	cmp	r3, r2
 80033f4:	d111      	bne.n	800341a <HAL_TIM_IC_Start_IT+0x1f2>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	689b      	ldr	r3, [r3, #8]
 80033fc:	f003 0307 	and.w	r3, r3, #7
 8003400:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003402:	68bb      	ldr	r3, [r7, #8]
 8003404:	2b06      	cmp	r3, #6
 8003406:	d010      	beq.n	800342a <HAL_TIM_IC_Start_IT+0x202>
      {
        __HAL_TIM_ENABLE(htim);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	681a      	ldr	r2, [r3, #0]
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f042 0201 	orr.w	r2, r2, #1
 8003416:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003418:	e007      	b.n	800342a <HAL_TIM_IC_Start_IT+0x202>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	681a      	ldr	r2, [r3, #0]
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f042 0201 	orr.w	r2, r2, #1
 8003428:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 800342a:	7bfb      	ldrb	r3, [r7, #15]
}
 800342c:	4618      	mov	r0, r3
 800342e:	3710      	adds	r7, #16
 8003430:	46bd      	mov	sp, r7
 8003432:	bd80      	pop	{r7, pc}
 8003434:	40012c00 	.word	0x40012c00
 8003438:	40000400 	.word	0x40000400
 800343c:	40000800 	.word	0x40000800

08003440 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003440:	b580      	push	{r7, lr}
 8003442:	b082      	sub	sp, #8
 8003444:	af00      	add	r7, sp, #0
 8003446:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	691b      	ldr	r3, [r3, #16]
 800344e:	f003 0302 	and.w	r3, r3, #2
 8003452:	2b02      	cmp	r3, #2
 8003454:	d122      	bne.n	800349c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	68db      	ldr	r3, [r3, #12]
 800345c:	f003 0302 	and.w	r3, r3, #2
 8003460:	2b02      	cmp	r3, #2
 8003462:	d11b      	bne.n	800349c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f06f 0202 	mvn.w	r2, #2
 800346c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	2201      	movs	r2, #1
 8003472:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	699b      	ldr	r3, [r3, #24]
 800347a:	f003 0303 	and.w	r3, r3, #3
 800347e:	2b00      	cmp	r3, #0
 8003480:	d003      	beq.n	800348a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003482:	6878      	ldr	r0, [r7, #4]
 8003484:	f7fd fd80 	bl	8000f88 <HAL_TIM_IC_CaptureCallback>
 8003488:	e005      	b.n	8003496 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800348a:	6878      	ldr	r0, [r7, #4]
 800348c:	f000 fb0e 	bl	8003aac <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003490:	6878      	ldr	r0, [r7, #4]
 8003492:	f000 fb14 	bl	8003abe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	2200      	movs	r2, #0
 800349a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	691b      	ldr	r3, [r3, #16]
 80034a2:	f003 0304 	and.w	r3, r3, #4
 80034a6:	2b04      	cmp	r3, #4
 80034a8:	d122      	bne.n	80034f0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	68db      	ldr	r3, [r3, #12]
 80034b0:	f003 0304 	and.w	r3, r3, #4
 80034b4:	2b04      	cmp	r3, #4
 80034b6:	d11b      	bne.n	80034f0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f06f 0204 	mvn.w	r2, #4
 80034c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	2202      	movs	r2, #2
 80034c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	699b      	ldr	r3, [r3, #24]
 80034ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d003      	beq.n	80034de <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80034d6:	6878      	ldr	r0, [r7, #4]
 80034d8:	f7fd fd56 	bl	8000f88 <HAL_TIM_IC_CaptureCallback>
 80034dc:	e005      	b.n	80034ea <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80034de:	6878      	ldr	r0, [r7, #4]
 80034e0:	f000 fae4 	bl	8003aac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80034e4:	6878      	ldr	r0, [r7, #4]
 80034e6:	f000 faea 	bl	8003abe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	2200      	movs	r2, #0
 80034ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	691b      	ldr	r3, [r3, #16]
 80034f6:	f003 0308 	and.w	r3, r3, #8
 80034fa:	2b08      	cmp	r3, #8
 80034fc:	d122      	bne.n	8003544 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	68db      	ldr	r3, [r3, #12]
 8003504:	f003 0308 	and.w	r3, r3, #8
 8003508:	2b08      	cmp	r3, #8
 800350a:	d11b      	bne.n	8003544 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f06f 0208 	mvn.w	r2, #8
 8003514:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	2204      	movs	r2, #4
 800351a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	69db      	ldr	r3, [r3, #28]
 8003522:	f003 0303 	and.w	r3, r3, #3
 8003526:	2b00      	cmp	r3, #0
 8003528:	d003      	beq.n	8003532 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800352a:	6878      	ldr	r0, [r7, #4]
 800352c:	f7fd fd2c 	bl	8000f88 <HAL_TIM_IC_CaptureCallback>
 8003530:	e005      	b.n	800353e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003532:	6878      	ldr	r0, [r7, #4]
 8003534:	f000 faba 	bl	8003aac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003538:	6878      	ldr	r0, [r7, #4]
 800353a:	f000 fac0 	bl	8003abe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	2200      	movs	r2, #0
 8003542:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	691b      	ldr	r3, [r3, #16]
 800354a:	f003 0310 	and.w	r3, r3, #16
 800354e:	2b10      	cmp	r3, #16
 8003550:	d122      	bne.n	8003598 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	68db      	ldr	r3, [r3, #12]
 8003558:	f003 0310 	and.w	r3, r3, #16
 800355c:	2b10      	cmp	r3, #16
 800355e:	d11b      	bne.n	8003598 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f06f 0210 	mvn.w	r2, #16
 8003568:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	2208      	movs	r2, #8
 800356e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	69db      	ldr	r3, [r3, #28]
 8003576:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800357a:	2b00      	cmp	r3, #0
 800357c:	d003      	beq.n	8003586 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800357e:	6878      	ldr	r0, [r7, #4]
 8003580:	f7fd fd02 	bl	8000f88 <HAL_TIM_IC_CaptureCallback>
 8003584:	e005      	b.n	8003592 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003586:	6878      	ldr	r0, [r7, #4]
 8003588:	f000 fa90 	bl	8003aac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800358c:	6878      	ldr	r0, [r7, #4]
 800358e:	f000 fa96 	bl	8003abe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	2200      	movs	r2, #0
 8003596:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	691b      	ldr	r3, [r3, #16]
 800359e:	f003 0301 	and.w	r3, r3, #1
 80035a2:	2b01      	cmp	r3, #1
 80035a4:	d10e      	bne.n	80035c4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	68db      	ldr	r3, [r3, #12]
 80035ac:	f003 0301 	and.w	r3, r3, #1
 80035b0:	2b01      	cmp	r3, #1
 80035b2:	d107      	bne.n	80035c4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f06f 0201 	mvn.w	r2, #1
 80035bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80035be:	6878      	ldr	r0, [r7, #4]
 80035c0:	f000 fa6b 	bl	8003a9a <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	691b      	ldr	r3, [r3, #16]
 80035ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035ce:	2b80      	cmp	r3, #128	; 0x80
 80035d0:	d10e      	bne.n	80035f0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	68db      	ldr	r3, [r3, #12]
 80035d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035dc:	2b80      	cmp	r3, #128	; 0x80
 80035de:	d107      	bne.n	80035f0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80035e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80035ea:	6878      	ldr	r0, [r7, #4]
 80035ec:	f000 fe93 	bl	8004316 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	691b      	ldr	r3, [r3, #16]
 80035f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035fa:	2b40      	cmp	r3, #64	; 0x40
 80035fc:	d10e      	bne.n	800361c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	68db      	ldr	r3, [r3, #12]
 8003604:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003608:	2b40      	cmp	r3, #64	; 0x40
 800360a:	d107      	bne.n	800361c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003614:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003616:	6878      	ldr	r0, [r7, #4]
 8003618:	f000 fa5a 	bl	8003ad0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	691b      	ldr	r3, [r3, #16]
 8003622:	f003 0320 	and.w	r3, r3, #32
 8003626:	2b20      	cmp	r3, #32
 8003628:	d10e      	bne.n	8003648 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	68db      	ldr	r3, [r3, #12]
 8003630:	f003 0320 	and.w	r3, r3, #32
 8003634:	2b20      	cmp	r3, #32
 8003636:	d107      	bne.n	8003648 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f06f 0220 	mvn.w	r2, #32
 8003640:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003642:	6878      	ldr	r0, [r7, #4]
 8003644:	f000 fe5e 	bl	8004304 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003648:	bf00      	nop
 800364a:	3708      	adds	r7, #8
 800364c:	46bd      	mov	sp, r7
 800364e:	bd80      	pop	{r7, pc}

08003650 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8003650:	b580      	push	{r7, lr}
 8003652:	b086      	sub	sp, #24
 8003654:	af00      	add	r7, sp, #0
 8003656:	60f8      	str	r0, [r7, #12]
 8003658:	60b9      	str	r1, [r7, #8]
 800365a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800365c:	2300      	movs	r3, #0
 800365e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003666:	2b01      	cmp	r3, #1
 8003668:	d101      	bne.n	800366e <HAL_TIM_IC_ConfigChannel+0x1e>
 800366a:	2302      	movs	r3, #2
 800366c:	e088      	b.n	8003780 <HAL_TIM_IC_ConfigChannel+0x130>
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	2201      	movs	r2, #1
 8003672:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	2b00      	cmp	r3, #0
 800367a:	d11b      	bne.n	80036b4 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003680:	68bb      	ldr	r3, [r7, #8]
 8003682:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003684:	68bb      	ldr	r3, [r7, #8]
 8003686:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003688:	68bb      	ldr	r3, [r7, #8]
 800368a:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 800368c:	f000 fc14 	bl	8003eb8 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	699a      	ldr	r2, [r3, #24]
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f022 020c 	bic.w	r2, r2, #12
 800369e:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	6999      	ldr	r1, [r3, #24]
 80036a6:	68bb      	ldr	r3, [r7, #8]
 80036a8:	689a      	ldr	r2, [r3, #8]
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	430a      	orrs	r2, r1
 80036b0:	619a      	str	r2, [r3, #24]
 80036b2:	e060      	b.n	8003776 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	2b04      	cmp	r3, #4
 80036b8:	d11c      	bne.n	80036f4 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80036be:	68bb      	ldr	r3, [r7, #8]
 80036c0:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80036c2:	68bb      	ldr	r3, [r7, #8]
 80036c4:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80036c6:	68bb      	ldr	r3, [r7, #8]
 80036c8:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 80036ca:	f000 fc7d 	bl	8003fc8 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	699a      	ldr	r2, [r3, #24]
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80036dc:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	6999      	ldr	r1, [r3, #24]
 80036e4:	68bb      	ldr	r3, [r7, #8]
 80036e6:	689b      	ldr	r3, [r3, #8]
 80036e8:	021a      	lsls	r2, r3, #8
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	430a      	orrs	r2, r1
 80036f0:	619a      	str	r2, [r3, #24]
 80036f2:	e040      	b.n	8003776 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	2b08      	cmp	r3, #8
 80036f8:	d11b      	bne.n	8003732 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80036fe:	68bb      	ldr	r3, [r7, #8]
 8003700:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003702:	68bb      	ldr	r3, [r7, #8]
 8003704:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003706:	68bb      	ldr	r3, [r7, #8]
 8003708:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 800370a:	f000 fcc8 	bl	800409e <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	69da      	ldr	r2, [r3, #28]
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f022 020c 	bic.w	r2, r2, #12
 800371c:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	69d9      	ldr	r1, [r3, #28]
 8003724:	68bb      	ldr	r3, [r7, #8]
 8003726:	689a      	ldr	r2, [r3, #8]
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	430a      	orrs	r2, r1
 800372e:	61da      	str	r2, [r3, #28]
 8003730:	e021      	b.n	8003776 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	2b0c      	cmp	r3, #12
 8003736:	d11c      	bne.n	8003772 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800373c:	68bb      	ldr	r3, [r7, #8]
 800373e:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003740:	68bb      	ldr	r3, [r7, #8]
 8003742:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003744:	68bb      	ldr	r3, [r7, #8]
 8003746:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8003748:	f000 fce4 	bl	8004114 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	69da      	ldr	r2, [r3, #28]
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800375a:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	69d9      	ldr	r1, [r3, #28]
 8003762:	68bb      	ldr	r3, [r7, #8]
 8003764:	689b      	ldr	r3, [r3, #8]
 8003766:	021a      	lsls	r2, r3, #8
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	430a      	orrs	r2, r1
 800376e:	61da      	str	r2, [r3, #28]
 8003770:	e001      	b.n	8003776 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8003772:	2301      	movs	r3, #1
 8003774:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	2200      	movs	r2, #0
 800377a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800377e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003780:	4618      	mov	r0, r3
 8003782:	3718      	adds	r7, #24
 8003784:	46bd      	mov	sp, r7
 8003786:	bd80      	pop	{r7, pc}

08003788 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003788:	b580      	push	{r7, lr}
 800378a:	b086      	sub	sp, #24
 800378c:	af00      	add	r7, sp, #0
 800378e:	60f8      	str	r0, [r7, #12]
 8003790:	60b9      	str	r1, [r7, #8]
 8003792:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003794:	2300      	movs	r3, #0
 8003796:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800379e:	2b01      	cmp	r3, #1
 80037a0:	d101      	bne.n	80037a6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80037a2:	2302      	movs	r3, #2
 80037a4:	e0ae      	b.n	8003904 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	2201      	movs	r2, #1
 80037aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	2b0c      	cmp	r3, #12
 80037b2:	f200 809f 	bhi.w	80038f4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80037b6:	a201      	add	r2, pc, #4	; (adr r2, 80037bc <HAL_TIM_PWM_ConfigChannel+0x34>)
 80037b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037bc:	080037f1 	.word	0x080037f1
 80037c0:	080038f5 	.word	0x080038f5
 80037c4:	080038f5 	.word	0x080038f5
 80037c8:	080038f5 	.word	0x080038f5
 80037cc:	08003831 	.word	0x08003831
 80037d0:	080038f5 	.word	0x080038f5
 80037d4:	080038f5 	.word	0x080038f5
 80037d8:	080038f5 	.word	0x080038f5
 80037dc:	08003873 	.word	0x08003873
 80037e0:	080038f5 	.word	0x080038f5
 80037e4:	080038f5 	.word	0x080038f5
 80037e8:	080038f5 	.word	0x080038f5
 80037ec:	080038b3 	.word	0x080038b3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	68b9      	ldr	r1, [r7, #8]
 80037f6:	4618      	mov	r0, r3
 80037f8:	f000 f9d6 	bl	8003ba8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	699a      	ldr	r2, [r3, #24]
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f042 0208 	orr.w	r2, r2, #8
 800380a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	699a      	ldr	r2, [r3, #24]
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f022 0204 	bic.w	r2, r2, #4
 800381a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	6999      	ldr	r1, [r3, #24]
 8003822:	68bb      	ldr	r3, [r7, #8]
 8003824:	691a      	ldr	r2, [r3, #16]
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	430a      	orrs	r2, r1
 800382c:	619a      	str	r2, [r3, #24]
      break;
 800382e:	e064      	b.n	80038fa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	68b9      	ldr	r1, [r7, #8]
 8003836:	4618      	mov	r0, r3
 8003838:	f000 fa1c 	bl	8003c74 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	699a      	ldr	r2, [r3, #24]
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800384a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	699a      	ldr	r2, [r3, #24]
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800385a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	6999      	ldr	r1, [r3, #24]
 8003862:	68bb      	ldr	r3, [r7, #8]
 8003864:	691b      	ldr	r3, [r3, #16]
 8003866:	021a      	lsls	r2, r3, #8
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	430a      	orrs	r2, r1
 800386e:	619a      	str	r2, [r3, #24]
      break;
 8003870:	e043      	b.n	80038fa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	68b9      	ldr	r1, [r7, #8]
 8003878:	4618      	mov	r0, r3
 800387a:	f000 fa65 	bl	8003d48 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	69da      	ldr	r2, [r3, #28]
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f042 0208 	orr.w	r2, r2, #8
 800388c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	69da      	ldr	r2, [r3, #28]
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f022 0204 	bic.w	r2, r2, #4
 800389c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	69d9      	ldr	r1, [r3, #28]
 80038a4:	68bb      	ldr	r3, [r7, #8]
 80038a6:	691a      	ldr	r2, [r3, #16]
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	430a      	orrs	r2, r1
 80038ae:	61da      	str	r2, [r3, #28]
      break;
 80038b0:	e023      	b.n	80038fa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	68b9      	ldr	r1, [r7, #8]
 80038b8:	4618      	mov	r0, r3
 80038ba:	f000 faaf 	bl	8003e1c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	69da      	ldr	r2, [r3, #28]
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80038cc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	69da      	ldr	r2, [r3, #28]
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80038dc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	69d9      	ldr	r1, [r3, #28]
 80038e4:	68bb      	ldr	r3, [r7, #8]
 80038e6:	691b      	ldr	r3, [r3, #16]
 80038e8:	021a      	lsls	r2, r3, #8
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	430a      	orrs	r2, r1
 80038f0:	61da      	str	r2, [r3, #28]
      break;
 80038f2:	e002      	b.n	80038fa <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80038f4:	2301      	movs	r3, #1
 80038f6:	75fb      	strb	r3, [r7, #23]
      break;
 80038f8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	2200      	movs	r2, #0
 80038fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003902:	7dfb      	ldrb	r3, [r7, #23]
}
 8003904:	4618      	mov	r0, r3
 8003906:	3718      	adds	r7, #24
 8003908:	46bd      	mov	sp, r7
 800390a:	bd80      	pop	{r7, pc}

0800390c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800390c:	b580      	push	{r7, lr}
 800390e:	b084      	sub	sp, #16
 8003910:	af00      	add	r7, sp, #0
 8003912:	6078      	str	r0, [r7, #4]
 8003914:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003916:	2300      	movs	r3, #0
 8003918:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003920:	2b01      	cmp	r3, #1
 8003922:	d101      	bne.n	8003928 <HAL_TIM_ConfigClockSource+0x1c>
 8003924:	2302      	movs	r3, #2
 8003926:	e0b4      	b.n	8003a92 <HAL_TIM_ConfigClockSource+0x186>
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	2201      	movs	r2, #1
 800392c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	2202      	movs	r2, #2
 8003934:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	689b      	ldr	r3, [r3, #8]
 800393e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003940:	68bb      	ldr	r3, [r7, #8]
 8003942:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003946:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003948:	68bb      	ldr	r3, [r7, #8]
 800394a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800394e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	68ba      	ldr	r2, [r7, #8]
 8003956:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003958:	683b      	ldr	r3, [r7, #0]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003960:	d03e      	beq.n	80039e0 <HAL_TIM_ConfigClockSource+0xd4>
 8003962:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003966:	f200 8087 	bhi.w	8003a78 <HAL_TIM_ConfigClockSource+0x16c>
 800396a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800396e:	f000 8086 	beq.w	8003a7e <HAL_TIM_ConfigClockSource+0x172>
 8003972:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003976:	d87f      	bhi.n	8003a78 <HAL_TIM_ConfigClockSource+0x16c>
 8003978:	2b70      	cmp	r3, #112	; 0x70
 800397a:	d01a      	beq.n	80039b2 <HAL_TIM_ConfigClockSource+0xa6>
 800397c:	2b70      	cmp	r3, #112	; 0x70
 800397e:	d87b      	bhi.n	8003a78 <HAL_TIM_ConfigClockSource+0x16c>
 8003980:	2b60      	cmp	r3, #96	; 0x60
 8003982:	d050      	beq.n	8003a26 <HAL_TIM_ConfigClockSource+0x11a>
 8003984:	2b60      	cmp	r3, #96	; 0x60
 8003986:	d877      	bhi.n	8003a78 <HAL_TIM_ConfigClockSource+0x16c>
 8003988:	2b50      	cmp	r3, #80	; 0x50
 800398a:	d03c      	beq.n	8003a06 <HAL_TIM_ConfigClockSource+0xfa>
 800398c:	2b50      	cmp	r3, #80	; 0x50
 800398e:	d873      	bhi.n	8003a78 <HAL_TIM_ConfigClockSource+0x16c>
 8003990:	2b40      	cmp	r3, #64	; 0x40
 8003992:	d058      	beq.n	8003a46 <HAL_TIM_ConfigClockSource+0x13a>
 8003994:	2b40      	cmp	r3, #64	; 0x40
 8003996:	d86f      	bhi.n	8003a78 <HAL_TIM_ConfigClockSource+0x16c>
 8003998:	2b30      	cmp	r3, #48	; 0x30
 800399a:	d064      	beq.n	8003a66 <HAL_TIM_ConfigClockSource+0x15a>
 800399c:	2b30      	cmp	r3, #48	; 0x30
 800399e:	d86b      	bhi.n	8003a78 <HAL_TIM_ConfigClockSource+0x16c>
 80039a0:	2b20      	cmp	r3, #32
 80039a2:	d060      	beq.n	8003a66 <HAL_TIM_ConfigClockSource+0x15a>
 80039a4:	2b20      	cmp	r3, #32
 80039a6:	d867      	bhi.n	8003a78 <HAL_TIM_ConfigClockSource+0x16c>
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d05c      	beq.n	8003a66 <HAL_TIM_ConfigClockSource+0x15a>
 80039ac:	2b10      	cmp	r3, #16
 80039ae:	d05a      	beq.n	8003a66 <HAL_TIM_ConfigClockSource+0x15a>
 80039b0:	e062      	b.n	8003a78 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80039b6:	683b      	ldr	r3, [r7, #0]
 80039b8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80039ba:	683b      	ldr	r3, [r7, #0]
 80039bc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80039be:	683b      	ldr	r3, [r7, #0]
 80039c0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80039c2:	f000 fbfd 	bl	80041c0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	689b      	ldr	r3, [r3, #8]
 80039cc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80039ce:	68bb      	ldr	r3, [r7, #8]
 80039d0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80039d4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	68ba      	ldr	r2, [r7, #8]
 80039dc:	609a      	str	r2, [r3, #8]
      break;
 80039de:	e04f      	b.n	8003a80 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80039e4:	683b      	ldr	r3, [r7, #0]
 80039e6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80039e8:	683b      	ldr	r3, [r7, #0]
 80039ea:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80039ec:	683b      	ldr	r3, [r7, #0]
 80039ee:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80039f0:	f000 fbe6 	bl	80041c0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	689a      	ldr	r2, [r3, #8]
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003a02:	609a      	str	r2, [r3, #8]
      break;
 8003a04:	e03c      	b.n	8003a80 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003a0a:	683b      	ldr	r3, [r7, #0]
 8003a0c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003a0e:	683b      	ldr	r3, [r7, #0]
 8003a10:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003a12:	461a      	mov	r2, r3
 8003a14:	f000 faaa 	bl	8003f6c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	2150      	movs	r1, #80	; 0x50
 8003a1e:	4618      	mov	r0, r3
 8003a20:	f000 fbb4 	bl	800418c <TIM_ITRx_SetConfig>
      break;
 8003a24:	e02c      	b.n	8003a80 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003a2a:	683b      	ldr	r3, [r7, #0]
 8003a2c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003a2e:	683b      	ldr	r3, [r7, #0]
 8003a30:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003a32:	461a      	mov	r2, r3
 8003a34:	f000 fb04 	bl	8004040 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	2160      	movs	r1, #96	; 0x60
 8003a3e:	4618      	mov	r0, r3
 8003a40:	f000 fba4 	bl	800418c <TIM_ITRx_SetConfig>
      break;
 8003a44:	e01c      	b.n	8003a80 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003a4a:	683b      	ldr	r3, [r7, #0]
 8003a4c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003a4e:	683b      	ldr	r3, [r7, #0]
 8003a50:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003a52:	461a      	mov	r2, r3
 8003a54:	f000 fa8a 	bl	8003f6c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	2140      	movs	r1, #64	; 0x40
 8003a5e:	4618      	mov	r0, r3
 8003a60:	f000 fb94 	bl	800418c <TIM_ITRx_SetConfig>
      break;
 8003a64:	e00c      	b.n	8003a80 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681a      	ldr	r2, [r3, #0]
 8003a6a:	683b      	ldr	r3, [r7, #0]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	4619      	mov	r1, r3
 8003a70:	4610      	mov	r0, r2
 8003a72:	f000 fb8b 	bl	800418c <TIM_ITRx_SetConfig>
      break;
 8003a76:	e003      	b.n	8003a80 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003a78:	2301      	movs	r3, #1
 8003a7a:	73fb      	strb	r3, [r7, #15]
      break;
 8003a7c:	e000      	b.n	8003a80 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003a7e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	2201      	movs	r2, #1
 8003a84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	2200      	movs	r2, #0
 8003a8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003a90:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a92:	4618      	mov	r0, r3
 8003a94:	3710      	adds	r7, #16
 8003a96:	46bd      	mov	sp, r7
 8003a98:	bd80      	pop	{r7, pc}

08003a9a <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003a9a:	b480      	push	{r7}
 8003a9c:	b083      	sub	sp, #12
 8003a9e:	af00      	add	r7, sp, #0
 8003aa0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003aa2:	bf00      	nop
 8003aa4:	370c      	adds	r7, #12
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	bc80      	pop	{r7}
 8003aaa:	4770      	bx	lr

08003aac <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003aac:	b480      	push	{r7}
 8003aae:	b083      	sub	sp, #12
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003ab4:	bf00      	nop
 8003ab6:	370c      	adds	r7, #12
 8003ab8:	46bd      	mov	sp, r7
 8003aba:	bc80      	pop	{r7}
 8003abc:	4770      	bx	lr

08003abe <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003abe:	b480      	push	{r7}
 8003ac0:	b083      	sub	sp, #12
 8003ac2:	af00      	add	r7, sp, #0
 8003ac4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003ac6:	bf00      	nop
 8003ac8:	370c      	adds	r7, #12
 8003aca:	46bd      	mov	sp, r7
 8003acc:	bc80      	pop	{r7}
 8003ace:	4770      	bx	lr

08003ad0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003ad0:	b480      	push	{r7}
 8003ad2:	b083      	sub	sp, #12
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003ad8:	bf00      	nop
 8003ada:	370c      	adds	r7, #12
 8003adc:	46bd      	mov	sp, r7
 8003ade:	bc80      	pop	{r7}
 8003ae0:	4770      	bx	lr
	...

08003ae4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003ae4:	b480      	push	{r7}
 8003ae6:	b085      	sub	sp, #20
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	6078      	str	r0, [r7, #4]
 8003aec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	4a29      	ldr	r2, [pc, #164]	; (8003b9c <TIM_Base_SetConfig+0xb8>)
 8003af8:	4293      	cmp	r3, r2
 8003afa:	d00b      	beq.n	8003b14 <TIM_Base_SetConfig+0x30>
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b02:	d007      	beq.n	8003b14 <TIM_Base_SetConfig+0x30>
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	4a26      	ldr	r2, [pc, #152]	; (8003ba0 <TIM_Base_SetConfig+0xbc>)
 8003b08:	4293      	cmp	r3, r2
 8003b0a:	d003      	beq.n	8003b14 <TIM_Base_SetConfig+0x30>
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	4a25      	ldr	r2, [pc, #148]	; (8003ba4 <TIM_Base_SetConfig+0xc0>)
 8003b10:	4293      	cmp	r3, r2
 8003b12:	d108      	bne.n	8003b26 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b1a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003b1c:	683b      	ldr	r3, [r7, #0]
 8003b1e:	685b      	ldr	r3, [r3, #4]
 8003b20:	68fa      	ldr	r2, [r7, #12]
 8003b22:	4313      	orrs	r3, r2
 8003b24:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	4a1c      	ldr	r2, [pc, #112]	; (8003b9c <TIM_Base_SetConfig+0xb8>)
 8003b2a:	4293      	cmp	r3, r2
 8003b2c:	d00b      	beq.n	8003b46 <TIM_Base_SetConfig+0x62>
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b34:	d007      	beq.n	8003b46 <TIM_Base_SetConfig+0x62>
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	4a19      	ldr	r2, [pc, #100]	; (8003ba0 <TIM_Base_SetConfig+0xbc>)
 8003b3a:	4293      	cmp	r3, r2
 8003b3c:	d003      	beq.n	8003b46 <TIM_Base_SetConfig+0x62>
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	4a18      	ldr	r2, [pc, #96]	; (8003ba4 <TIM_Base_SetConfig+0xc0>)
 8003b42:	4293      	cmp	r3, r2
 8003b44:	d108      	bne.n	8003b58 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b4c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003b4e:	683b      	ldr	r3, [r7, #0]
 8003b50:	68db      	ldr	r3, [r3, #12]
 8003b52:	68fa      	ldr	r2, [r7, #12]
 8003b54:	4313      	orrs	r3, r2
 8003b56:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003b5e:	683b      	ldr	r3, [r7, #0]
 8003b60:	695b      	ldr	r3, [r3, #20]
 8003b62:	4313      	orrs	r3, r2
 8003b64:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	68fa      	ldr	r2, [r7, #12]
 8003b6a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003b6c:	683b      	ldr	r3, [r7, #0]
 8003b6e:	689a      	ldr	r2, [r3, #8]
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003b74:	683b      	ldr	r3, [r7, #0]
 8003b76:	681a      	ldr	r2, [r3, #0]
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	4a07      	ldr	r2, [pc, #28]	; (8003b9c <TIM_Base_SetConfig+0xb8>)
 8003b80:	4293      	cmp	r3, r2
 8003b82:	d103      	bne.n	8003b8c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003b84:	683b      	ldr	r3, [r7, #0]
 8003b86:	691a      	ldr	r2, [r3, #16]
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	2201      	movs	r2, #1
 8003b90:	615a      	str	r2, [r3, #20]
}
 8003b92:	bf00      	nop
 8003b94:	3714      	adds	r7, #20
 8003b96:	46bd      	mov	sp, r7
 8003b98:	bc80      	pop	{r7}
 8003b9a:	4770      	bx	lr
 8003b9c:	40012c00 	.word	0x40012c00
 8003ba0:	40000400 	.word	0x40000400
 8003ba4:	40000800 	.word	0x40000800

08003ba8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003ba8:	b480      	push	{r7}
 8003baa:	b087      	sub	sp, #28
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	6078      	str	r0, [r7, #4]
 8003bb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	6a1b      	ldr	r3, [r3, #32]
 8003bb6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	6a1b      	ldr	r3, [r3, #32]
 8003bbc:	f023 0201 	bic.w	r2, r3, #1
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	685b      	ldr	r3, [r3, #4]
 8003bc8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	699b      	ldr	r3, [r3, #24]
 8003bce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003bd6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	f023 0303 	bic.w	r3, r3, #3
 8003bde:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003be0:	683b      	ldr	r3, [r7, #0]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	68fa      	ldr	r2, [r7, #12]
 8003be6:	4313      	orrs	r3, r2
 8003be8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003bea:	697b      	ldr	r3, [r7, #20]
 8003bec:	f023 0302 	bic.w	r3, r3, #2
 8003bf0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003bf2:	683b      	ldr	r3, [r7, #0]
 8003bf4:	689b      	ldr	r3, [r3, #8]
 8003bf6:	697a      	ldr	r2, [r7, #20]
 8003bf8:	4313      	orrs	r3, r2
 8003bfa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	4a1c      	ldr	r2, [pc, #112]	; (8003c70 <TIM_OC1_SetConfig+0xc8>)
 8003c00:	4293      	cmp	r3, r2
 8003c02:	d10c      	bne.n	8003c1e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003c04:	697b      	ldr	r3, [r7, #20]
 8003c06:	f023 0308 	bic.w	r3, r3, #8
 8003c0a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003c0c:	683b      	ldr	r3, [r7, #0]
 8003c0e:	68db      	ldr	r3, [r3, #12]
 8003c10:	697a      	ldr	r2, [r7, #20]
 8003c12:	4313      	orrs	r3, r2
 8003c14:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003c16:	697b      	ldr	r3, [r7, #20]
 8003c18:	f023 0304 	bic.w	r3, r3, #4
 8003c1c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	4a13      	ldr	r2, [pc, #76]	; (8003c70 <TIM_OC1_SetConfig+0xc8>)
 8003c22:	4293      	cmp	r3, r2
 8003c24:	d111      	bne.n	8003c4a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003c26:	693b      	ldr	r3, [r7, #16]
 8003c28:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003c2c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003c2e:	693b      	ldr	r3, [r7, #16]
 8003c30:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003c34:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003c36:	683b      	ldr	r3, [r7, #0]
 8003c38:	695b      	ldr	r3, [r3, #20]
 8003c3a:	693a      	ldr	r2, [r7, #16]
 8003c3c:	4313      	orrs	r3, r2
 8003c3e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003c40:	683b      	ldr	r3, [r7, #0]
 8003c42:	699b      	ldr	r3, [r3, #24]
 8003c44:	693a      	ldr	r2, [r7, #16]
 8003c46:	4313      	orrs	r3, r2
 8003c48:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	693a      	ldr	r2, [r7, #16]
 8003c4e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	68fa      	ldr	r2, [r7, #12]
 8003c54:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003c56:	683b      	ldr	r3, [r7, #0]
 8003c58:	685a      	ldr	r2, [r3, #4]
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	697a      	ldr	r2, [r7, #20]
 8003c62:	621a      	str	r2, [r3, #32]
}
 8003c64:	bf00      	nop
 8003c66:	371c      	adds	r7, #28
 8003c68:	46bd      	mov	sp, r7
 8003c6a:	bc80      	pop	{r7}
 8003c6c:	4770      	bx	lr
 8003c6e:	bf00      	nop
 8003c70:	40012c00 	.word	0x40012c00

08003c74 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003c74:	b480      	push	{r7}
 8003c76:	b087      	sub	sp, #28
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	6078      	str	r0, [r7, #4]
 8003c7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	6a1b      	ldr	r3, [r3, #32]
 8003c82:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	6a1b      	ldr	r3, [r3, #32]
 8003c88:	f023 0210 	bic.w	r2, r3, #16
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	685b      	ldr	r3, [r3, #4]
 8003c94:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	699b      	ldr	r3, [r3, #24]
 8003c9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003ca2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003caa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003cac:	683b      	ldr	r3, [r7, #0]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	021b      	lsls	r3, r3, #8
 8003cb2:	68fa      	ldr	r2, [r7, #12]
 8003cb4:	4313      	orrs	r3, r2
 8003cb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003cb8:	697b      	ldr	r3, [r7, #20]
 8003cba:	f023 0320 	bic.w	r3, r3, #32
 8003cbe:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003cc0:	683b      	ldr	r3, [r7, #0]
 8003cc2:	689b      	ldr	r3, [r3, #8]
 8003cc4:	011b      	lsls	r3, r3, #4
 8003cc6:	697a      	ldr	r2, [r7, #20]
 8003cc8:	4313      	orrs	r3, r2
 8003cca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	4a1d      	ldr	r2, [pc, #116]	; (8003d44 <TIM_OC2_SetConfig+0xd0>)
 8003cd0:	4293      	cmp	r3, r2
 8003cd2:	d10d      	bne.n	8003cf0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003cd4:	697b      	ldr	r3, [r7, #20]
 8003cd6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003cda:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003cdc:	683b      	ldr	r3, [r7, #0]
 8003cde:	68db      	ldr	r3, [r3, #12]
 8003ce0:	011b      	lsls	r3, r3, #4
 8003ce2:	697a      	ldr	r2, [r7, #20]
 8003ce4:	4313      	orrs	r3, r2
 8003ce6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003ce8:	697b      	ldr	r3, [r7, #20]
 8003cea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003cee:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	4a14      	ldr	r2, [pc, #80]	; (8003d44 <TIM_OC2_SetConfig+0xd0>)
 8003cf4:	4293      	cmp	r3, r2
 8003cf6:	d113      	bne.n	8003d20 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003cf8:	693b      	ldr	r3, [r7, #16]
 8003cfa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003cfe:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003d00:	693b      	ldr	r3, [r7, #16]
 8003d02:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003d06:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003d08:	683b      	ldr	r3, [r7, #0]
 8003d0a:	695b      	ldr	r3, [r3, #20]
 8003d0c:	009b      	lsls	r3, r3, #2
 8003d0e:	693a      	ldr	r2, [r7, #16]
 8003d10:	4313      	orrs	r3, r2
 8003d12:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003d14:	683b      	ldr	r3, [r7, #0]
 8003d16:	699b      	ldr	r3, [r3, #24]
 8003d18:	009b      	lsls	r3, r3, #2
 8003d1a:	693a      	ldr	r2, [r7, #16]
 8003d1c:	4313      	orrs	r3, r2
 8003d1e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	693a      	ldr	r2, [r7, #16]
 8003d24:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	68fa      	ldr	r2, [r7, #12]
 8003d2a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003d2c:	683b      	ldr	r3, [r7, #0]
 8003d2e:	685a      	ldr	r2, [r3, #4]
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	697a      	ldr	r2, [r7, #20]
 8003d38:	621a      	str	r2, [r3, #32]
}
 8003d3a:	bf00      	nop
 8003d3c:	371c      	adds	r7, #28
 8003d3e:	46bd      	mov	sp, r7
 8003d40:	bc80      	pop	{r7}
 8003d42:	4770      	bx	lr
 8003d44:	40012c00 	.word	0x40012c00

08003d48 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003d48:	b480      	push	{r7}
 8003d4a:	b087      	sub	sp, #28
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	6078      	str	r0, [r7, #4]
 8003d50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	6a1b      	ldr	r3, [r3, #32]
 8003d56:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	6a1b      	ldr	r3, [r3, #32]
 8003d5c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	685b      	ldr	r3, [r3, #4]
 8003d68:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	69db      	ldr	r3, [r3, #28]
 8003d6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d76:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	f023 0303 	bic.w	r3, r3, #3
 8003d7e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003d80:	683b      	ldr	r3, [r7, #0]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	68fa      	ldr	r2, [r7, #12]
 8003d86:	4313      	orrs	r3, r2
 8003d88:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003d8a:	697b      	ldr	r3, [r7, #20]
 8003d8c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003d90:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003d92:	683b      	ldr	r3, [r7, #0]
 8003d94:	689b      	ldr	r3, [r3, #8]
 8003d96:	021b      	lsls	r3, r3, #8
 8003d98:	697a      	ldr	r2, [r7, #20]
 8003d9a:	4313      	orrs	r3, r2
 8003d9c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	4a1d      	ldr	r2, [pc, #116]	; (8003e18 <TIM_OC3_SetConfig+0xd0>)
 8003da2:	4293      	cmp	r3, r2
 8003da4:	d10d      	bne.n	8003dc2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003da6:	697b      	ldr	r3, [r7, #20]
 8003da8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003dac:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003dae:	683b      	ldr	r3, [r7, #0]
 8003db0:	68db      	ldr	r3, [r3, #12]
 8003db2:	021b      	lsls	r3, r3, #8
 8003db4:	697a      	ldr	r2, [r7, #20]
 8003db6:	4313      	orrs	r3, r2
 8003db8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003dba:	697b      	ldr	r3, [r7, #20]
 8003dbc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003dc0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	4a14      	ldr	r2, [pc, #80]	; (8003e18 <TIM_OC3_SetConfig+0xd0>)
 8003dc6:	4293      	cmp	r3, r2
 8003dc8:	d113      	bne.n	8003df2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003dca:	693b      	ldr	r3, [r7, #16]
 8003dcc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003dd0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003dd2:	693b      	ldr	r3, [r7, #16]
 8003dd4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003dd8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003dda:	683b      	ldr	r3, [r7, #0]
 8003ddc:	695b      	ldr	r3, [r3, #20]
 8003dde:	011b      	lsls	r3, r3, #4
 8003de0:	693a      	ldr	r2, [r7, #16]
 8003de2:	4313      	orrs	r3, r2
 8003de4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003de6:	683b      	ldr	r3, [r7, #0]
 8003de8:	699b      	ldr	r3, [r3, #24]
 8003dea:	011b      	lsls	r3, r3, #4
 8003dec:	693a      	ldr	r2, [r7, #16]
 8003dee:	4313      	orrs	r3, r2
 8003df0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	693a      	ldr	r2, [r7, #16]
 8003df6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	68fa      	ldr	r2, [r7, #12]
 8003dfc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003dfe:	683b      	ldr	r3, [r7, #0]
 8003e00:	685a      	ldr	r2, [r3, #4]
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	697a      	ldr	r2, [r7, #20]
 8003e0a:	621a      	str	r2, [r3, #32]
}
 8003e0c:	bf00      	nop
 8003e0e:	371c      	adds	r7, #28
 8003e10:	46bd      	mov	sp, r7
 8003e12:	bc80      	pop	{r7}
 8003e14:	4770      	bx	lr
 8003e16:	bf00      	nop
 8003e18:	40012c00 	.word	0x40012c00

08003e1c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003e1c:	b480      	push	{r7}
 8003e1e:	b087      	sub	sp, #28
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	6078      	str	r0, [r7, #4]
 8003e24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	6a1b      	ldr	r3, [r3, #32]
 8003e2a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	6a1b      	ldr	r3, [r3, #32]
 8003e30:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	685b      	ldr	r3, [r3, #4]
 8003e3c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	69db      	ldr	r3, [r3, #28]
 8003e42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003e4a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e52:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003e54:	683b      	ldr	r3, [r7, #0]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	021b      	lsls	r3, r3, #8
 8003e5a:	68fa      	ldr	r2, [r7, #12]
 8003e5c:	4313      	orrs	r3, r2
 8003e5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003e60:	693b      	ldr	r3, [r7, #16]
 8003e62:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003e66:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003e68:	683b      	ldr	r3, [r7, #0]
 8003e6a:	689b      	ldr	r3, [r3, #8]
 8003e6c:	031b      	lsls	r3, r3, #12
 8003e6e:	693a      	ldr	r2, [r7, #16]
 8003e70:	4313      	orrs	r3, r2
 8003e72:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	4a0f      	ldr	r2, [pc, #60]	; (8003eb4 <TIM_OC4_SetConfig+0x98>)
 8003e78:	4293      	cmp	r3, r2
 8003e7a:	d109      	bne.n	8003e90 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003e7c:	697b      	ldr	r3, [r7, #20]
 8003e7e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003e82:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003e84:	683b      	ldr	r3, [r7, #0]
 8003e86:	695b      	ldr	r3, [r3, #20]
 8003e88:	019b      	lsls	r3, r3, #6
 8003e8a:	697a      	ldr	r2, [r7, #20]
 8003e8c:	4313      	orrs	r3, r2
 8003e8e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	697a      	ldr	r2, [r7, #20]
 8003e94:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	68fa      	ldr	r2, [r7, #12]
 8003e9a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003e9c:	683b      	ldr	r3, [r7, #0]
 8003e9e:	685a      	ldr	r2, [r3, #4]
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	693a      	ldr	r2, [r7, #16]
 8003ea8:	621a      	str	r2, [r3, #32]
}
 8003eaa:	bf00      	nop
 8003eac:	371c      	adds	r7, #28
 8003eae:	46bd      	mov	sp, r7
 8003eb0:	bc80      	pop	{r7}
 8003eb2:	4770      	bx	lr
 8003eb4:	40012c00 	.word	0x40012c00

08003eb8 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8003eb8:	b480      	push	{r7}
 8003eba:	b087      	sub	sp, #28
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	60f8      	str	r0, [r7, #12]
 8003ec0:	60b9      	str	r1, [r7, #8]
 8003ec2:	607a      	str	r2, [r7, #4]
 8003ec4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	6a1b      	ldr	r3, [r3, #32]
 8003eca:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	6a1b      	ldr	r3, [r3, #32]
 8003ed0:	f023 0201 	bic.w	r2, r3, #1
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	699b      	ldr	r3, [r3, #24]
 8003edc:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	4a1f      	ldr	r2, [pc, #124]	; (8003f60 <TIM_TI1_SetConfig+0xa8>)
 8003ee2:	4293      	cmp	r3, r2
 8003ee4:	d00b      	beq.n	8003efe <TIM_TI1_SetConfig+0x46>
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003eec:	d007      	beq.n	8003efe <TIM_TI1_SetConfig+0x46>
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	4a1c      	ldr	r2, [pc, #112]	; (8003f64 <TIM_TI1_SetConfig+0xac>)
 8003ef2:	4293      	cmp	r3, r2
 8003ef4:	d003      	beq.n	8003efe <TIM_TI1_SetConfig+0x46>
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	4a1b      	ldr	r2, [pc, #108]	; (8003f68 <TIM_TI1_SetConfig+0xb0>)
 8003efa:	4293      	cmp	r3, r2
 8003efc:	d101      	bne.n	8003f02 <TIM_TI1_SetConfig+0x4a>
 8003efe:	2301      	movs	r3, #1
 8003f00:	e000      	b.n	8003f04 <TIM_TI1_SetConfig+0x4c>
 8003f02:	2300      	movs	r3, #0
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d008      	beq.n	8003f1a <TIM_TI1_SetConfig+0x62>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8003f08:	697b      	ldr	r3, [r7, #20]
 8003f0a:	f023 0303 	bic.w	r3, r3, #3
 8003f0e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8003f10:	697a      	ldr	r2, [r7, #20]
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	4313      	orrs	r3, r2
 8003f16:	617b      	str	r3, [r7, #20]
 8003f18:	e003      	b.n	8003f22 <TIM_TI1_SetConfig+0x6a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8003f1a:	697b      	ldr	r3, [r7, #20]
 8003f1c:	f043 0301 	orr.w	r3, r3, #1
 8003f20:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003f22:	697b      	ldr	r3, [r7, #20]
 8003f24:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003f28:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8003f2a:	683b      	ldr	r3, [r7, #0]
 8003f2c:	011b      	lsls	r3, r3, #4
 8003f2e:	b2db      	uxtb	r3, r3
 8003f30:	697a      	ldr	r2, [r7, #20]
 8003f32:	4313      	orrs	r3, r2
 8003f34:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003f36:	693b      	ldr	r3, [r7, #16]
 8003f38:	f023 030a 	bic.w	r3, r3, #10
 8003f3c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8003f3e:	68bb      	ldr	r3, [r7, #8]
 8003f40:	f003 030a 	and.w	r3, r3, #10
 8003f44:	693a      	ldr	r2, [r7, #16]
 8003f46:	4313      	orrs	r3, r2
 8003f48:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	697a      	ldr	r2, [r7, #20]
 8003f4e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	693a      	ldr	r2, [r7, #16]
 8003f54:	621a      	str	r2, [r3, #32]
}
 8003f56:	bf00      	nop
 8003f58:	371c      	adds	r7, #28
 8003f5a:	46bd      	mov	sp, r7
 8003f5c:	bc80      	pop	{r7}
 8003f5e:	4770      	bx	lr
 8003f60:	40012c00 	.word	0x40012c00
 8003f64:	40000400 	.word	0x40000400
 8003f68:	40000800 	.word	0x40000800

08003f6c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003f6c:	b480      	push	{r7}
 8003f6e:	b087      	sub	sp, #28
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	60f8      	str	r0, [r7, #12]
 8003f74:	60b9      	str	r1, [r7, #8]
 8003f76:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	6a1b      	ldr	r3, [r3, #32]
 8003f7c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	6a1b      	ldr	r3, [r3, #32]
 8003f82:	f023 0201 	bic.w	r2, r3, #1
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	699b      	ldr	r3, [r3, #24]
 8003f8e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003f90:	693b      	ldr	r3, [r7, #16]
 8003f92:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003f96:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	011b      	lsls	r3, r3, #4
 8003f9c:	693a      	ldr	r2, [r7, #16]
 8003f9e:	4313      	orrs	r3, r2
 8003fa0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003fa2:	697b      	ldr	r3, [r7, #20]
 8003fa4:	f023 030a 	bic.w	r3, r3, #10
 8003fa8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003faa:	697a      	ldr	r2, [r7, #20]
 8003fac:	68bb      	ldr	r3, [r7, #8]
 8003fae:	4313      	orrs	r3, r2
 8003fb0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	693a      	ldr	r2, [r7, #16]
 8003fb6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	697a      	ldr	r2, [r7, #20]
 8003fbc:	621a      	str	r2, [r3, #32]
}
 8003fbe:	bf00      	nop
 8003fc0:	371c      	adds	r7, #28
 8003fc2:	46bd      	mov	sp, r7
 8003fc4:	bc80      	pop	{r7}
 8003fc6:	4770      	bx	lr

08003fc8 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003fc8:	b480      	push	{r7}
 8003fca:	b087      	sub	sp, #28
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	60f8      	str	r0, [r7, #12]
 8003fd0:	60b9      	str	r1, [r7, #8]
 8003fd2:	607a      	str	r2, [r7, #4]
 8003fd4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	6a1b      	ldr	r3, [r3, #32]
 8003fda:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	6a1b      	ldr	r3, [r3, #32]
 8003fe0:	f023 0210 	bic.w	r2, r3, #16
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	699b      	ldr	r3, [r3, #24]
 8003fec:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8003fee:	693b      	ldr	r3, [r7, #16]
 8003ff0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ff4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	021b      	lsls	r3, r3, #8
 8003ffa:	693a      	ldr	r2, [r7, #16]
 8003ffc:	4313      	orrs	r3, r2
 8003ffe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004000:	693b      	ldr	r3, [r7, #16]
 8004002:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004006:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8004008:	683b      	ldr	r3, [r7, #0]
 800400a:	031b      	lsls	r3, r3, #12
 800400c:	b29b      	uxth	r3, r3
 800400e:	693a      	ldr	r2, [r7, #16]
 8004010:	4313      	orrs	r3, r2
 8004012:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004014:	697b      	ldr	r3, [r7, #20]
 8004016:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800401a:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800401c:	68bb      	ldr	r3, [r7, #8]
 800401e:	011b      	lsls	r3, r3, #4
 8004020:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8004024:	697a      	ldr	r2, [r7, #20]
 8004026:	4313      	orrs	r3, r2
 8004028:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	693a      	ldr	r2, [r7, #16]
 800402e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	697a      	ldr	r2, [r7, #20]
 8004034:	621a      	str	r2, [r3, #32]
}
 8004036:	bf00      	nop
 8004038:	371c      	adds	r7, #28
 800403a:	46bd      	mov	sp, r7
 800403c:	bc80      	pop	{r7}
 800403e:	4770      	bx	lr

08004040 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004040:	b480      	push	{r7}
 8004042:	b087      	sub	sp, #28
 8004044:	af00      	add	r7, sp, #0
 8004046:	60f8      	str	r0, [r7, #12]
 8004048:	60b9      	str	r1, [r7, #8]
 800404a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	6a1b      	ldr	r3, [r3, #32]
 8004050:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	6a1b      	ldr	r3, [r3, #32]
 8004056:	f023 0210 	bic.w	r2, r3, #16
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	699b      	ldr	r3, [r3, #24]
 8004062:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004064:	693b      	ldr	r3, [r7, #16]
 8004066:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800406a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	031b      	lsls	r3, r3, #12
 8004070:	693a      	ldr	r2, [r7, #16]
 8004072:	4313      	orrs	r3, r2
 8004074:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004076:	697b      	ldr	r3, [r7, #20]
 8004078:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800407c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800407e:	68bb      	ldr	r3, [r7, #8]
 8004080:	011b      	lsls	r3, r3, #4
 8004082:	697a      	ldr	r2, [r7, #20]
 8004084:	4313      	orrs	r3, r2
 8004086:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	693a      	ldr	r2, [r7, #16]
 800408c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	697a      	ldr	r2, [r7, #20]
 8004092:	621a      	str	r2, [r3, #32]
}
 8004094:	bf00      	nop
 8004096:	371c      	adds	r7, #28
 8004098:	46bd      	mov	sp, r7
 800409a:	bc80      	pop	{r7}
 800409c:	4770      	bx	lr

0800409e <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800409e:	b480      	push	{r7}
 80040a0:	b087      	sub	sp, #28
 80040a2:	af00      	add	r7, sp, #0
 80040a4:	60f8      	str	r0, [r7, #12]
 80040a6:	60b9      	str	r1, [r7, #8]
 80040a8:	607a      	str	r2, [r7, #4]
 80040aa:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	6a1b      	ldr	r3, [r3, #32]
 80040b0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	6a1b      	ldr	r3, [r3, #32]
 80040b6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	69db      	ldr	r3, [r3, #28]
 80040c2:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80040c4:	693b      	ldr	r3, [r7, #16]
 80040c6:	f023 0303 	bic.w	r3, r3, #3
 80040ca:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 80040cc:	693a      	ldr	r2, [r7, #16]
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	4313      	orrs	r3, r2
 80040d2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80040d4:	693b      	ldr	r3, [r7, #16]
 80040d6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80040da:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80040dc:	683b      	ldr	r3, [r7, #0]
 80040de:	011b      	lsls	r3, r3, #4
 80040e0:	b2db      	uxtb	r3, r3
 80040e2:	693a      	ldr	r2, [r7, #16]
 80040e4:	4313      	orrs	r3, r2
 80040e6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P);
 80040e8:	697b      	ldr	r3, [r7, #20]
 80040ea:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80040ee:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 80040f0:	68bb      	ldr	r3, [r7, #8]
 80040f2:	021b      	lsls	r3, r3, #8
 80040f4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80040f8:	697a      	ldr	r2, [r7, #20]
 80040fa:	4313      	orrs	r3, r2
 80040fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	693a      	ldr	r2, [r7, #16]
 8004102:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	697a      	ldr	r2, [r7, #20]
 8004108:	621a      	str	r2, [r3, #32]
}
 800410a:	bf00      	nop
 800410c:	371c      	adds	r7, #28
 800410e:	46bd      	mov	sp, r7
 8004110:	bc80      	pop	{r7}
 8004112:	4770      	bx	lr

08004114 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004114:	b480      	push	{r7}
 8004116:	b087      	sub	sp, #28
 8004118:	af00      	add	r7, sp, #0
 800411a:	60f8      	str	r0, [r7, #12]
 800411c:	60b9      	str	r1, [r7, #8]
 800411e:	607a      	str	r2, [r7, #4]
 8004120:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	6a1b      	ldr	r3, [r3, #32]
 8004126:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	6a1b      	ldr	r3, [r3, #32]
 800412c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	69db      	ldr	r3, [r3, #28]
 8004138:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800413a:	693b      	ldr	r3, [r7, #16]
 800413c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004140:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	021b      	lsls	r3, r3, #8
 8004146:	693a      	ldr	r2, [r7, #16]
 8004148:	4313      	orrs	r3, r2
 800414a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800414c:	693b      	ldr	r3, [r7, #16]
 800414e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004152:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8004154:	683b      	ldr	r3, [r7, #0]
 8004156:	031b      	lsls	r3, r3, #12
 8004158:	b29b      	uxth	r3, r3
 800415a:	693a      	ldr	r2, [r7, #16]
 800415c:	4313      	orrs	r3, r2
 800415e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P);
 8004160:	697b      	ldr	r3, [r7, #20]
 8004162:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004166:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 8004168:	68bb      	ldr	r3, [r7, #8]
 800416a:	031b      	lsls	r3, r3, #12
 800416c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004170:	697a      	ldr	r2, [r7, #20]
 8004172:	4313      	orrs	r3, r2
 8004174:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	693a      	ldr	r2, [r7, #16]
 800417a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	697a      	ldr	r2, [r7, #20]
 8004180:	621a      	str	r2, [r3, #32]
}
 8004182:	bf00      	nop
 8004184:	371c      	adds	r7, #28
 8004186:	46bd      	mov	sp, r7
 8004188:	bc80      	pop	{r7}
 800418a:	4770      	bx	lr

0800418c <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800418c:	b480      	push	{r7}
 800418e:	b085      	sub	sp, #20
 8004190:	af00      	add	r7, sp, #0
 8004192:	6078      	str	r0, [r7, #4]
 8004194:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	689b      	ldr	r3, [r3, #8]
 800419a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041a2:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80041a4:	683a      	ldr	r2, [r7, #0]
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	4313      	orrs	r3, r2
 80041aa:	f043 0307 	orr.w	r3, r3, #7
 80041ae:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	68fa      	ldr	r2, [r7, #12]
 80041b4:	609a      	str	r2, [r3, #8]
}
 80041b6:	bf00      	nop
 80041b8:	3714      	adds	r7, #20
 80041ba:	46bd      	mov	sp, r7
 80041bc:	bc80      	pop	{r7}
 80041be:	4770      	bx	lr

080041c0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80041c0:	b480      	push	{r7}
 80041c2:	b087      	sub	sp, #28
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	60f8      	str	r0, [r7, #12]
 80041c8:	60b9      	str	r1, [r7, #8]
 80041ca:	607a      	str	r2, [r7, #4]
 80041cc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	689b      	ldr	r3, [r3, #8]
 80041d2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80041d4:	697b      	ldr	r3, [r7, #20]
 80041d6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80041da:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80041dc:	683b      	ldr	r3, [r7, #0]
 80041de:	021a      	lsls	r2, r3, #8
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	431a      	orrs	r2, r3
 80041e4:	68bb      	ldr	r3, [r7, #8]
 80041e6:	4313      	orrs	r3, r2
 80041e8:	697a      	ldr	r2, [r7, #20]
 80041ea:	4313      	orrs	r3, r2
 80041ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	697a      	ldr	r2, [r7, #20]
 80041f2:	609a      	str	r2, [r3, #8]
}
 80041f4:	bf00      	nop
 80041f6:	371c      	adds	r7, #28
 80041f8:	46bd      	mov	sp, r7
 80041fa:	bc80      	pop	{r7}
 80041fc:	4770      	bx	lr

080041fe <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80041fe:	b480      	push	{r7}
 8004200:	b087      	sub	sp, #28
 8004202:	af00      	add	r7, sp, #0
 8004204:	60f8      	str	r0, [r7, #12]
 8004206:	60b9      	str	r1, [r7, #8]
 8004208:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800420a:	68bb      	ldr	r3, [r7, #8]
 800420c:	f003 031f 	and.w	r3, r3, #31
 8004210:	2201      	movs	r2, #1
 8004212:	fa02 f303 	lsl.w	r3, r2, r3
 8004216:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	6a1a      	ldr	r2, [r3, #32]
 800421c:	697b      	ldr	r3, [r7, #20]
 800421e:	43db      	mvns	r3, r3
 8004220:	401a      	ands	r2, r3
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	6a1a      	ldr	r2, [r3, #32]
 800422a:	68bb      	ldr	r3, [r7, #8]
 800422c:	f003 031f 	and.w	r3, r3, #31
 8004230:	6879      	ldr	r1, [r7, #4]
 8004232:	fa01 f303 	lsl.w	r3, r1, r3
 8004236:	431a      	orrs	r2, r3
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	621a      	str	r2, [r3, #32]
}
 800423c:	bf00      	nop
 800423e:	371c      	adds	r7, #28
 8004240:	46bd      	mov	sp, r7
 8004242:	bc80      	pop	{r7}
 8004244:	4770      	bx	lr
	...

08004248 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004248:	b480      	push	{r7}
 800424a:	b085      	sub	sp, #20
 800424c:	af00      	add	r7, sp, #0
 800424e:	6078      	str	r0, [r7, #4]
 8004250:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004258:	2b01      	cmp	r3, #1
 800425a:	d101      	bne.n	8004260 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800425c:	2302      	movs	r3, #2
 800425e:	e046      	b.n	80042ee <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	2201      	movs	r2, #1
 8004264:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	2202      	movs	r2, #2
 800426c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	685b      	ldr	r3, [r3, #4]
 8004276:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	689b      	ldr	r3, [r3, #8]
 800427e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004286:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004288:	683b      	ldr	r3, [r7, #0]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	68fa      	ldr	r2, [r7, #12]
 800428e:	4313      	orrs	r3, r2
 8004290:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	68fa      	ldr	r2, [r7, #12]
 8004298:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	4a16      	ldr	r2, [pc, #88]	; (80042f8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80042a0:	4293      	cmp	r3, r2
 80042a2:	d00e      	beq.n	80042c2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80042ac:	d009      	beq.n	80042c2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	4a12      	ldr	r2, [pc, #72]	; (80042fc <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80042b4:	4293      	cmp	r3, r2
 80042b6:	d004      	beq.n	80042c2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	4a10      	ldr	r2, [pc, #64]	; (8004300 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80042be:	4293      	cmp	r3, r2
 80042c0:	d10c      	bne.n	80042dc <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80042c2:	68bb      	ldr	r3, [r7, #8]
 80042c4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80042c8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80042ca:	683b      	ldr	r3, [r7, #0]
 80042cc:	685b      	ldr	r3, [r3, #4]
 80042ce:	68ba      	ldr	r2, [r7, #8]
 80042d0:	4313      	orrs	r3, r2
 80042d2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	68ba      	ldr	r2, [r7, #8]
 80042da:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	2201      	movs	r2, #1
 80042e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	2200      	movs	r2, #0
 80042e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80042ec:	2300      	movs	r3, #0
}
 80042ee:	4618      	mov	r0, r3
 80042f0:	3714      	adds	r7, #20
 80042f2:	46bd      	mov	sp, r7
 80042f4:	bc80      	pop	{r7}
 80042f6:	4770      	bx	lr
 80042f8:	40012c00 	.word	0x40012c00
 80042fc:	40000400 	.word	0x40000400
 8004300:	40000800 	.word	0x40000800

08004304 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004304:	b480      	push	{r7}
 8004306:	b083      	sub	sp, #12
 8004308:	af00      	add	r7, sp, #0
 800430a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800430c:	bf00      	nop
 800430e:	370c      	adds	r7, #12
 8004310:	46bd      	mov	sp, r7
 8004312:	bc80      	pop	{r7}
 8004314:	4770      	bx	lr

08004316 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004316:	b480      	push	{r7}
 8004318:	b083      	sub	sp, #12
 800431a:	af00      	add	r7, sp, #0
 800431c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800431e:	bf00      	nop
 8004320:	370c      	adds	r7, #12
 8004322:	46bd      	mov	sp, r7
 8004324:	bc80      	pop	{r7}
 8004326:	4770      	bx	lr

08004328 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004328:	b580      	push	{r7, lr}
 800432a:	b082      	sub	sp, #8
 800432c:	af00      	add	r7, sp, #0
 800432e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	2b00      	cmp	r3, #0
 8004334:	d101      	bne.n	800433a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004336:	2301      	movs	r3, #1
 8004338:	e042      	b.n	80043c0 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004340:	b2db      	uxtb	r3, r3
 8004342:	2b00      	cmp	r3, #0
 8004344:	d106      	bne.n	8004354 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	2200      	movs	r2, #0
 800434a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800434e:	6878      	ldr	r0, [r7, #4]
 8004350:	f7fd fcb6 	bl	8001cc0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	2224      	movs	r2, #36	; 0x24
 8004358:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	68da      	ldr	r2, [r3, #12]
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800436a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800436c:	6878      	ldr	r0, [r7, #4]
 800436e:	f000 fe57 	bl	8005020 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	691a      	ldr	r2, [r3, #16]
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004380:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	695a      	ldr	r2, [r3, #20]
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004390:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	68da      	ldr	r2, [r3, #12]
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80043a0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	2200      	movs	r2, #0
 80043a6:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	2220      	movs	r2, #32
 80043ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	2220      	movs	r2, #32
 80043b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	2200      	movs	r2, #0
 80043bc:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80043be:	2300      	movs	r3, #0
}
 80043c0:	4618      	mov	r0, r3
 80043c2:	3708      	adds	r7, #8
 80043c4:	46bd      	mov	sp, r7
 80043c6:	bd80      	pop	{r7, pc}

080043c8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80043c8:	b580      	push	{r7, lr}
 80043ca:	b08a      	sub	sp, #40	; 0x28
 80043cc:	af02      	add	r7, sp, #8
 80043ce:	60f8      	str	r0, [r7, #12]
 80043d0:	60b9      	str	r1, [r7, #8]
 80043d2:	603b      	str	r3, [r7, #0]
 80043d4:	4613      	mov	r3, r2
 80043d6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80043d8:	2300      	movs	r3, #0
 80043da:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80043e2:	b2db      	uxtb	r3, r3
 80043e4:	2b20      	cmp	r3, #32
 80043e6:	d16d      	bne.n	80044c4 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 80043e8:	68bb      	ldr	r3, [r7, #8]
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d002      	beq.n	80043f4 <HAL_UART_Transmit+0x2c>
 80043ee:	88fb      	ldrh	r3, [r7, #6]
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d101      	bne.n	80043f8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80043f4:	2301      	movs	r3, #1
 80043f6:	e066      	b.n	80044c6 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	2200      	movs	r2, #0
 80043fc:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	2221      	movs	r2, #33	; 0x21
 8004402:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004406:	f7fd fda5 	bl	8001f54 <HAL_GetTick>
 800440a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	88fa      	ldrh	r2, [r7, #6]
 8004410:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	88fa      	ldrh	r2, [r7, #6]
 8004416:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	689b      	ldr	r3, [r3, #8]
 800441c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004420:	d108      	bne.n	8004434 <HAL_UART_Transmit+0x6c>
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	691b      	ldr	r3, [r3, #16]
 8004426:	2b00      	cmp	r3, #0
 8004428:	d104      	bne.n	8004434 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800442a:	2300      	movs	r3, #0
 800442c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800442e:	68bb      	ldr	r3, [r7, #8]
 8004430:	61bb      	str	r3, [r7, #24]
 8004432:	e003      	b.n	800443c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004434:	68bb      	ldr	r3, [r7, #8]
 8004436:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004438:	2300      	movs	r3, #0
 800443a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800443c:	e02a      	b.n	8004494 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800443e:	683b      	ldr	r3, [r7, #0]
 8004440:	9300      	str	r3, [sp, #0]
 8004442:	697b      	ldr	r3, [r7, #20]
 8004444:	2200      	movs	r2, #0
 8004446:	2180      	movs	r1, #128	; 0x80
 8004448:	68f8      	ldr	r0, [r7, #12]
 800444a:	f000 fba6 	bl	8004b9a <UART_WaitOnFlagUntilTimeout>
 800444e:	4603      	mov	r3, r0
 8004450:	2b00      	cmp	r3, #0
 8004452:	d001      	beq.n	8004458 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8004454:	2303      	movs	r3, #3
 8004456:	e036      	b.n	80044c6 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8004458:	69fb      	ldr	r3, [r7, #28]
 800445a:	2b00      	cmp	r3, #0
 800445c:	d10b      	bne.n	8004476 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800445e:	69bb      	ldr	r3, [r7, #24]
 8004460:	881b      	ldrh	r3, [r3, #0]
 8004462:	461a      	mov	r2, r3
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800446c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800446e:	69bb      	ldr	r3, [r7, #24]
 8004470:	3302      	adds	r3, #2
 8004472:	61bb      	str	r3, [r7, #24]
 8004474:	e007      	b.n	8004486 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004476:	69fb      	ldr	r3, [r7, #28]
 8004478:	781a      	ldrb	r2, [r3, #0]
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004480:	69fb      	ldr	r3, [r7, #28]
 8004482:	3301      	adds	r3, #1
 8004484:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800448a:	b29b      	uxth	r3, r3
 800448c:	3b01      	subs	r3, #1
 800448e:	b29a      	uxth	r2, r3
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004498:	b29b      	uxth	r3, r3
 800449a:	2b00      	cmp	r3, #0
 800449c:	d1cf      	bne.n	800443e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800449e:	683b      	ldr	r3, [r7, #0]
 80044a0:	9300      	str	r3, [sp, #0]
 80044a2:	697b      	ldr	r3, [r7, #20]
 80044a4:	2200      	movs	r2, #0
 80044a6:	2140      	movs	r1, #64	; 0x40
 80044a8:	68f8      	ldr	r0, [r7, #12]
 80044aa:	f000 fb76 	bl	8004b9a <UART_WaitOnFlagUntilTimeout>
 80044ae:	4603      	mov	r3, r0
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d001      	beq.n	80044b8 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 80044b4:	2303      	movs	r3, #3
 80044b6:	e006      	b.n	80044c6 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	2220      	movs	r2, #32
 80044bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 80044c0:	2300      	movs	r3, #0
 80044c2:	e000      	b.n	80044c6 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 80044c4:	2302      	movs	r3, #2
  }
}
 80044c6:	4618      	mov	r0, r3
 80044c8:	3720      	adds	r7, #32
 80044ca:	46bd      	mov	sp, r7
 80044cc:	bd80      	pop	{r7, pc}

080044ce <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80044ce:	b580      	push	{r7, lr}
 80044d0:	b08a      	sub	sp, #40	; 0x28
 80044d2:	af02      	add	r7, sp, #8
 80044d4:	60f8      	str	r0, [r7, #12]
 80044d6:	60b9      	str	r1, [r7, #8]
 80044d8:	603b      	str	r3, [r7, #0]
 80044da:	4613      	mov	r3, r2
 80044dc:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80044de:	2300      	movs	r3, #0
 80044e0:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80044e8:	b2db      	uxtb	r3, r3
 80044ea:	2b20      	cmp	r3, #32
 80044ec:	d17c      	bne.n	80045e8 <HAL_UART_Receive+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80044ee:	68bb      	ldr	r3, [r7, #8]
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d002      	beq.n	80044fa <HAL_UART_Receive+0x2c>
 80044f4:	88fb      	ldrh	r3, [r7, #6]
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d101      	bne.n	80044fe <HAL_UART_Receive+0x30>
    {
      return  HAL_ERROR;
 80044fa:	2301      	movs	r3, #1
 80044fc:	e075      	b.n	80045ea <HAL_UART_Receive+0x11c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	2200      	movs	r2, #0
 8004502:	645a      	str	r2, [r3, #68]	; 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	2222      	movs	r2, #34	; 0x22
 8004508:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	2200      	movs	r2, #0
 8004510:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004512:	f7fd fd1f 	bl	8001f54 <HAL_GetTick>
 8004516:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	88fa      	ldrh	r2, [r7, #6]
 800451c:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	88fa      	ldrh	r2, [r7, #6]
 8004522:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	689b      	ldr	r3, [r3, #8]
 8004528:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800452c:	d108      	bne.n	8004540 <HAL_UART_Receive+0x72>
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	691b      	ldr	r3, [r3, #16]
 8004532:	2b00      	cmp	r3, #0
 8004534:	d104      	bne.n	8004540 <HAL_UART_Receive+0x72>
    {
      pdata8bits  = NULL;
 8004536:	2300      	movs	r3, #0
 8004538:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800453a:	68bb      	ldr	r3, [r7, #8]
 800453c:	61bb      	str	r3, [r7, #24]
 800453e:	e003      	b.n	8004548 <HAL_UART_Receive+0x7a>
    }
    else
    {
      pdata8bits  = pData;
 8004540:	68bb      	ldr	r3, [r7, #8]
 8004542:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004544:	2300      	movs	r3, #0
 8004546:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8004548:	e043      	b.n	80045d2 <HAL_UART_Receive+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800454a:	683b      	ldr	r3, [r7, #0]
 800454c:	9300      	str	r3, [sp, #0]
 800454e:	697b      	ldr	r3, [r7, #20]
 8004550:	2200      	movs	r2, #0
 8004552:	2120      	movs	r1, #32
 8004554:	68f8      	ldr	r0, [r7, #12]
 8004556:	f000 fb20 	bl	8004b9a <UART_WaitOnFlagUntilTimeout>
 800455a:	4603      	mov	r3, r0
 800455c:	2b00      	cmp	r3, #0
 800455e:	d001      	beq.n	8004564 <HAL_UART_Receive+0x96>
      {
        return HAL_TIMEOUT;
 8004560:	2303      	movs	r3, #3
 8004562:	e042      	b.n	80045ea <HAL_UART_Receive+0x11c>
      }
      if (pdata8bits == NULL)
 8004564:	69fb      	ldr	r3, [r7, #28]
 8004566:	2b00      	cmp	r3, #0
 8004568:	d10c      	bne.n	8004584 <HAL_UART_Receive+0xb6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	685b      	ldr	r3, [r3, #4]
 8004570:	b29b      	uxth	r3, r3
 8004572:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004576:	b29a      	uxth	r2, r3
 8004578:	69bb      	ldr	r3, [r7, #24]
 800457a:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800457c:	69bb      	ldr	r3, [r7, #24]
 800457e:	3302      	adds	r3, #2
 8004580:	61bb      	str	r3, [r7, #24]
 8004582:	e01f      	b.n	80045c4 <HAL_UART_Receive+0xf6>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	689b      	ldr	r3, [r3, #8]
 8004588:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800458c:	d007      	beq.n	800459e <HAL_UART_Receive+0xd0>
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	689b      	ldr	r3, [r3, #8]
 8004592:	2b00      	cmp	r3, #0
 8004594:	d10a      	bne.n	80045ac <HAL_UART_Receive+0xde>
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	691b      	ldr	r3, [r3, #16]
 800459a:	2b00      	cmp	r3, #0
 800459c:	d106      	bne.n	80045ac <HAL_UART_Receive+0xde>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	685b      	ldr	r3, [r3, #4]
 80045a4:	b2da      	uxtb	r2, r3
 80045a6:	69fb      	ldr	r3, [r7, #28]
 80045a8:	701a      	strb	r2, [r3, #0]
 80045aa:	e008      	b.n	80045be <HAL_UART_Receive+0xf0>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	685b      	ldr	r3, [r3, #4]
 80045b2:	b2db      	uxtb	r3, r3
 80045b4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80045b8:	b2da      	uxtb	r2, r3
 80045ba:	69fb      	ldr	r3, [r7, #28]
 80045bc:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 80045be:	69fb      	ldr	r3, [r7, #28]
 80045c0:	3301      	adds	r3, #1
 80045c2:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80045c8:	b29b      	uxth	r3, r3
 80045ca:	3b01      	subs	r3, #1
 80045cc:	b29a      	uxth	r2, r3
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80045d6:	b29b      	uxth	r3, r3
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d1b6      	bne.n	800454a <HAL_UART_Receive+0x7c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	2220      	movs	r2, #32
 80045e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    return HAL_OK;
 80045e4:	2300      	movs	r3, #0
 80045e6:	e000      	b.n	80045ea <HAL_UART_Receive+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80045e8:	2302      	movs	r3, #2
  }
}
 80045ea:	4618      	mov	r0, r3
 80045ec:	3720      	adds	r7, #32
 80045ee:	46bd      	mov	sp, r7
 80045f0:	bd80      	pop	{r7, pc}

080045f2 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80045f2:	b580      	push	{r7, lr}
 80045f4:	b084      	sub	sp, #16
 80045f6:	af00      	add	r7, sp, #0
 80045f8:	60f8      	str	r0, [r7, #12]
 80045fa:	60b9      	str	r1, [r7, #8]
 80045fc:	4613      	mov	r3, r2
 80045fe:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004606:	b2db      	uxtb	r3, r3
 8004608:	2b20      	cmp	r3, #32
 800460a:	d112      	bne.n	8004632 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800460c:	68bb      	ldr	r3, [r7, #8]
 800460e:	2b00      	cmp	r3, #0
 8004610:	d002      	beq.n	8004618 <HAL_UART_Receive_IT+0x26>
 8004612:	88fb      	ldrh	r3, [r7, #6]
 8004614:	2b00      	cmp	r3, #0
 8004616:	d101      	bne.n	800461c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004618:	2301      	movs	r3, #1
 800461a:	e00b      	b.n	8004634 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	2200      	movs	r2, #0
 8004620:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004622:	88fb      	ldrh	r3, [r7, #6]
 8004624:	461a      	mov	r2, r3
 8004626:	68b9      	ldr	r1, [r7, #8]
 8004628:	68f8      	ldr	r0, [r7, #12]
 800462a:	f000 fb24 	bl	8004c76 <UART_Start_Receive_IT>
 800462e:	4603      	mov	r3, r0
 8004630:	e000      	b.n	8004634 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8004632:	2302      	movs	r3, #2
  }
}
 8004634:	4618      	mov	r0, r3
 8004636:	3710      	adds	r7, #16
 8004638:	46bd      	mov	sp, r7
 800463a:	bd80      	pop	{r7, pc}

0800463c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800463c:	b580      	push	{r7, lr}
 800463e:	b0ba      	sub	sp, #232	; 0xe8
 8004640:	af00      	add	r7, sp, #0
 8004642:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	68db      	ldr	r3, [r3, #12]
 8004654:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	695b      	ldr	r3, [r3, #20]
 800465e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8004662:	2300      	movs	r3, #0
 8004664:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8004668:	2300      	movs	r3, #0
 800466a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800466e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004672:	f003 030f 	and.w	r3, r3, #15
 8004676:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800467a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800467e:	2b00      	cmp	r3, #0
 8004680:	d10f      	bne.n	80046a2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004682:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004686:	f003 0320 	and.w	r3, r3, #32
 800468a:	2b00      	cmp	r3, #0
 800468c:	d009      	beq.n	80046a2 <HAL_UART_IRQHandler+0x66>
 800468e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004692:	f003 0320 	and.w	r3, r3, #32
 8004696:	2b00      	cmp	r3, #0
 8004698:	d003      	beq.n	80046a2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800469a:	6878      	ldr	r0, [r7, #4]
 800469c:	f000 fc01 	bl	8004ea2 <UART_Receive_IT>
      return;
 80046a0:	e25b      	b.n	8004b5a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80046a2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	f000 80de 	beq.w	8004868 <HAL_UART_IRQHandler+0x22c>
 80046ac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80046b0:	f003 0301 	and.w	r3, r3, #1
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d106      	bne.n	80046c6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80046b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80046bc:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	f000 80d1 	beq.w	8004868 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80046c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80046ca:	f003 0301 	and.w	r3, r3, #1
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d00b      	beq.n	80046ea <HAL_UART_IRQHandler+0xae>
 80046d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80046d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d005      	beq.n	80046ea <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046e2:	f043 0201 	orr.w	r2, r3, #1
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80046ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80046ee:	f003 0304 	and.w	r3, r3, #4
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d00b      	beq.n	800470e <HAL_UART_IRQHandler+0xd2>
 80046f6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80046fa:	f003 0301 	and.w	r3, r3, #1
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d005      	beq.n	800470e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004706:	f043 0202 	orr.w	r2, r3, #2
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800470e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004712:	f003 0302 	and.w	r3, r3, #2
 8004716:	2b00      	cmp	r3, #0
 8004718:	d00b      	beq.n	8004732 <HAL_UART_IRQHandler+0xf6>
 800471a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800471e:	f003 0301 	and.w	r3, r3, #1
 8004722:	2b00      	cmp	r3, #0
 8004724:	d005      	beq.n	8004732 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800472a:	f043 0204 	orr.w	r2, r3, #4
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004732:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004736:	f003 0308 	and.w	r3, r3, #8
 800473a:	2b00      	cmp	r3, #0
 800473c:	d011      	beq.n	8004762 <HAL_UART_IRQHandler+0x126>
 800473e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004742:	f003 0320 	and.w	r3, r3, #32
 8004746:	2b00      	cmp	r3, #0
 8004748:	d105      	bne.n	8004756 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800474a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800474e:	f003 0301 	and.w	r3, r3, #1
 8004752:	2b00      	cmp	r3, #0
 8004754:	d005      	beq.n	8004762 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800475a:	f043 0208 	orr.w	r2, r3, #8
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004766:	2b00      	cmp	r3, #0
 8004768:	f000 81f2 	beq.w	8004b50 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800476c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004770:	f003 0320 	and.w	r3, r3, #32
 8004774:	2b00      	cmp	r3, #0
 8004776:	d008      	beq.n	800478a <HAL_UART_IRQHandler+0x14e>
 8004778:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800477c:	f003 0320 	and.w	r3, r3, #32
 8004780:	2b00      	cmp	r3, #0
 8004782:	d002      	beq.n	800478a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004784:	6878      	ldr	r0, [r7, #4]
 8004786:	f000 fb8c 	bl	8004ea2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	695b      	ldr	r3, [r3, #20]
 8004790:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004794:	2b00      	cmp	r3, #0
 8004796:	bf14      	ite	ne
 8004798:	2301      	movne	r3, #1
 800479a:	2300      	moveq	r3, #0
 800479c:	b2db      	uxtb	r3, r3
 800479e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047a6:	f003 0308 	and.w	r3, r3, #8
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d103      	bne.n	80047b6 <HAL_UART_IRQHandler+0x17a>
 80047ae:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d04f      	beq.n	8004856 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80047b6:	6878      	ldr	r0, [r7, #4]
 80047b8:	f000 fa96 	bl	8004ce8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	695b      	ldr	r3, [r3, #20]
 80047c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d041      	beq.n	800484e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	3314      	adds	r3, #20
 80047d0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047d4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80047d8:	e853 3f00 	ldrex	r3, [r3]
 80047dc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80047e0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80047e4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80047e8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	3314      	adds	r3, #20
 80047f2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80047f6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80047fa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047fe:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004802:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004806:	e841 2300 	strex	r3, r2, [r1]
 800480a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800480e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004812:	2b00      	cmp	r3, #0
 8004814:	d1d9      	bne.n	80047ca <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800481a:	2b00      	cmp	r3, #0
 800481c:	d013      	beq.n	8004846 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004822:	4a7e      	ldr	r2, [pc, #504]	; (8004a1c <HAL_UART_IRQHandler+0x3e0>)
 8004824:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800482a:	4618      	mov	r0, r3
 800482c:	f7fd fce4 	bl	80021f8 <HAL_DMA_Abort_IT>
 8004830:	4603      	mov	r3, r0
 8004832:	2b00      	cmp	r3, #0
 8004834:	d016      	beq.n	8004864 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800483a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800483c:	687a      	ldr	r2, [r7, #4]
 800483e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004840:	4610      	mov	r0, r2
 8004842:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004844:	e00e      	b.n	8004864 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004846:	6878      	ldr	r0, [r7, #4]
 8004848:	f000 f993 	bl	8004b72 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800484c:	e00a      	b.n	8004864 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800484e:	6878      	ldr	r0, [r7, #4]
 8004850:	f000 f98f 	bl	8004b72 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004854:	e006      	b.n	8004864 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004856:	6878      	ldr	r0, [r7, #4]
 8004858:	f000 f98b 	bl	8004b72 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	2200      	movs	r2, #0
 8004860:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8004862:	e175      	b.n	8004b50 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004864:	bf00      	nop
    return;
 8004866:	e173      	b.n	8004b50 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800486c:	2b01      	cmp	r3, #1
 800486e:	f040 814f 	bne.w	8004b10 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004872:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004876:	f003 0310 	and.w	r3, r3, #16
 800487a:	2b00      	cmp	r3, #0
 800487c:	f000 8148 	beq.w	8004b10 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004880:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004884:	f003 0310 	and.w	r3, r3, #16
 8004888:	2b00      	cmp	r3, #0
 800488a:	f000 8141 	beq.w	8004b10 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800488e:	2300      	movs	r3, #0
 8004890:	60bb      	str	r3, [r7, #8]
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	60bb      	str	r3, [r7, #8]
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	685b      	ldr	r3, [r3, #4]
 80048a0:	60bb      	str	r3, [r7, #8]
 80048a2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	695b      	ldr	r3, [r3, #20]
 80048aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	f000 80b6 	beq.w	8004a20 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	685b      	ldr	r3, [r3, #4]
 80048bc:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80048c0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	f000 8145 	beq.w	8004b54 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80048ce:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80048d2:	429a      	cmp	r2, r3
 80048d4:	f080 813e 	bcs.w	8004b54 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80048de:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048e4:	699b      	ldr	r3, [r3, #24]
 80048e6:	2b20      	cmp	r3, #32
 80048e8:	f000 8088 	beq.w	80049fc <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	330c      	adds	r3, #12
 80048f2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048f6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80048fa:	e853 3f00 	ldrex	r3, [r3]
 80048fe:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004902:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004906:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800490a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	330c      	adds	r3, #12
 8004914:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8004918:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800491c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004920:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004924:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004928:	e841 2300 	strex	r3, r2, [r1]
 800492c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004930:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004934:	2b00      	cmp	r3, #0
 8004936:	d1d9      	bne.n	80048ec <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	3314      	adds	r3, #20
 800493e:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004940:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004942:	e853 3f00 	ldrex	r3, [r3]
 8004946:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004948:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800494a:	f023 0301 	bic.w	r3, r3, #1
 800494e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	3314      	adds	r3, #20
 8004958:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800495c:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004960:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004962:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004964:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004968:	e841 2300 	strex	r3, r2, [r1]
 800496c:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800496e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004970:	2b00      	cmp	r3, #0
 8004972:	d1e1      	bne.n	8004938 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	3314      	adds	r3, #20
 800497a:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800497c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800497e:	e853 3f00 	ldrex	r3, [r3]
 8004982:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004984:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004986:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800498a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	3314      	adds	r3, #20
 8004994:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004998:	66fa      	str	r2, [r7, #108]	; 0x6c
 800499a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800499c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800499e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80049a0:	e841 2300 	strex	r3, r2, [r1]
 80049a4:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80049a6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d1e3      	bne.n	8004974 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	2220      	movs	r2, #32
 80049b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	2200      	movs	r2, #0
 80049b8:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	330c      	adds	r3, #12
 80049c0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80049c4:	e853 3f00 	ldrex	r3, [r3]
 80049c8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80049ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80049cc:	f023 0310 	bic.w	r3, r3, #16
 80049d0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	330c      	adds	r3, #12
 80049da:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80049de:	65ba      	str	r2, [r7, #88]	; 0x58
 80049e0:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049e2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80049e4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80049e6:	e841 2300 	strex	r3, r2, [r1]
 80049ea:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80049ec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d1e3      	bne.n	80049ba <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049f6:	4618      	mov	r0, r3
 80049f8:	f7fd fbc3 	bl	8002182 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	2202      	movs	r2, #2
 8004a00:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004a0a:	b29b      	uxth	r3, r3
 8004a0c:	1ad3      	subs	r3, r2, r3
 8004a0e:	b29b      	uxth	r3, r3
 8004a10:	4619      	mov	r1, r3
 8004a12:	6878      	ldr	r0, [r7, #4]
 8004a14:	f000 f8b6 	bl	8004b84 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004a18:	e09c      	b.n	8004b54 <HAL_UART_IRQHandler+0x518>
 8004a1a:	bf00      	nop
 8004a1c:	08004dad 	.word	0x08004dad
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004a28:	b29b      	uxth	r3, r3
 8004a2a:	1ad3      	subs	r3, r2, r3
 8004a2c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004a34:	b29b      	uxth	r3, r3
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	f000 808e 	beq.w	8004b58 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8004a3c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	f000 8089 	beq.w	8004b58 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	330c      	adds	r3, #12
 8004a4c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a50:	e853 3f00 	ldrex	r3, [r3]
 8004a54:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004a56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a58:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004a5c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	330c      	adds	r3, #12
 8004a66:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8004a6a:	647a      	str	r2, [r7, #68]	; 0x44
 8004a6c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a6e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004a70:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004a72:	e841 2300 	strex	r3, r2, [r1]
 8004a76:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004a78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d1e3      	bne.n	8004a46 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	3314      	adds	r3, #20
 8004a84:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a88:	e853 3f00 	ldrex	r3, [r3]
 8004a8c:	623b      	str	r3, [r7, #32]
   return(result);
 8004a8e:	6a3b      	ldr	r3, [r7, #32]
 8004a90:	f023 0301 	bic.w	r3, r3, #1
 8004a94:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	3314      	adds	r3, #20
 8004a9e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004aa2:	633a      	str	r2, [r7, #48]	; 0x30
 8004aa4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004aa6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004aa8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004aaa:	e841 2300 	strex	r3, r2, [r1]
 8004aae:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004ab0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d1e3      	bne.n	8004a7e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	2220      	movs	r2, #32
 8004aba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	2200      	movs	r2, #0
 8004ac2:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	330c      	adds	r3, #12
 8004aca:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004acc:	693b      	ldr	r3, [r7, #16]
 8004ace:	e853 3f00 	ldrex	r3, [r3]
 8004ad2:	60fb      	str	r3, [r7, #12]
   return(result);
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	f023 0310 	bic.w	r3, r3, #16
 8004ada:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	330c      	adds	r3, #12
 8004ae4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004ae8:	61fa      	str	r2, [r7, #28]
 8004aea:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004aec:	69b9      	ldr	r1, [r7, #24]
 8004aee:	69fa      	ldr	r2, [r7, #28]
 8004af0:	e841 2300 	strex	r3, r2, [r1]
 8004af4:	617b      	str	r3, [r7, #20]
   return(result);
 8004af6:	697b      	ldr	r3, [r7, #20]
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d1e3      	bne.n	8004ac4 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	2202      	movs	r2, #2
 8004b00:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004b02:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004b06:	4619      	mov	r1, r3
 8004b08:	6878      	ldr	r0, [r7, #4]
 8004b0a:	f000 f83b 	bl	8004b84 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004b0e:	e023      	b.n	8004b58 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004b10:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d009      	beq.n	8004b30 <HAL_UART_IRQHandler+0x4f4>
 8004b1c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004b20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d003      	beq.n	8004b30 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8004b28:	6878      	ldr	r0, [r7, #4]
 8004b2a:	f000 f953 	bl	8004dd4 <UART_Transmit_IT>
    return;
 8004b2e:	e014      	b.n	8004b5a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004b30:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d00e      	beq.n	8004b5a <HAL_UART_IRQHandler+0x51e>
 8004b3c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004b40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d008      	beq.n	8004b5a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8004b48:	6878      	ldr	r0, [r7, #4]
 8004b4a:	f000 f992 	bl	8004e72 <UART_EndTransmit_IT>
    return;
 8004b4e:	e004      	b.n	8004b5a <HAL_UART_IRQHandler+0x51e>
    return;
 8004b50:	bf00      	nop
 8004b52:	e002      	b.n	8004b5a <HAL_UART_IRQHandler+0x51e>
      return;
 8004b54:	bf00      	nop
 8004b56:	e000      	b.n	8004b5a <HAL_UART_IRQHandler+0x51e>
      return;
 8004b58:	bf00      	nop
  }
}
 8004b5a:	37e8      	adds	r7, #232	; 0xe8
 8004b5c:	46bd      	mov	sp, r7
 8004b5e:	bd80      	pop	{r7, pc}

08004b60 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004b60:	b480      	push	{r7}
 8004b62:	b083      	sub	sp, #12
 8004b64:	af00      	add	r7, sp, #0
 8004b66:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004b68:	bf00      	nop
 8004b6a:	370c      	adds	r7, #12
 8004b6c:	46bd      	mov	sp, r7
 8004b6e:	bc80      	pop	{r7}
 8004b70:	4770      	bx	lr

08004b72 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004b72:	b480      	push	{r7}
 8004b74:	b083      	sub	sp, #12
 8004b76:	af00      	add	r7, sp, #0
 8004b78:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004b7a:	bf00      	nop
 8004b7c:	370c      	adds	r7, #12
 8004b7e:	46bd      	mov	sp, r7
 8004b80:	bc80      	pop	{r7}
 8004b82:	4770      	bx	lr

08004b84 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004b84:	b480      	push	{r7}
 8004b86:	b083      	sub	sp, #12
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	6078      	str	r0, [r7, #4]
 8004b8c:	460b      	mov	r3, r1
 8004b8e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004b90:	bf00      	nop
 8004b92:	370c      	adds	r7, #12
 8004b94:	46bd      	mov	sp, r7
 8004b96:	bc80      	pop	{r7}
 8004b98:	4770      	bx	lr

08004b9a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004b9a:	b580      	push	{r7, lr}
 8004b9c:	b090      	sub	sp, #64	; 0x40
 8004b9e:	af00      	add	r7, sp, #0
 8004ba0:	60f8      	str	r0, [r7, #12]
 8004ba2:	60b9      	str	r1, [r7, #8]
 8004ba4:	603b      	str	r3, [r7, #0]
 8004ba6:	4613      	mov	r3, r2
 8004ba8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004baa:	e050      	b.n	8004c4e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004bac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004bae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bb2:	d04c      	beq.n	8004c4e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004bb4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d007      	beq.n	8004bca <UART_WaitOnFlagUntilTimeout+0x30>
 8004bba:	f7fd f9cb 	bl	8001f54 <HAL_GetTick>
 8004bbe:	4602      	mov	r2, r0
 8004bc0:	683b      	ldr	r3, [r7, #0]
 8004bc2:	1ad3      	subs	r3, r2, r3
 8004bc4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004bc6:	429a      	cmp	r2, r3
 8004bc8:	d241      	bcs.n	8004c4e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	330c      	adds	r3, #12
 8004bd0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bd4:	e853 3f00 	ldrex	r3, [r3]
 8004bd8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004bda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bdc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004be0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	330c      	adds	r3, #12
 8004be8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004bea:	637a      	str	r2, [r7, #52]	; 0x34
 8004bec:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bee:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004bf0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004bf2:	e841 2300 	strex	r3, r2, [r1]
 8004bf6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004bf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d1e5      	bne.n	8004bca <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	3314      	adds	r3, #20
 8004c04:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c06:	697b      	ldr	r3, [r7, #20]
 8004c08:	e853 3f00 	ldrex	r3, [r3]
 8004c0c:	613b      	str	r3, [r7, #16]
   return(result);
 8004c0e:	693b      	ldr	r3, [r7, #16]
 8004c10:	f023 0301 	bic.w	r3, r3, #1
 8004c14:	63bb      	str	r3, [r7, #56]	; 0x38
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	3314      	adds	r3, #20
 8004c1c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004c1e:	623a      	str	r2, [r7, #32]
 8004c20:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c22:	69f9      	ldr	r1, [r7, #28]
 8004c24:	6a3a      	ldr	r2, [r7, #32]
 8004c26:	e841 2300 	strex	r3, r2, [r1]
 8004c2a:	61bb      	str	r3, [r7, #24]
   return(result);
 8004c2c:	69bb      	ldr	r3, [r7, #24]
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d1e5      	bne.n	8004bfe <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	2220      	movs	r2, #32
 8004c36:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	2220      	movs	r2, #32
 8004c3e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	2200      	movs	r2, #0
 8004c46:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8004c4a:	2303      	movs	r3, #3
 8004c4c:	e00f      	b.n	8004c6e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	681a      	ldr	r2, [r3, #0]
 8004c54:	68bb      	ldr	r3, [r7, #8]
 8004c56:	4013      	ands	r3, r2
 8004c58:	68ba      	ldr	r2, [r7, #8]
 8004c5a:	429a      	cmp	r2, r3
 8004c5c:	bf0c      	ite	eq
 8004c5e:	2301      	moveq	r3, #1
 8004c60:	2300      	movne	r3, #0
 8004c62:	b2db      	uxtb	r3, r3
 8004c64:	461a      	mov	r2, r3
 8004c66:	79fb      	ldrb	r3, [r7, #7]
 8004c68:	429a      	cmp	r2, r3
 8004c6a:	d09f      	beq.n	8004bac <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004c6c:	2300      	movs	r3, #0
}
 8004c6e:	4618      	mov	r0, r3
 8004c70:	3740      	adds	r7, #64	; 0x40
 8004c72:	46bd      	mov	sp, r7
 8004c74:	bd80      	pop	{r7, pc}

08004c76 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004c76:	b480      	push	{r7}
 8004c78:	b085      	sub	sp, #20
 8004c7a:	af00      	add	r7, sp, #0
 8004c7c:	60f8      	str	r0, [r7, #12]
 8004c7e:	60b9      	str	r1, [r7, #8]
 8004c80:	4613      	mov	r3, r2
 8004c82:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	68ba      	ldr	r2, [r7, #8]
 8004c88:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	88fa      	ldrh	r2, [r7, #6]
 8004c8e:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	88fa      	ldrh	r2, [r7, #6]
 8004c94:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	2200      	movs	r2, #0
 8004c9a:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	2222      	movs	r2, #34	; 0x22
 8004ca0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	691b      	ldr	r3, [r3, #16]
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d007      	beq.n	8004cbc <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	68da      	ldr	r2, [r3, #12]
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004cba:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	695a      	ldr	r2, [r3, #20]
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	f042 0201 	orr.w	r2, r2, #1
 8004cca:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	68da      	ldr	r2, [r3, #12]
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	f042 0220 	orr.w	r2, r2, #32
 8004cda:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004cdc:	2300      	movs	r3, #0
}
 8004cde:	4618      	mov	r0, r3
 8004ce0:	3714      	adds	r7, #20
 8004ce2:	46bd      	mov	sp, r7
 8004ce4:	bc80      	pop	{r7}
 8004ce6:	4770      	bx	lr

08004ce8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004ce8:	b480      	push	{r7}
 8004cea:	b095      	sub	sp, #84	; 0x54
 8004cec:	af00      	add	r7, sp, #0
 8004cee:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	330c      	adds	r3, #12
 8004cf6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cf8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004cfa:	e853 3f00 	ldrex	r3, [r3]
 8004cfe:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004d00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d02:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004d06:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	330c      	adds	r3, #12
 8004d0e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004d10:	643a      	str	r2, [r7, #64]	; 0x40
 8004d12:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d14:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004d16:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004d18:	e841 2300 	strex	r3, r2, [r1]
 8004d1c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004d1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d1e5      	bne.n	8004cf0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	3314      	adds	r3, #20
 8004d2a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d2c:	6a3b      	ldr	r3, [r7, #32]
 8004d2e:	e853 3f00 	ldrex	r3, [r3]
 8004d32:	61fb      	str	r3, [r7, #28]
   return(result);
 8004d34:	69fb      	ldr	r3, [r7, #28]
 8004d36:	f023 0301 	bic.w	r3, r3, #1
 8004d3a:	64bb      	str	r3, [r7, #72]	; 0x48
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	3314      	adds	r3, #20
 8004d42:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004d44:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004d46:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d48:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004d4a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004d4c:	e841 2300 	strex	r3, r2, [r1]
 8004d50:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004d52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d1e5      	bne.n	8004d24 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d5c:	2b01      	cmp	r3, #1
 8004d5e:	d119      	bne.n	8004d94 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	330c      	adds	r3, #12
 8004d66:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	e853 3f00 	ldrex	r3, [r3]
 8004d6e:	60bb      	str	r3, [r7, #8]
   return(result);
 8004d70:	68bb      	ldr	r3, [r7, #8]
 8004d72:	f023 0310 	bic.w	r3, r3, #16
 8004d76:	647b      	str	r3, [r7, #68]	; 0x44
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	330c      	adds	r3, #12
 8004d7e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004d80:	61ba      	str	r2, [r7, #24]
 8004d82:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d84:	6979      	ldr	r1, [r7, #20]
 8004d86:	69ba      	ldr	r2, [r7, #24]
 8004d88:	e841 2300 	strex	r3, r2, [r1]
 8004d8c:	613b      	str	r3, [r7, #16]
   return(result);
 8004d8e:	693b      	ldr	r3, [r7, #16]
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d1e5      	bne.n	8004d60 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	2220      	movs	r2, #32
 8004d98:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	2200      	movs	r2, #0
 8004da0:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004da2:	bf00      	nop
 8004da4:	3754      	adds	r7, #84	; 0x54
 8004da6:	46bd      	mov	sp, r7
 8004da8:	bc80      	pop	{r7}
 8004daa:	4770      	bx	lr

08004dac <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004dac:	b580      	push	{r7, lr}
 8004dae:	b084      	sub	sp, #16
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004db8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	2200      	movs	r2, #0
 8004dbe:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	2200      	movs	r2, #0
 8004dc4:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004dc6:	68f8      	ldr	r0, [r7, #12]
 8004dc8:	f7ff fed3 	bl	8004b72 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004dcc:	bf00      	nop
 8004dce:	3710      	adds	r7, #16
 8004dd0:	46bd      	mov	sp, r7
 8004dd2:	bd80      	pop	{r7, pc}

08004dd4 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004dd4:	b480      	push	{r7}
 8004dd6:	b085      	sub	sp, #20
 8004dd8:	af00      	add	r7, sp, #0
 8004dda:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004de2:	b2db      	uxtb	r3, r3
 8004de4:	2b21      	cmp	r3, #33	; 0x21
 8004de6:	d13e      	bne.n	8004e66 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	689b      	ldr	r3, [r3, #8]
 8004dec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004df0:	d114      	bne.n	8004e1c <UART_Transmit_IT+0x48>
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	691b      	ldr	r3, [r3, #16]
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d110      	bne.n	8004e1c <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	6a1b      	ldr	r3, [r3, #32]
 8004dfe:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	881b      	ldrh	r3, [r3, #0]
 8004e04:	461a      	mov	r2, r3
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004e0e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	6a1b      	ldr	r3, [r3, #32]
 8004e14:	1c9a      	adds	r2, r3, #2
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	621a      	str	r2, [r3, #32]
 8004e1a:	e008      	b.n	8004e2e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	6a1b      	ldr	r3, [r3, #32]
 8004e20:	1c59      	adds	r1, r3, #1
 8004e22:	687a      	ldr	r2, [r7, #4]
 8004e24:	6211      	str	r1, [r2, #32]
 8004e26:	781a      	ldrb	r2, [r3, #0]
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004e32:	b29b      	uxth	r3, r3
 8004e34:	3b01      	subs	r3, #1
 8004e36:	b29b      	uxth	r3, r3
 8004e38:	687a      	ldr	r2, [r7, #4]
 8004e3a:	4619      	mov	r1, r3
 8004e3c:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d10f      	bne.n	8004e62 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	68da      	ldr	r2, [r3, #12]
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004e50:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	68da      	ldr	r2, [r3, #12]
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004e60:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004e62:	2300      	movs	r3, #0
 8004e64:	e000      	b.n	8004e68 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004e66:	2302      	movs	r3, #2
  }
}
 8004e68:	4618      	mov	r0, r3
 8004e6a:	3714      	adds	r7, #20
 8004e6c:	46bd      	mov	sp, r7
 8004e6e:	bc80      	pop	{r7}
 8004e70:	4770      	bx	lr

08004e72 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004e72:	b580      	push	{r7, lr}
 8004e74:	b082      	sub	sp, #8
 8004e76:	af00      	add	r7, sp, #0
 8004e78:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	68da      	ldr	r2, [r3, #12]
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004e88:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	2220      	movs	r2, #32
 8004e8e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004e92:	6878      	ldr	r0, [r7, #4]
 8004e94:	f7ff fe64 	bl	8004b60 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004e98:	2300      	movs	r3, #0
}
 8004e9a:	4618      	mov	r0, r3
 8004e9c:	3708      	adds	r7, #8
 8004e9e:	46bd      	mov	sp, r7
 8004ea0:	bd80      	pop	{r7, pc}

08004ea2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004ea2:	b580      	push	{r7, lr}
 8004ea4:	b08c      	sub	sp, #48	; 0x30
 8004ea6:	af00      	add	r7, sp, #0
 8004ea8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004eb0:	b2db      	uxtb	r3, r3
 8004eb2:	2b22      	cmp	r3, #34	; 0x22
 8004eb4:	f040 80ae 	bne.w	8005014 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	689b      	ldr	r3, [r3, #8]
 8004ebc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ec0:	d117      	bne.n	8004ef2 <UART_Receive_IT+0x50>
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	691b      	ldr	r3, [r3, #16]
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d113      	bne.n	8004ef2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004eca:	2300      	movs	r3, #0
 8004ecc:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ed2:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	685b      	ldr	r3, [r3, #4]
 8004eda:	b29b      	uxth	r3, r3
 8004edc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ee0:	b29a      	uxth	r2, r3
 8004ee2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ee4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004eea:	1c9a      	adds	r2, r3, #2
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	629a      	str	r2, [r3, #40]	; 0x28
 8004ef0:	e026      	b.n	8004f40 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ef6:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8004ef8:	2300      	movs	r3, #0
 8004efa:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	689b      	ldr	r3, [r3, #8]
 8004f00:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f04:	d007      	beq.n	8004f16 <UART_Receive_IT+0x74>
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	689b      	ldr	r3, [r3, #8]
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d10a      	bne.n	8004f24 <UART_Receive_IT+0x82>
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	691b      	ldr	r3, [r3, #16]
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d106      	bne.n	8004f24 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	685b      	ldr	r3, [r3, #4]
 8004f1c:	b2da      	uxtb	r2, r3
 8004f1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f20:	701a      	strb	r2, [r3, #0]
 8004f22:	e008      	b.n	8004f36 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	685b      	ldr	r3, [r3, #4]
 8004f2a:	b2db      	uxtb	r3, r3
 8004f2c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004f30:	b2da      	uxtb	r2, r3
 8004f32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f34:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f3a:	1c5a      	adds	r2, r3, #1
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004f44:	b29b      	uxth	r3, r3
 8004f46:	3b01      	subs	r3, #1
 8004f48:	b29b      	uxth	r3, r3
 8004f4a:	687a      	ldr	r2, [r7, #4]
 8004f4c:	4619      	mov	r1, r3
 8004f4e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d15d      	bne.n	8005010 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	68da      	ldr	r2, [r3, #12]
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	f022 0220 	bic.w	r2, r2, #32
 8004f62:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	68da      	ldr	r2, [r3, #12]
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004f72:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	695a      	ldr	r2, [r3, #20]
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	f022 0201 	bic.w	r2, r2, #1
 8004f82:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	2220      	movs	r2, #32
 8004f88:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	2200      	movs	r2, #0
 8004f90:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f96:	2b01      	cmp	r3, #1
 8004f98:	d135      	bne.n	8005006 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	2200      	movs	r2, #0
 8004f9e:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	330c      	adds	r3, #12
 8004fa6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fa8:	697b      	ldr	r3, [r7, #20]
 8004faa:	e853 3f00 	ldrex	r3, [r3]
 8004fae:	613b      	str	r3, [r7, #16]
   return(result);
 8004fb0:	693b      	ldr	r3, [r7, #16]
 8004fb2:	f023 0310 	bic.w	r3, r3, #16
 8004fb6:	627b      	str	r3, [r7, #36]	; 0x24
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	330c      	adds	r3, #12
 8004fbe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004fc0:	623a      	str	r2, [r7, #32]
 8004fc2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fc4:	69f9      	ldr	r1, [r7, #28]
 8004fc6:	6a3a      	ldr	r2, [r7, #32]
 8004fc8:	e841 2300 	strex	r3, r2, [r1]
 8004fcc:	61bb      	str	r3, [r7, #24]
   return(result);
 8004fce:	69bb      	ldr	r3, [r7, #24]
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d1e5      	bne.n	8004fa0 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	f003 0310 	and.w	r3, r3, #16
 8004fde:	2b10      	cmp	r3, #16
 8004fe0:	d10a      	bne.n	8004ff8 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004fe2:	2300      	movs	r3, #0
 8004fe4:	60fb      	str	r3, [r7, #12]
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	60fb      	str	r3, [r7, #12]
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	685b      	ldr	r3, [r3, #4]
 8004ff4:	60fb      	str	r3, [r7, #12]
 8004ff6:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004ffc:	4619      	mov	r1, r3
 8004ffe:	6878      	ldr	r0, [r7, #4]
 8005000:	f7ff fdc0 	bl	8004b84 <HAL_UARTEx_RxEventCallback>
 8005004:	e002      	b.n	800500c <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005006:	6878      	ldr	r0, [r7, #4]
 8005008:	f7fb fdce 	bl	8000ba8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800500c:	2300      	movs	r3, #0
 800500e:	e002      	b.n	8005016 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8005010:	2300      	movs	r3, #0
 8005012:	e000      	b.n	8005016 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8005014:	2302      	movs	r3, #2
  }
}
 8005016:	4618      	mov	r0, r3
 8005018:	3730      	adds	r7, #48	; 0x30
 800501a:	46bd      	mov	sp, r7
 800501c:	bd80      	pop	{r7, pc}
	...

08005020 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005020:	b580      	push	{r7, lr}
 8005022:	b084      	sub	sp, #16
 8005024:	af00      	add	r7, sp, #0
 8005026:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	691b      	ldr	r3, [r3, #16]
 800502e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	68da      	ldr	r2, [r3, #12]
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	430a      	orrs	r2, r1
 800503c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	689a      	ldr	r2, [r3, #8]
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	691b      	ldr	r3, [r3, #16]
 8005046:	431a      	orrs	r2, r3
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	695b      	ldr	r3, [r3, #20]
 800504c:	4313      	orrs	r3, r2
 800504e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	68db      	ldr	r3, [r3, #12]
 8005056:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800505a:	f023 030c 	bic.w	r3, r3, #12
 800505e:	687a      	ldr	r2, [r7, #4]
 8005060:	6812      	ldr	r2, [r2, #0]
 8005062:	68b9      	ldr	r1, [r7, #8]
 8005064:	430b      	orrs	r3, r1
 8005066:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	695b      	ldr	r3, [r3, #20]
 800506e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	699a      	ldr	r2, [r3, #24]
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	430a      	orrs	r2, r1
 800507c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	4a2c      	ldr	r2, [pc, #176]	; (8005134 <UART_SetConfig+0x114>)
 8005084:	4293      	cmp	r3, r2
 8005086:	d103      	bne.n	8005090 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005088:	f7fd fea8 	bl	8002ddc <HAL_RCC_GetPCLK2Freq>
 800508c:	60f8      	str	r0, [r7, #12]
 800508e:	e002      	b.n	8005096 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8005090:	f7fd fe90 	bl	8002db4 <HAL_RCC_GetPCLK1Freq>
 8005094:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005096:	68fa      	ldr	r2, [r7, #12]
 8005098:	4613      	mov	r3, r2
 800509a:	009b      	lsls	r3, r3, #2
 800509c:	4413      	add	r3, r2
 800509e:	009a      	lsls	r2, r3, #2
 80050a0:	441a      	add	r2, r3
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	685b      	ldr	r3, [r3, #4]
 80050a6:	009b      	lsls	r3, r3, #2
 80050a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80050ac:	4a22      	ldr	r2, [pc, #136]	; (8005138 <UART_SetConfig+0x118>)
 80050ae:	fba2 2303 	umull	r2, r3, r2, r3
 80050b2:	095b      	lsrs	r3, r3, #5
 80050b4:	0119      	lsls	r1, r3, #4
 80050b6:	68fa      	ldr	r2, [r7, #12]
 80050b8:	4613      	mov	r3, r2
 80050ba:	009b      	lsls	r3, r3, #2
 80050bc:	4413      	add	r3, r2
 80050be:	009a      	lsls	r2, r3, #2
 80050c0:	441a      	add	r2, r3
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	685b      	ldr	r3, [r3, #4]
 80050c6:	009b      	lsls	r3, r3, #2
 80050c8:	fbb2 f2f3 	udiv	r2, r2, r3
 80050cc:	4b1a      	ldr	r3, [pc, #104]	; (8005138 <UART_SetConfig+0x118>)
 80050ce:	fba3 0302 	umull	r0, r3, r3, r2
 80050d2:	095b      	lsrs	r3, r3, #5
 80050d4:	2064      	movs	r0, #100	; 0x64
 80050d6:	fb00 f303 	mul.w	r3, r0, r3
 80050da:	1ad3      	subs	r3, r2, r3
 80050dc:	011b      	lsls	r3, r3, #4
 80050de:	3332      	adds	r3, #50	; 0x32
 80050e0:	4a15      	ldr	r2, [pc, #84]	; (8005138 <UART_SetConfig+0x118>)
 80050e2:	fba2 2303 	umull	r2, r3, r2, r3
 80050e6:	095b      	lsrs	r3, r3, #5
 80050e8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80050ec:	4419      	add	r1, r3
 80050ee:	68fa      	ldr	r2, [r7, #12]
 80050f0:	4613      	mov	r3, r2
 80050f2:	009b      	lsls	r3, r3, #2
 80050f4:	4413      	add	r3, r2
 80050f6:	009a      	lsls	r2, r3, #2
 80050f8:	441a      	add	r2, r3
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	685b      	ldr	r3, [r3, #4]
 80050fe:	009b      	lsls	r3, r3, #2
 8005100:	fbb2 f2f3 	udiv	r2, r2, r3
 8005104:	4b0c      	ldr	r3, [pc, #48]	; (8005138 <UART_SetConfig+0x118>)
 8005106:	fba3 0302 	umull	r0, r3, r3, r2
 800510a:	095b      	lsrs	r3, r3, #5
 800510c:	2064      	movs	r0, #100	; 0x64
 800510e:	fb00 f303 	mul.w	r3, r0, r3
 8005112:	1ad3      	subs	r3, r2, r3
 8005114:	011b      	lsls	r3, r3, #4
 8005116:	3332      	adds	r3, #50	; 0x32
 8005118:	4a07      	ldr	r2, [pc, #28]	; (8005138 <UART_SetConfig+0x118>)
 800511a:	fba2 2303 	umull	r2, r3, r2, r3
 800511e:	095b      	lsrs	r3, r3, #5
 8005120:	f003 020f 	and.w	r2, r3, #15
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	440a      	add	r2, r1
 800512a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800512c:	bf00      	nop
 800512e:	3710      	adds	r7, #16
 8005130:	46bd      	mov	sp, r7
 8005132:	bd80      	pop	{r7, pc}
 8005134:	40013800 	.word	0x40013800
 8005138:	51eb851f 	.word	0x51eb851f

0800513c <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800513c:	b480      	push	{r7}
 800513e:	b085      	sub	sp, #20
 8005140:	af00      	add	r7, sp, #0
 8005142:	4603      	mov	r3, r0
 8005144:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8005146:	2300      	movs	r3, #0
 8005148:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800514a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800514e:	2b84      	cmp	r3, #132	; 0x84
 8005150:	d005      	beq.n	800515e <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8005152:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	4413      	add	r3, r2
 800515a:	3303      	adds	r3, #3
 800515c:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800515e:	68fb      	ldr	r3, [r7, #12]
}
 8005160:	4618      	mov	r0, r3
 8005162:	3714      	adds	r7, #20
 8005164:	46bd      	mov	sp, r7
 8005166:	bc80      	pop	{r7}
 8005168:	4770      	bx	lr

0800516a <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800516a:	b580      	push	{r7, lr}
 800516c:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800516e:	f000 fc7b 	bl	8005a68 <vTaskStartScheduler>
  
  return osOK;
 8005172:	2300      	movs	r3, #0
}
 8005174:	4618      	mov	r0, r3
 8005176:	bd80      	pop	{r7, pc}

08005178 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8005178:	b5f0      	push	{r4, r5, r6, r7, lr}
 800517a:	b089      	sub	sp, #36	; 0x24
 800517c:	af04      	add	r7, sp, #16
 800517e:	6078      	str	r0, [r7, #4]
 8005180:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	695b      	ldr	r3, [r3, #20]
 8005186:	2b00      	cmp	r3, #0
 8005188:	d020      	beq.n	80051cc <osThreadCreate+0x54>
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	699b      	ldr	r3, [r3, #24]
 800518e:	2b00      	cmp	r3, #0
 8005190:	d01c      	beq.n	80051cc <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	685c      	ldr	r4, [r3, #4]
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	691e      	ldr	r6, [r3, #16]
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80051a4:	4618      	mov	r0, r3
 80051a6:	f7ff ffc9 	bl	800513c <makeFreeRtosPriority>
 80051aa:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	695b      	ldr	r3, [r3, #20]
 80051b0:	687a      	ldr	r2, [r7, #4]
 80051b2:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80051b4:	9202      	str	r2, [sp, #8]
 80051b6:	9301      	str	r3, [sp, #4]
 80051b8:	9100      	str	r1, [sp, #0]
 80051ba:	683b      	ldr	r3, [r7, #0]
 80051bc:	4632      	mov	r2, r6
 80051be:	4629      	mov	r1, r5
 80051c0:	4620      	mov	r0, r4
 80051c2:	f000 fa7c 	bl	80056be <xTaskCreateStatic>
 80051c6:	4603      	mov	r3, r0
 80051c8:	60fb      	str	r3, [r7, #12]
 80051ca:	e01c      	b.n	8005206 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	685c      	ldr	r4, [r3, #4]
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80051d8:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80051e0:	4618      	mov	r0, r3
 80051e2:	f7ff ffab 	bl	800513c <makeFreeRtosPriority>
 80051e6:	4602      	mov	r2, r0
 80051e8:	f107 030c 	add.w	r3, r7, #12
 80051ec:	9301      	str	r3, [sp, #4]
 80051ee:	9200      	str	r2, [sp, #0]
 80051f0:	683b      	ldr	r3, [r7, #0]
 80051f2:	4632      	mov	r2, r6
 80051f4:	4629      	mov	r1, r5
 80051f6:	4620      	mov	r0, r4
 80051f8:	f000 fabd 	bl	8005776 <xTaskCreate>
 80051fc:	4603      	mov	r3, r0
 80051fe:	2b01      	cmp	r3, #1
 8005200:	d001      	beq.n	8005206 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8005202:	2300      	movs	r3, #0
 8005204:	e000      	b.n	8005208 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8005206:	68fb      	ldr	r3, [r7, #12]
}
 8005208:	4618      	mov	r0, r3
 800520a:	3714      	adds	r7, #20
 800520c:	46bd      	mov	sp, r7
 800520e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005210 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8005210:	b580      	push	{r7, lr}
 8005212:	b084      	sub	sp, #16
 8005214:	af00      	add	r7, sp, #0
 8005216:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	2b00      	cmp	r3, #0
 8005220:	d001      	beq.n	8005226 <osDelay+0x16>
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	e000      	b.n	8005228 <osDelay+0x18>
 8005226:	2301      	movs	r3, #1
 8005228:	4618      	mov	r0, r3
 800522a:	f000 fbe9 	bl	8005a00 <vTaskDelay>
  
  return osOK;
 800522e:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8005230:	4618      	mov	r0, r3
 8005232:	3710      	adds	r7, #16
 8005234:	46bd      	mov	sp, r7
 8005236:	bd80      	pop	{r7, pc}

08005238 <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 8005238:	b580      	push	{r7, lr}
 800523a:	b082      	sub	sp, #8
 800523c:	af00      	add	r7, sp, #0
	EventGroup_t *pxEventBits;

		/* Allocate the event group. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) );
 800523e:	201c      	movs	r0, #28
 8005240:	f001 fa0e 	bl	8006660 <pvPortMalloc>
 8005244:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	2b00      	cmp	r3, #0
 800524a:	d00a      	beq.n	8005262 <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	2200      	movs	r2, #0
 8005250:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	3304      	adds	r3, #4
 8005256:	4618      	mov	r0, r3
 8005258:	f000 f982 	bl	8005560 <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	2200      	movs	r2, #0
 8005260:	761a      	strb	r2, [r3, #24]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return ( EventGroupHandle_t ) pxEventBits;
 8005262:	687b      	ldr	r3, [r7, #4]
	}
 8005264:	4618      	mov	r0, r3
 8005266:	3708      	adds	r7, #8
 8005268:	46bd      	mov	sp, r7
 800526a:	bd80      	pop	{r7, pc}

0800526c <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 800526c:	b580      	push	{r7, lr}
 800526e:	b090      	sub	sp, #64	; 0x40
 8005270:	af00      	add	r7, sp, #0
 8005272:	60f8      	str	r0, [r7, #12]
 8005274:	60b9      	str	r1, [r7, #8]
 8005276:	607a      	str	r2, [r7, #4]
 8005278:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	637b      	str	r3, [r7, #52]	; 0x34
EventBits_t uxReturn, uxControlBits = 0;
 800527e:	2300      	movs	r3, #0
 8005280:	63bb      	str	r3, [r7, #56]	; 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 8005282:	2300      	movs	r3, #0
 8005284:	633b      	str	r3, [r7, #48]	; 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	2b00      	cmp	r3, #0
 800528a:	d10a      	bne.n	80052a2 <xEventGroupWaitBits+0x36>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800528c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005290:	f383 8811 	msr	BASEPRI, r3
 8005294:	f3bf 8f6f 	isb	sy
 8005298:	f3bf 8f4f 	dsb	sy
 800529c:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800529e:	bf00      	nop
 80052a0:	e7fe      	b.n	80052a0 <xEventGroupWaitBits+0x34>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 80052a2:	68bb      	ldr	r3, [r7, #8]
 80052a4:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d00a      	beq.n	80052c2 <xEventGroupWaitBits+0x56>
	__asm volatile
 80052ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052b0:	f383 8811 	msr	BASEPRI, r3
 80052b4:	f3bf 8f6f 	isb	sy
 80052b8:	f3bf 8f4f 	dsb	sy
 80052bc:	61fb      	str	r3, [r7, #28]
}
 80052be:	bf00      	nop
 80052c0:	e7fe      	b.n	80052c0 <xEventGroupWaitBits+0x54>
	configASSERT( uxBitsToWaitFor != 0 );
 80052c2:	68bb      	ldr	r3, [r7, #8]
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d10a      	bne.n	80052de <xEventGroupWaitBits+0x72>
	__asm volatile
 80052c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052cc:	f383 8811 	msr	BASEPRI, r3
 80052d0:	f3bf 8f6f 	isb	sy
 80052d4:	f3bf 8f4f 	dsb	sy
 80052d8:	61bb      	str	r3, [r7, #24]
}
 80052da:	bf00      	nop
 80052dc:	e7fe      	b.n	80052dc <xEventGroupWaitBits+0x70>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80052de:	f000 ff73 	bl	80061c8 <xTaskGetSchedulerState>
 80052e2:	4603      	mov	r3, r0
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d102      	bne.n	80052ee <xEventGroupWaitBits+0x82>
 80052e8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d101      	bne.n	80052f2 <xEventGroupWaitBits+0x86>
 80052ee:	2301      	movs	r3, #1
 80052f0:	e000      	b.n	80052f4 <xEventGroupWaitBits+0x88>
 80052f2:	2300      	movs	r3, #0
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d10a      	bne.n	800530e <xEventGroupWaitBits+0xa2>
	__asm volatile
 80052f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052fc:	f383 8811 	msr	BASEPRI, r3
 8005300:	f3bf 8f6f 	isb	sy
 8005304:	f3bf 8f4f 	dsb	sy
 8005308:	617b      	str	r3, [r7, #20]
}
 800530a:	bf00      	nop
 800530c:	e7fe      	b.n	800530c <xEventGroupWaitBits+0xa0>
	}
	#endif

	vTaskSuspendAll();
 800530e:	f000 fc15 	bl	8005b3c <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 8005312:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 8005318:	683a      	ldr	r2, [r7, #0]
 800531a:	68b9      	ldr	r1, [r7, #8]
 800531c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800531e:	f000 f8fe 	bl	800551e <prvTestWaitCondition>
 8005322:	62b8      	str	r0, [r7, #40]	; 0x28

		if( xWaitConditionMet != pdFALSE )
 8005324:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005326:	2b00      	cmp	r3, #0
 8005328:	d00e      	beq.n	8005348 <xEventGroupWaitBits+0xdc>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 800532a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800532c:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTicksToWait = ( TickType_t ) 0;
 800532e:	2300      	movs	r3, #0
 8005330:	64bb      	str	r3, [r7, #72]	; 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	2b00      	cmp	r3, #0
 8005336:	d028      	beq.n	800538a <xEventGroupWaitBits+0x11e>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8005338:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800533a:	681a      	ldr	r2, [r3, #0]
 800533c:	68bb      	ldr	r3, [r7, #8]
 800533e:	43db      	mvns	r3, r3
 8005340:	401a      	ands	r2, r3
 8005342:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005344:	601a      	str	r2, [r3, #0]
 8005346:	e020      	b.n	800538a <xEventGroupWaitBits+0x11e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 8005348:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800534a:	2b00      	cmp	r3, #0
 800534c:	d104      	bne.n	8005358 <xEventGroupWaitBits+0xec>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 800534e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005350:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTimeoutOccurred = pdTRUE;
 8005352:	2301      	movs	r3, #1
 8005354:	633b      	str	r3, [r7, #48]	; 0x30
 8005356:	e018      	b.n	800538a <xEventGroupWaitBits+0x11e>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	2b00      	cmp	r3, #0
 800535c:	d003      	beq.n	8005366 <xEventGroupWaitBits+0xfa>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 800535e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005360:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005364:	63bb      	str	r3, [r7, #56]	; 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 8005366:	683b      	ldr	r3, [r7, #0]
 8005368:	2b00      	cmp	r3, #0
 800536a:	d003      	beq.n	8005374 <xEventGroupWaitBits+0x108>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 800536c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800536e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005372:	63bb      	str	r3, [r7, #56]	; 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 8005374:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005376:	1d18      	adds	r0, r3, #4
 8005378:	68ba      	ldr	r2, [r7, #8]
 800537a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800537c:	4313      	orrs	r3, r2
 800537e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005380:	4619      	mov	r1, r3
 8005382:	f000 fda5 	bl	8005ed0 <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 8005386:	2300      	movs	r3, #0
 8005388:	63fb      	str	r3, [r7, #60]	; 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 800538a:	f000 fbe5 	bl	8005b58 <xTaskResumeAll>
 800538e:	6278      	str	r0, [r7, #36]	; 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 8005390:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005392:	2b00      	cmp	r3, #0
 8005394:	d031      	beq.n	80053fa <xEventGroupWaitBits+0x18e>
	{
		if( xAlreadyYielded == pdFALSE )
 8005396:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005398:	2b00      	cmp	r3, #0
 800539a:	d107      	bne.n	80053ac <xEventGroupWaitBits+0x140>
		{
			portYIELD_WITHIN_API();
 800539c:	4b19      	ldr	r3, [pc, #100]	; (8005404 <xEventGroupWaitBits+0x198>)
 800539e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80053a2:	601a      	str	r2, [r3, #0]
 80053a4:	f3bf 8f4f 	dsb	sy
 80053a8:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 80053ac:	f000 ff2a 	bl	8006204 <uxTaskResetEventItemValue>
 80053b0:	63f8      	str	r0, [r7, #60]	; 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 80053b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80053b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d11a      	bne.n	80053f2 <xEventGroupWaitBits+0x186>
		{
			taskENTER_CRITICAL();
 80053bc:	f001 f88e 	bl	80064dc <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 80053c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	63fb      	str	r3, [r7, #60]	; 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 80053c6:	683a      	ldr	r2, [r7, #0]
 80053c8:	68b9      	ldr	r1, [r7, #8]
 80053ca:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80053cc:	f000 f8a7 	bl	800551e <prvTestWaitCondition>
 80053d0:	4603      	mov	r3, r0
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d009      	beq.n	80053ea <xEventGroupWaitBits+0x17e>
				{
					if( xClearOnExit != pdFALSE )
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d006      	beq.n	80053ea <xEventGroupWaitBits+0x17e>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 80053dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053de:	681a      	ldr	r2, [r3, #0]
 80053e0:	68bb      	ldr	r3, [r7, #8]
 80053e2:	43db      	mvns	r3, r3
 80053e4:	401a      	ands	r2, r3
 80053e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053e8:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 80053ea:	2301      	movs	r3, #1
 80053ec:	633b      	str	r3, [r7, #48]	; 0x30
			}
			taskEXIT_CRITICAL();
 80053ee:	f001 f8a5 	bl	800653c <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 80053f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80053f4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80053f8:	63fb      	str	r3, [r7, #60]	; 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 80053fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80053fc:	4618      	mov	r0, r3
 80053fe:	3740      	adds	r7, #64	; 0x40
 8005400:	46bd      	mov	sp, r7
 8005402:	bd80      	pop	{r7, pc}
 8005404:	e000ed04 	.word	0xe000ed04

08005408 <xEventGroupSetBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 8005408:	b580      	push	{r7, lr}
 800540a:	b08e      	sub	sp, #56	; 0x38
 800540c:	af00      	add	r7, sp, #0
 800540e:	6078      	str	r0, [r7, #4]
 8005410:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t *pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 8005412:	2300      	movs	r3, #0
 8005414:	633b      	str	r3, [r7, #48]	; 0x30
EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	62bb      	str	r3, [r7, #40]	; 0x28
BaseType_t xMatchFound = pdFALSE;
 800541a:	2300      	movs	r3, #0
 800541c:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	2b00      	cmp	r3, #0
 8005422:	d10a      	bne.n	800543a <xEventGroupSetBits+0x32>
	__asm volatile
 8005424:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005428:	f383 8811 	msr	BASEPRI, r3
 800542c:	f3bf 8f6f 	isb	sy
 8005430:	f3bf 8f4f 	dsb	sy
 8005434:	613b      	str	r3, [r7, #16]
}
 8005436:	bf00      	nop
 8005438:	e7fe      	b.n	8005438 <xEventGroupSetBits+0x30>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 800543a:	683b      	ldr	r3, [r7, #0]
 800543c:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8005440:	2b00      	cmp	r3, #0
 8005442:	d00a      	beq.n	800545a <xEventGroupSetBits+0x52>
	__asm volatile
 8005444:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005448:	f383 8811 	msr	BASEPRI, r3
 800544c:	f3bf 8f6f 	isb	sy
 8005450:	f3bf 8f4f 	dsb	sy
 8005454:	60fb      	str	r3, [r7, #12]
}
 8005456:	bf00      	nop
 8005458:	e7fe      	b.n	8005458 <xEventGroupSetBits+0x50>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 800545a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800545c:	3304      	adds	r3, #4
 800545e:	627b      	str	r3, [r7, #36]	; 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005462:	3308      	adds	r3, #8
 8005464:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 8005466:	f000 fb69 	bl	8005b3c <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 800546a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800546c:	68db      	ldr	r3, [r3, #12]
 800546e:	637b      	str	r3, [r7, #52]	; 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 8005470:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005472:	681a      	ldr	r2, [r3, #0]
 8005474:	683b      	ldr	r3, [r7, #0]
 8005476:	431a      	orrs	r2, r3
 8005478:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800547a:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 800547c:	e03c      	b.n	80054f8 <xEventGroupSetBits+0xf0>
		{
			pxNext = listGET_NEXT( pxListItem );
 800547e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005480:	685b      	ldr	r3, [r3, #4]
 8005482:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 8005484:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 800548a:	2300      	movs	r3, #0
 800548c:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 800548e:	69bb      	ldr	r3, [r7, #24]
 8005490:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8005494:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 8005496:	69bb      	ldr	r3, [r7, #24]
 8005498:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800549c:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 800549e:	697b      	ldr	r3, [r7, #20]
 80054a0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d108      	bne.n	80054ba <xEventGroupSetBits+0xb2>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 80054a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054aa:	681a      	ldr	r2, [r3, #0]
 80054ac:	69bb      	ldr	r3, [r7, #24]
 80054ae:	4013      	ands	r3, r2
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d00b      	beq.n	80054cc <xEventGroupSetBits+0xc4>
				{
					xMatchFound = pdTRUE;
 80054b4:	2301      	movs	r3, #1
 80054b6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80054b8:	e008      	b.n	80054cc <xEventGroupSetBits+0xc4>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 80054ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054bc:	681a      	ldr	r2, [r3, #0]
 80054be:	69bb      	ldr	r3, [r7, #24]
 80054c0:	4013      	ands	r3, r2
 80054c2:	69ba      	ldr	r2, [r7, #24]
 80054c4:	429a      	cmp	r2, r3
 80054c6:	d101      	bne.n	80054cc <xEventGroupSetBits+0xc4>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 80054c8:	2301      	movs	r3, #1
 80054ca:	62fb      	str	r3, [r7, #44]	; 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 80054cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d010      	beq.n	80054f4 <xEventGroupSetBits+0xec>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 80054d2:	697b      	ldr	r3, [r7, #20]
 80054d4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d003      	beq.n	80054e4 <xEventGroupSetBits+0xdc>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 80054dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80054de:	69bb      	ldr	r3, [r7, #24]
 80054e0:	4313      	orrs	r3, r2
 80054e2:	633b      	str	r3, [r7, #48]	; 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 80054e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80054ec:	4619      	mov	r1, r3
 80054ee:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80054f0:	f000 fd2a 	bl	8005f48 <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 80054f4:	69fb      	ldr	r3, [r7, #28]
 80054f6:	637b      	str	r3, [r7, #52]	; 0x34
		while( pxListItem != pxListEnd )
 80054f8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80054fa:	6a3b      	ldr	r3, [r7, #32]
 80054fc:	429a      	cmp	r2, r3
 80054fe:	d1be      	bne.n	800547e <xEventGroupSetBits+0x76>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 8005500:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005502:	681a      	ldr	r2, [r3, #0]
 8005504:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005506:	43db      	mvns	r3, r3
 8005508:	401a      	ands	r2, r3
 800550a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800550c:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 800550e:	f000 fb23 	bl	8005b58 <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 8005512:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005514:	681b      	ldr	r3, [r3, #0]
}
 8005516:	4618      	mov	r0, r3
 8005518:	3738      	adds	r7, #56	; 0x38
 800551a:	46bd      	mov	sp, r7
 800551c:	bd80      	pop	{r7, pc}

0800551e <prvTestWaitCondition>:
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear );
}
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 800551e:	b480      	push	{r7}
 8005520:	b087      	sub	sp, #28
 8005522:	af00      	add	r7, sp, #0
 8005524:	60f8      	str	r0, [r7, #12]
 8005526:	60b9      	str	r1, [r7, #8]
 8005528:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 800552a:	2300      	movs	r3, #0
 800552c:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	2b00      	cmp	r3, #0
 8005532:	d107      	bne.n	8005544 <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 8005534:	68fa      	ldr	r2, [r7, #12]
 8005536:	68bb      	ldr	r3, [r7, #8]
 8005538:	4013      	ands	r3, r2
 800553a:	2b00      	cmp	r3, #0
 800553c:	d00a      	beq.n	8005554 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 800553e:	2301      	movs	r3, #1
 8005540:	617b      	str	r3, [r7, #20]
 8005542:	e007      	b.n	8005554 <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 8005544:	68fa      	ldr	r2, [r7, #12]
 8005546:	68bb      	ldr	r3, [r7, #8]
 8005548:	4013      	ands	r3, r2
 800554a:	68ba      	ldr	r2, [r7, #8]
 800554c:	429a      	cmp	r2, r3
 800554e:	d101      	bne.n	8005554 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8005550:	2301      	movs	r3, #1
 8005552:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 8005554:	697b      	ldr	r3, [r7, #20]
}
 8005556:	4618      	mov	r0, r3
 8005558:	371c      	adds	r7, #28
 800555a:	46bd      	mov	sp, r7
 800555c:	bc80      	pop	{r7}
 800555e:	4770      	bx	lr

08005560 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005560:	b480      	push	{r7}
 8005562:	b083      	sub	sp, #12
 8005564:	af00      	add	r7, sp, #0
 8005566:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	f103 0208 	add.w	r2, r3, #8
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	f04f 32ff 	mov.w	r2, #4294967295
 8005578:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	f103 0208 	add.w	r2, r3, #8
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	f103 0208 	add.w	r2, r3, #8
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	2200      	movs	r2, #0
 8005592:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005594:	bf00      	nop
 8005596:	370c      	adds	r7, #12
 8005598:	46bd      	mov	sp, r7
 800559a:	bc80      	pop	{r7}
 800559c:	4770      	bx	lr

0800559e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800559e:	b480      	push	{r7}
 80055a0:	b083      	sub	sp, #12
 80055a2:	af00      	add	r7, sp, #0
 80055a4:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	2200      	movs	r2, #0
 80055aa:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80055ac:	bf00      	nop
 80055ae:	370c      	adds	r7, #12
 80055b0:	46bd      	mov	sp, r7
 80055b2:	bc80      	pop	{r7}
 80055b4:	4770      	bx	lr

080055b6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80055b6:	b480      	push	{r7}
 80055b8:	b085      	sub	sp, #20
 80055ba:	af00      	add	r7, sp, #0
 80055bc:	6078      	str	r0, [r7, #4]
 80055be:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	685b      	ldr	r3, [r3, #4]
 80055c4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80055c6:	683b      	ldr	r3, [r7, #0]
 80055c8:	68fa      	ldr	r2, [r7, #12]
 80055ca:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	689a      	ldr	r2, [r3, #8]
 80055d0:	683b      	ldr	r3, [r7, #0]
 80055d2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	689b      	ldr	r3, [r3, #8]
 80055d8:	683a      	ldr	r2, [r7, #0]
 80055da:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	683a      	ldr	r2, [r7, #0]
 80055e0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80055e2:	683b      	ldr	r3, [r7, #0]
 80055e4:	687a      	ldr	r2, [r7, #4]
 80055e6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	1c5a      	adds	r2, r3, #1
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	601a      	str	r2, [r3, #0]
}
 80055f2:	bf00      	nop
 80055f4:	3714      	adds	r7, #20
 80055f6:	46bd      	mov	sp, r7
 80055f8:	bc80      	pop	{r7}
 80055fa:	4770      	bx	lr

080055fc <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80055fc:	b480      	push	{r7}
 80055fe:	b085      	sub	sp, #20
 8005600:	af00      	add	r7, sp, #0
 8005602:	6078      	str	r0, [r7, #4]
 8005604:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005606:	683b      	ldr	r3, [r7, #0]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800560c:	68bb      	ldr	r3, [r7, #8]
 800560e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005612:	d103      	bne.n	800561c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	691b      	ldr	r3, [r3, #16]
 8005618:	60fb      	str	r3, [r7, #12]
 800561a:	e00c      	b.n	8005636 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	3308      	adds	r3, #8
 8005620:	60fb      	str	r3, [r7, #12]
 8005622:	e002      	b.n	800562a <vListInsert+0x2e>
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	685b      	ldr	r3, [r3, #4]
 8005628:	60fb      	str	r3, [r7, #12]
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	685b      	ldr	r3, [r3, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	68ba      	ldr	r2, [r7, #8]
 8005632:	429a      	cmp	r2, r3
 8005634:	d2f6      	bcs.n	8005624 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	685a      	ldr	r2, [r3, #4]
 800563a:	683b      	ldr	r3, [r7, #0]
 800563c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800563e:	683b      	ldr	r3, [r7, #0]
 8005640:	685b      	ldr	r3, [r3, #4]
 8005642:	683a      	ldr	r2, [r7, #0]
 8005644:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005646:	683b      	ldr	r3, [r7, #0]
 8005648:	68fa      	ldr	r2, [r7, #12]
 800564a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	683a      	ldr	r2, [r7, #0]
 8005650:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8005652:	683b      	ldr	r3, [r7, #0]
 8005654:	687a      	ldr	r2, [r7, #4]
 8005656:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	1c5a      	adds	r2, r3, #1
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	601a      	str	r2, [r3, #0]
}
 8005662:	bf00      	nop
 8005664:	3714      	adds	r7, #20
 8005666:	46bd      	mov	sp, r7
 8005668:	bc80      	pop	{r7}
 800566a:	4770      	bx	lr

0800566c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800566c:	b480      	push	{r7}
 800566e:	b085      	sub	sp, #20
 8005670:	af00      	add	r7, sp, #0
 8005672:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	691b      	ldr	r3, [r3, #16]
 8005678:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	685b      	ldr	r3, [r3, #4]
 800567e:	687a      	ldr	r2, [r7, #4]
 8005680:	6892      	ldr	r2, [r2, #8]
 8005682:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	689b      	ldr	r3, [r3, #8]
 8005688:	687a      	ldr	r2, [r7, #4]
 800568a:	6852      	ldr	r2, [r2, #4]
 800568c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	685b      	ldr	r3, [r3, #4]
 8005692:	687a      	ldr	r2, [r7, #4]
 8005694:	429a      	cmp	r2, r3
 8005696:	d103      	bne.n	80056a0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	689a      	ldr	r2, [r3, #8]
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	2200      	movs	r2, #0
 80056a4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	1e5a      	subs	r2, r3, #1
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	681b      	ldr	r3, [r3, #0]
}
 80056b4:	4618      	mov	r0, r3
 80056b6:	3714      	adds	r7, #20
 80056b8:	46bd      	mov	sp, r7
 80056ba:	bc80      	pop	{r7}
 80056bc:	4770      	bx	lr

080056be <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80056be:	b580      	push	{r7, lr}
 80056c0:	b08e      	sub	sp, #56	; 0x38
 80056c2:	af04      	add	r7, sp, #16
 80056c4:	60f8      	str	r0, [r7, #12]
 80056c6:	60b9      	str	r1, [r7, #8]
 80056c8:	607a      	str	r2, [r7, #4]
 80056ca:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80056cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d10a      	bne.n	80056e8 <xTaskCreateStatic+0x2a>
	__asm volatile
 80056d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056d6:	f383 8811 	msr	BASEPRI, r3
 80056da:	f3bf 8f6f 	isb	sy
 80056de:	f3bf 8f4f 	dsb	sy
 80056e2:	623b      	str	r3, [r7, #32]
}
 80056e4:	bf00      	nop
 80056e6:	e7fe      	b.n	80056e6 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80056e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d10a      	bne.n	8005704 <xTaskCreateStatic+0x46>
	__asm volatile
 80056ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056f2:	f383 8811 	msr	BASEPRI, r3
 80056f6:	f3bf 8f6f 	isb	sy
 80056fa:	f3bf 8f4f 	dsb	sy
 80056fe:	61fb      	str	r3, [r7, #28]
}
 8005700:	bf00      	nop
 8005702:	e7fe      	b.n	8005702 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005704:	23a0      	movs	r3, #160	; 0xa0
 8005706:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005708:	693b      	ldr	r3, [r7, #16]
 800570a:	2ba0      	cmp	r3, #160	; 0xa0
 800570c:	d00a      	beq.n	8005724 <xTaskCreateStatic+0x66>
	__asm volatile
 800570e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005712:	f383 8811 	msr	BASEPRI, r3
 8005716:	f3bf 8f6f 	isb	sy
 800571a:	f3bf 8f4f 	dsb	sy
 800571e:	61bb      	str	r3, [r7, #24]
}
 8005720:	bf00      	nop
 8005722:	e7fe      	b.n	8005722 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005724:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005726:	2b00      	cmp	r3, #0
 8005728:	d01e      	beq.n	8005768 <xTaskCreateStatic+0xaa>
 800572a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800572c:	2b00      	cmp	r3, #0
 800572e:	d01b      	beq.n	8005768 <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005730:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005732:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005736:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005738:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800573a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800573c:	2202      	movs	r2, #2
 800573e:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005742:	2300      	movs	r3, #0
 8005744:	9303      	str	r3, [sp, #12]
 8005746:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005748:	9302      	str	r3, [sp, #8]
 800574a:	f107 0314 	add.w	r3, r7, #20
 800574e:	9301      	str	r3, [sp, #4]
 8005750:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005752:	9300      	str	r3, [sp, #0]
 8005754:	683b      	ldr	r3, [r7, #0]
 8005756:	687a      	ldr	r2, [r7, #4]
 8005758:	68b9      	ldr	r1, [r7, #8]
 800575a:	68f8      	ldr	r0, [r7, #12]
 800575c:	f000 f850 	bl	8005800 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005760:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005762:	f000 f8e3 	bl	800592c <prvAddNewTaskToReadyList>
 8005766:	e001      	b.n	800576c <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 8005768:	2300      	movs	r3, #0
 800576a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800576c:	697b      	ldr	r3, [r7, #20]
	}
 800576e:	4618      	mov	r0, r3
 8005770:	3728      	adds	r7, #40	; 0x28
 8005772:	46bd      	mov	sp, r7
 8005774:	bd80      	pop	{r7, pc}

08005776 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005776:	b580      	push	{r7, lr}
 8005778:	b08c      	sub	sp, #48	; 0x30
 800577a:	af04      	add	r7, sp, #16
 800577c:	60f8      	str	r0, [r7, #12]
 800577e:	60b9      	str	r1, [r7, #8]
 8005780:	603b      	str	r3, [r7, #0]
 8005782:	4613      	mov	r3, r2
 8005784:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005786:	88fb      	ldrh	r3, [r7, #6]
 8005788:	009b      	lsls	r3, r3, #2
 800578a:	4618      	mov	r0, r3
 800578c:	f000 ff68 	bl	8006660 <pvPortMalloc>
 8005790:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005792:	697b      	ldr	r3, [r7, #20]
 8005794:	2b00      	cmp	r3, #0
 8005796:	d00e      	beq.n	80057b6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8005798:	20a0      	movs	r0, #160	; 0xa0
 800579a:	f000 ff61 	bl	8006660 <pvPortMalloc>
 800579e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80057a0:	69fb      	ldr	r3, [r7, #28]
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d003      	beq.n	80057ae <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80057a6:	69fb      	ldr	r3, [r7, #28]
 80057a8:	697a      	ldr	r2, [r7, #20]
 80057aa:	631a      	str	r2, [r3, #48]	; 0x30
 80057ac:	e005      	b.n	80057ba <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80057ae:	6978      	ldr	r0, [r7, #20]
 80057b0:	f001 f81a 	bl	80067e8 <vPortFree>
 80057b4:	e001      	b.n	80057ba <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80057b6:	2300      	movs	r3, #0
 80057b8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80057ba:	69fb      	ldr	r3, [r7, #28]
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d017      	beq.n	80057f0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80057c0:	69fb      	ldr	r3, [r7, #28]
 80057c2:	2200      	movs	r2, #0
 80057c4:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80057c8:	88fa      	ldrh	r2, [r7, #6]
 80057ca:	2300      	movs	r3, #0
 80057cc:	9303      	str	r3, [sp, #12]
 80057ce:	69fb      	ldr	r3, [r7, #28]
 80057d0:	9302      	str	r3, [sp, #8]
 80057d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057d4:	9301      	str	r3, [sp, #4]
 80057d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057d8:	9300      	str	r3, [sp, #0]
 80057da:	683b      	ldr	r3, [r7, #0]
 80057dc:	68b9      	ldr	r1, [r7, #8]
 80057de:	68f8      	ldr	r0, [r7, #12]
 80057e0:	f000 f80e 	bl	8005800 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80057e4:	69f8      	ldr	r0, [r7, #28]
 80057e6:	f000 f8a1 	bl	800592c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80057ea:	2301      	movs	r3, #1
 80057ec:	61bb      	str	r3, [r7, #24]
 80057ee:	e002      	b.n	80057f6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80057f0:	f04f 33ff 	mov.w	r3, #4294967295
 80057f4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80057f6:	69bb      	ldr	r3, [r7, #24]
	}
 80057f8:	4618      	mov	r0, r3
 80057fa:	3720      	adds	r7, #32
 80057fc:	46bd      	mov	sp, r7
 80057fe:	bd80      	pop	{r7, pc}

08005800 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005800:	b580      	push	{r7, lr}
 8005802:	b088      	sub	sp, #32
 8005804:	af00      	add	r7, sp, #0
 8005806:	60f8      	str	r0, [r7, #12]
 8005808:	60b9      	str	r1, [r7, #8]
 800580a:	607a      	str	r2, [r7, #4]
 800580c:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800580e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005810:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005818:	3b01      	subs	r3, #1
 800581a:	009b      	lsls	r3, r3, #2
 800581c:	4413      	add	r3, r2
 800581e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8005820:	69bb      	ldr	r3, [r7, #24]
 8005822:	f023 0307 	bic.w	r3, r3, #7
 8005826:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005828:	69bb      	ldr	r3, [r7, #24]
 800582a:	f003 0307 	and.w	r3, r3, #7
 800582e:	2b00      	cmp	r3, #0
 8005830:	d00a      	beq.n	8005848 <prvInitialiseNewTask+0x48>
	__asm volatile
 8005832:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005836:	f383 8811 	msr	BASEPRI, r3
 800583a:	f3bf 8f6f 	isb	sy
 800583e:	f3bf 8f4f 	dsb	sy
 8005842:	617b      	str	r3, [r7, #20]
}
 8005844:	bf00      	nop
 8005846:	e7fe      	b.n	8005846 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005848:	2300      	movs	r3, #0
 800584a:	61fb      	str	r3, [r7, #28]
 800584c:	e012      	b.n	8005874 <prvInitialiseNewTask+0x74>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800584e:	68ba      	ldr	r2, [r7, #8]
 8005850:	69fb      	ldr	r3, [r7, #28]
 8005852:	4413      	add	r3, r2
 8005854:	7819      	ldrb	r1, [r3, #0]
 8005856:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005858:	69fb      	ldr	r3, [r7, #28]
 800585a:	4413      	add	r3, r2
 800585c:	3334      	adds	r3, #52	; 0x34
 800585e:	460a      	mov	r2, r1
 8005860:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8005862:	68ba      	ldr	r2, [r7, #8]
 8005864:	69fb      	ldr	r3, [r7, #28]
 8005866:	4413      	add	r3, r2
 8005868:	781b      	ldrb	r3, [r3, #0]
 800586a:	2b00      	cmp	r3, #0
 800586c:	d006      	beq.n	800587c <prvInitialiseNewTask+0x7c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800586e:	69fb      	ldr	r3, [r7, #28]
 8005870:	3301      	adds	r3, #1
 8005872:	61fb      	str	r3, [r7, #28]
 8005874:	69fb      	ldr	r3, [r7, #28]
 8005876:	2b0f      	cmp	r3, #15
 8005878:	d9e9      	bls.n	800584e <prvInitialiseNewTask+0x4e>
 800587a:	e000      	b.n	800587e <prvInitialiseNewTask+0x7e>
		{
			break;
 800587c:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800587e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005880:	2200      	movs	r2, #0
 8005882:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005886:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005888:	2b06      	cmp	r3, #6
 800588a:	d901      	bls.n	8005890 <prvInitialiseNewTask+0x90>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800588c:	2306      	movs	r3, #6
 800588e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005890:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005892:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005894:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005896:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005898:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800589a:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800589c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800589e:	2200      	movs	r2, #0
 80058a0:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80058a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058a4:	3304      	adds	r3, #4
 80058a6:	4618      	mov	r0, r3
 80058a8:	f7ff fe79 	bl	800559e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80058ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058ae:	3318      	adds	r3, #24
 80058b0:	4618      	mov	r0, r3
 80058b2:	f7ff fe74 	bl	800559e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80058b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80058ba:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80058bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058be:	f1c3 0207 	rsb	r2, r3, #7
 80058c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058c4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80058c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80058ca:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80058cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058ce:	2200      	movs	r2, #0
 80058d0:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80058d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058d6:	2200      	movs	r2, #0
 80058d8:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80058dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058de:	334c      	adds	r3, #76	; 0x4c
 80058e0:	224c      	movs	r2, #76	; 0x4c
 80058e2:	2100      	movs	r1, #0
 80058e4:	4618      	mov	r0, r3
 80058e6:	f001 f893 	bl	8006a10 <memset>
 80058ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058ec:	4a0c      	ldr	r2, [pc, #48]	; (8005920 <prvInitialiseNewTask+0x120>)
 80058ee:	651a      	str	r2, [r3, #80]	; 0x50
 80058f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058f2:	4a0c      	ldr	r2, [pc, #48]	; (8005924 <prvInitialiseNewTask+0x124>)
 80058f4:	655a      	str	r2, [r3, #84]	; 0x54
 80058f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058f8:	4a0b      	ldr	r2, [pc, #44]	; (8005928 <prvInitialiseNewTask+0x128>)
 80058fa:	659a      	str	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80058fc:	683a      	ldr	r2, [r7, #0]
 80058fe:	68f9      	ldr	r1, [r7, #12]
 8005900:	69b8      	ldr	r0, [r7, #24]
 8005902:	f000 fcfd 	bl	8006300 <pxPortInitialiseStack>
 8005906:	4602      	mov	r2, r0
 8005908:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800590a:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 800590c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800590e:	2b00      	cmp	r3, #0
 8005910:	d002      	beq.n	8005918 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005912:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005914:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005916:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005918:	bf00      	nop
 800591a:	3720      	adds	r7, #32
 800591c:	46bd      	mov	sp, r7
 800591e:	bd80      	pop	{r7, pc}
 8005920:	20001210 	.word	0x20001210
 8005924:	20001278 	.word	0x20001278
 8005928:	200012e0 	.word	0x200012e0

0800592c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800592c:	b580      	push	{r7, lr}
 800592e:	b082      	sub	sp, #8
 8005930:	af00      	add	r7, sp, #0
 8005932:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005934:	f000 fdd2 	bl	80064dc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005938:	4b2a      	ldr	r3, [pc, #168]	; (80059e4 <prvAddNewTaskToReadyList+0xb8>)
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	3301      	adds	r3, #1
 800593e:	4a29      	ldr	r2, [pc, #164]	; (80059e4 <prvAddNewTaskToReadyList+0xb8>)
 8005940:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005942:	4b29      	ldr	r3, [pc, #164]	; (80059e8 <prvAddNewTaskToReadyList+0xbc>)
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	2b00      	cmp	r3, #0
 8005948:	d109      	bne.n	800595e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800594a:	4a27      	ldr	r2, [pc, #156]	; (80059e8 <prvAddNewTaskToReadyList+0xbc>)
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005950:	4b24      	ldr	r3, [pc, #144]	; (80059e4 <prvAddNewTaskToReadyList+0xb8>)
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	2b01      	cmp	r3, #1
 8005956:	d110      	bne.n	800597a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005958:	f000 fb70 	bl	800603c <prvInitialiseTaskLists>
 800595c:	e00d      	b.n	800597a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800595e:	4b23      	ldr	r3, [pc, #140]	; (80059ec <prvAddNewTaskToReadyList+0xc0>)
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	2b00      	cmp	r3, #0
 8005964:	d109      	bne.n	800597a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005966:	4b20      	ldr	r3, [pc, #128]	; (80059e8 <prvAddNewTaskToReadyList+0xbc>)
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005970:	429a      	cmp	r2, r3
 8005972:	d802      	bhi.n	800597a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005974:	4a1c      	ldr	r2, [pc, #112]	; (80059e8 <prvAddNewTaskToReadyList+0xbc>)
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800597a:	4b1d      	ldr	r3, [pc, #116]	; (80059f0 <prvAddNewTaskToReadyList+0xc4>)
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	3301      	adds	r3, #1
 8005980:	4a1b      	ldr	r2, [pc, #108]	; (80059f0 <prvAddNewTaskToReadyList+0xc4>)
 8005982:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005988:	2201      	movs	r2, #1
 800598a:	409a      	lsls	r2, r3
 800598c:	4b19      	ldr	r3, [pc, #100]	; (80059f4 <prvAddNewTaskToReadyList+0xc8>)
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	4313      	orrs	r3, r2
 8005992:	4a18      	ldr	r2, [pc, #96]	; (80059f4 <prvAddNewTaskToReadyList+0xc8>)
 8005994:	6013      	str	r3, [r2, #0]
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800599a:	4613      	mov	r3, r2
 800599c:	009b      	lsls	r3, r3, #2
 800599e:	4413      	add	r3, r2
 80059a0:	009b      	lsls	r3, r3, #2
 80059a2:	4a15      	ldr	r2, [pc, #84]	; (80059f8 <prvAddNewTaskToReadyList+0xcc>)
 80059a4:	441a      	add	r2, r3
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	3304      	adds	r3, #4
 80059aa:	4619      	mov	r1, r3
 80059ac:	4610      	mov	r0, r2
 80059ae:	f7ff fe02 	bl	80055b6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80059b2:	f000 fdc3 	bl	800653c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80059b6:	4b0d      	ldr	r3, [pc, #52]	; (80059ec <prvAddNewTaskToReadyList+0xc0>)
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d00e      	beq.n	80059dc <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80059be:	4b0a      	ldr	r3, [pc, #40]	; (80059e8 <prvAddNewTaskToReadyList+0xbc>)
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059c8:	429a      	cmp	r2, r3
 80059ca:	d207      	bcs.n	80059dc <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80059cc:	4b0b      	ldr	r3, [pc, #44]	; (80059fc <prvAddNewTaskToReadyList+0xd0>)
 80059ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80059d2:	601a      	str	r2, [r3, #0]
 80059d4:	f3bf 8f4f 	dsb	sy
 80059d8:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80059dc:	bf00      	nop
 80059de:	3708      	adds	r7, #8
 80059e0:	46bd      	mov	sp, r7
 80059e2:	bd80      	pop	{r7, pc}
 80059e4:	200005c4 	.word	0x200005c4
 80059e8:	200004c4 	.word	0x200004c4
 80059ec:	200005d0 	.word	0x200005d0
 80059f0:	200005e0 	.word	0x200005e0
 80059f4:	200005cc 	.word	0x200005cc
 80059f8:	200004c8 	.word	0x200004c8
 80059fc:	e000ed04 	.word	0xe000ed04

08005a00 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005a00:	b580      	push	{r7, lr}
 8005a02:	b084      	sub	sp, #16
 8005a04:	af00      	add	r7, sp, #0
 8005a06:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005a08:	2300      	movs	r3, #0
 8005a0a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d017      	beq.n	8005a42 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005a12:	4b13      	ldr	r3, [pc, #76]	; (8005a60 <vTaskDelay+0x60>)
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d00a      	beq.n	8005a30 <vTaskDelay+0x30>
	__asm volatile
 8005a1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a1e:	f383 8811 	msr	BASEPRI, r3
 8005a22:	f3bf 8f6f 	isb	sy
 8005a26:	f3bf 8f4f 	dsb	sy
 8005a2a:	60bb      	str	r3, [r7, #8]
}
 8005a2c:	bf00      	nop
 8005a2e:	e7fe      	b.n	8005a2e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8005a30:	f000 f884 	bl	8005b3c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005a34:	2100      	movs	r1, #0
 8005a36:	6878      	ldr	r0, [r7, #4]
 8005a38:	f000 fbfc 	bl	8006234 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005a3c:	f000 f88c 	bl	8005b58 <xTaskResumeAll>
 8005a40:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d107      	bne.n	8005a58 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8005a48:	4b06      	ldr	r3, [pc, #24]	; (8005a64 <vTaskDelay+0x64>)
 8005a4a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005a4e:	601a      	str	r2, [r3, #0]
 8005a50:	f3bf 8f4f 	dsb	sy
 8005a54:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005a58:	bf00      	nop
 8005a5a:	3710      	adds	r7, #16
 8005a5c:	46bd      	mov	sp, r7
 8005a5e:	bd80      	pop	{r7, pc}
 8005a60:	200005ec 	.word	0x200005ec
 8005a64:	e000ed04 	.word	0xe000ed04

08005a68 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005a68:	b580      	push	{r7, lr}
 8005a6a:	b08a      	sub	sp, #40	; 0x28
 8005a6c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005a6e:	2300      	movs	r3, #0
 8005a70:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005a72:	2300      	movs	r3, #0
 8005a74:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005a76:	463a      	mov	r2, r7
 8005a78:	1d39      	adds	r1, r7, #4
 8005a7a:	f107 0308 	add.w	r3, r7, #8
 8005a7e:	4618      	mov	r0, r3
 8005a80:	f7fb fb5a 	bl	8001138 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005a84:	6839      	ldr	r1, [r7, #0]
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	68ba      	ldr	r2, [r7, #8]
 8005a8a:	9202      	str	r2, [sp, #8]
 8005a8c:	9301      	str	r3, [sp, #4]
 8005a8e:	2300      	movs	r3, #0
 8005a90:	9300      	str	r3, [sp, #0]
 8005a92:	2300      	movs	r3, #0
 8005a94:	460a      	mov	r2, r1
 8005a96:	4921      	ldr	r1, [pc, #132]	; (8005b1c <vTaskStartScheduler+0xb4>)
 8005a98:	4821      	ldr	r0, [pc, #132]	; (8005b20 <vTaskStartScheduler+0xb8>)
 8005a9a:	f7ff fe10 	bl	80056be <xTaskCreateStatic>
 8005a9e:	4603      	mov	r3, r0
 8005aa0:	4a20      	ldr	r2, [pc, #128]	; (8005b24 <vTaskStartScheduler+0xbc>)
 8005aa2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005aa4:	4b1f      	ldr	r3, [pc, #124]	; (8005b24 <vTaskStartScheduler+0xbc>)
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d002      	beq.n	8005ab2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005aac:	2301      	movs	r3, #1
 8005aae:	617b      	str	r3, [r7, #20]
 8005ab0:	e001      	b.n	8005ab6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005ab2:	2300      	movs	r3, #0
 8005ab4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005ab6:	697b      	ldr	r3, [r7, #20]
 8005ab8:	2b01      	cmp	r3, #1
 8005aba:	d11b      	bne.n	8005af4 <vTaskStartScheduler+0x8c>
	__asm volatile
 8005abc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ac0:	f383 8811 	msr	BASEPRI, r3
 8005ac4:	f3bf 8f6f 	isb	sy
 8005ac8:	f3bf 8f4f 	dsb	sy
 8005acc:	613b      	str	r3, [r7, #16]
}
 8005ace:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005ad0:	4b15      	ldr	r3, [pc, #84]	; (8005b28 <vTaskStartScheduler+0xc0>)
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	334c      	adds	r3, #76	; 0x4c
 8005ad6:	4a15      	ldr	r2, [pc, #84]	; (8005b2c <vTaskStartScheduler+0xc4>)
 8005ad8:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005ada:	4b15      	ldr	r3, [pc, #84]	; (8005b30 <vTaskStartScheduler+0xc8>)
 8005adc:	f04f 32ff 	mov.w	r2, #4294967295
 8005ae0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005ae2:	4b14      	ldr	r3, [pc, #80]	; (8005b34 <vTaskStartScheduler+0xcc>)
 8005ae4:	2201      	movs	r2, #1
 8005ae6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8005ae8:	4b13      	ldr	r3, [pc, #76]	; (8005b38 <vTaskStartScheduler+0xd0>)
 8005aea:	2200      	movs	r2, #0
 8005aec:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005aee:	f000 fc83 	bl	80063f8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005af2:	e00e      	b.n	8005b12 <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005af4:	697b      	ldr	r3, [r7, #20]
 8005af6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005afa:	d10a      	bne.n	8005b12 <vTaskStartScheduler+0xaa>
	__asm volatile
 8005afc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b00:	f383 8811 	msr	BASEPRI, r3
 8005b04:	f3bf 8f6f 	isb	sy
 8005b08:	f3bf 8f4f 	dsb	sy
 8005b0c:	60fb      	str	r3, [r7, #12]
}
 8005b0e:	bf00      	nop
 8005b10:	e7fe      	b.n	8005b10 <vTaskStartScheduler+0xa8>
}
 8005b12:	bf00      	nop
 8005b14:	3718      	adds	r7, #24
 8005b16:	46bd      	mov	sp, r7
 8005b18:	bd80      	pop	{r7, pc}
 8005b1a:	bf00      	nop
 8005b1c:	08006c24 	.word	0x08006c24
 8005b20:	0800600d 	.word	0x0800600d
 8005b24:	200005e8 	.word	0x200005e8
 8005b28:	200004c4 	.word	0x200004c4
 8005b2c:	20000060 	.word	0x20000060
 8005b30:	200005e4 	.word	0x200005e4
 8005b34:	200005d0 	.word	0x200005d0
 8005b38:	200005c8 	.word	0x200005c8

08005b3c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005b3c:	b480      	push	{r7}
 8005b3e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8005b40:	4b04      	ldr	r3, [pc, #16]	; (8005b54 <vTaskSuspendAll+0x18>)
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	3301      	adds	r3, #1
 8005b46:	4a03      	ldr	r2, [pc, #12]	; (8005b54 <vTaskSuspendAll+0x18>)
 8005b48:	6013      	str	r3, [r2, #0]
}
 8005b4a:	bf00      	nop
 8005b4c:	46bd      	mov	sp, r7
 8005b4e:	bc80      	pop	{r7}
 8005b50:	4770      	bx	lr
 8005b52:	bf00      	nop
 8005b54:	200005ec 	.word	0x200005ec

08005b58 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005b58:	b580      	push	{r7, lr}
 8005b5a:	b084      	sub	sp, #16
 8005b5c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005b5e:	2300      	movs	r3, #0
 8005b60:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005b62:	2300      	movs	r3, #0
 8005b64:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005b66:	4b41      	ldr	r3, [pc, #260]	; (8005c6c <xTaskResumeAll+0x114>)
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d10a      	bne.n	8005b84 <xTaskResumeAll+0x2c>
	__asm volatile
 8005b6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b72:	f383 8811 	msr	BASEPRI, r3
 8005b76:	f3bf 8f6f 	isb	sy
 8005b7a:	f3bf 8f4f 	dsb	sy
 8005b7e:	603b      	str	r3, [r7, #0]
}
 8005b80:	bf00      	nop
 8005b82:	e7fe      	b.n	8005b82 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005b84:	f000 fcaa 	bl	80064dc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005b88:	4b38      	ldr	r3, [pc, #224]	; (8005c6c <xTaskResumeAll+0x114>)
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	3b01      	subs	r3, #1
 8005b8e:	4a37      	ldr	r2, [pc, #220]	; (8005c6c <xTaskResumeAll+0x114>)
 8005b90:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005b92:	4b36      	ldr	r3, [pc, #216]	; (8005c6c <xTaskResumeAll+0x114>)
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d161      	bne.n	8005c5e <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005b9a:	4b35      	ldr	r3, [pc, #212]	; (8005c70 <xTaskResumeAll+0x118>)
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d05d      	beq.n	8005c5e <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005ba2:	e02e      	b.n	8005c02 <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8005ba4:	4b33      	ldr	r3, [pc, #204]	; (8005c74 <xTaskResumeAll+0x11c>)
 8005ba6:	68db      	ldr	r3, [r3, #12]
 8005ba8:	68db      	ldr	r3, [r3, #12]
 8005baa:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	3318      	adds	r3, #24
 8005bb0:	4618      	mov	r0, r3
 8005bb2:	f7ff fd5b 	bl	800566c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	3304      	adds	r3, #4
 8005bba:	4618      	mov	r0, r3
 8005bbc:	f7ff fd56 	bl	800566c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bc4:	2201      	movs	r2, #1
 8005bc6:	409a      	lsls	r2, r3
 8005bc8:	4b2b      	ldr	r3, [pc, #172]	; (8005c78 <xTaskResumeAll+0x120>)
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	4313      	orrs	r3, r2
 8005bce:	4a2a      	ldr	r2, [pc, #168]	; (8005c78 <xTaskResumeAll+0x120>)
 8005bd0:	6013      	str	r3, [r2, #0]
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005bd6:	4613      	mov	r3, r2
 8005bd8:	009b      	lsls	r3, r3, #2
 8005bda:	4413      	add	r3, r2
 8005bdc:	009b      	lsls	r3, r3, #2
 8005bde:	4a27      	ldr	r2, [pc, #156]	; (8005c7c <xTaskResumeAll+0x124>)
 8005be0:	441a      	add	r2, r3
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	3304      	adds	r3, #4
 8005be6:	4619      	mov	r1, r3
 8005be8:	4610      	mov	r0, r2
 8005bea:	f7ff fce4 	bl	80055b6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005bf2:	4b23      	ldr	r3, [pc, #140]	; (8005c80 <xTaskResumeAll+0x128>)
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bf8:	429a      	cmp	r2, r3
 8005bfa:	d302      	bcc.n	8005c02 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8005bfc:	4b21      	ldr	r3, [pc, #132]	; (8005c84 <xTaskResumeAll+0x12c>)
 8005bfe:	2201      	movs	r2, #1
 8005c00:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005c02:	4b1c      	ldr	r3, [pc, #112]	; (8005c74 <xTaskResumeAll+0x11c>)
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d1cc      	bne.n	8005ba4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d001      	beq.n	8005c14 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005c10:	f000 fab6 	bl	8006180 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8005c14:	4b1c      	ldr	r3, [pc, #112]	; (8005c88 <xTaskResumeAll+0x130>)
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d010      	beq.n	8005c42 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005c20:	f000 f836 	bl	8005c90 <xTaskIncrementTick>
 8005c24:	4603      	mov	r3, r0
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d002      	beq.n	8005c30 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8005c2a:	4b16      	ldr	r3, [pc, #88]	; (8005c84 <xTaskResumeAll+0x12c>)
 8005c2c:	2201      	movs	r2, #1
 8005c2e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	3b01      	subs	r3, #1
 8005c34:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d1f1      	bne.n	8005c20 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8005c3c:	4b12      	ldr	r3, [pc, #72]	; (8005c88 <xTaskResumeAll+0x130>)
 8005c3e:	2200      	movs	r2, #0
 8005c40:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005c42:	4b10      	ldr	r3, [pc, #64]	; (8005c84 <xTaskResumeAll+0x12c>)
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d009      	beq.n	8005c5e <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005c4a:	2301      	movs	r3, #1
 8005c4c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005c4e:	4b0f      	ldr	r3, [pc, #60]	; (8005c8c <xTaskResumeAll+0x134>)
 8005c50:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005c54:	601a      	str	r2, [r3, #0]
 8005c56:	f3bf 8f4f 	dsb	sy
 8005c5a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005c5e:	f000 fc6d 	bl	800653c <vPortExitCritical>

	return xAlreadyYielded;
 8005c62:	68bb      	ldr	r3, [r7, #8]
}
 8005c64:	4618      	mov	r0, r3
 8005c66:	3710      	adds	r7, #16
 8005c68:	46bd      	mov	sp, r7
 8005c6a:	bd80      	pop	{r7, pc}
 8005c6c:	200005ec 	.word	0x200005ec
 8005c70:	200005c4 	.word	0x200005c4
 8005c74:	20000584 	.word	0x20000584
 8005c78:	200005cc 	.word	0x200005cc
 8005c7c:	200004c8 	.word	0x200004c8
 8005c80:	200004c4 	.word	0x200004c4
 8005c84:	200005d8 	.word	0x200005d8
 8005c88:	200005d4 	.word	0x200005d4
 8005c8c:	e000ed04 	.word	0xe000ed04

08005c90 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005c90:	b580      	push	{r7, lr}
 8005c92:	b086      	sub	sp, #24
 8005c94:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005c96:	2300      	movs	r3, #0
 8005c98:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005c9a:	4b51      	ldr	r3, [pc, #324]	; (8005de0 <xTaskIncrementTick+0x150>)
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	f040 808d 	bne.w	8005dbe <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005ca4:	4b4f      	ldr	r3, [pc, #316]	; (8005de4 <xTaskIncrementTick+0x154>)
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	3301      	adds	r3, #1
 8005caa:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005cac:	4a4d      	ldr	r2, [pc, #308]	; (8005de4 <xTaskIncrementTick+0x154>)
 8005cae:	693b      	ldr	r3, [r7, #16]
 8005cb0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005cb2:	693b      	ldr	r3, [r7, #16]
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d120      	bne.n	8005cfa <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8005cb8:	4b4b      	ldr	r3, [pc, #300]	; (8005de8 <xTaskIncrementTick+0x158>)
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d00a      	beq.n	8005cd8 <xTaskIncrementTick+0x48>
	__asm volatile
 8005cc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cc6:	f383 8811 	msr	BASEPRI, r3
 8005cca:	f3bf 8f6f 	isb	sy
 8005cce:	f3bf 8f4f 	dsb	sy
 8005cd2:	603b      	str	r3, [r7, #0]
}
 8005cd4:	bf00      	nop
 8005cd6:	e7fe      	b.n	8005cd6 <xTaskIncrementTick+0x46>
 8005cd8:	4b43      	ldr	r3, [pc, #268]	; (8005de8 <xTaskIncrementTick+0x158>)
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	60fb      	str	r3, [r7, #12]
 8005cde:	4b43      	ldr	r3, [pc, #268]	; (8005dec <xTaskIncrementTick+0x15c>)
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	4a41      	ldr	r2, [pc, #260]	; (8005de8 <xTaskIncrementTick+0x158>)
 8005ce4:	6013      	str	r3, [r2, #0]
 8005ce6:	4a41      	ldr	r2, [pc, #260]	; (8005dec <xTaskIncrementTick+0x15c>)
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	6013      	str	r3, [r2, #0]
 8005cec:	4b40      	ldr	r3, [pc, #256]	; (8005df0 <xTaskIncrementTick+0x160>)
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	3301      	adds	r3, #1
 8005cf2:	4a3f      	ldr	r2, [pc, #252]	; (8005df0 <xTaskIncrementTick+0x160>)
 8005cf4:	6013      	str	r3, [r2, #0]
 8005cf6:	f000 fa43 	bl	8006180 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005cfa:	4b3e      	ldr	r3, [pc, #248]	; (8005df4 <xTaskIncrementTick+0x164>)
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	693a      	ldr	r2, [r7, #16]
 8005d00:	429a      	cmp	r2, r3
 8005d02:	d34d      	bcc.n	8005da0 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005d04:	4b38      	ldr	r3, [pc, #224]	; (8005de8 <xTaskIncrementTick+0x158>)
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d101      	bne.n	8005d12 <xTaskIncrementTick+0x82>
 8005d0e:	2301      	movs	r3, #1
 8005d10:	e000      	b.n	8005d14 <xTaskIncrementTick+0x84>
 8005d12:	2300      	movs	r3, #0
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d004      	beq.n	8005d22 <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005d18:	4b36      	ldr	r3, [pc, #216]	; (8005df4 <xTaskIncrementTick+0x164>)
 8005d1a:	f04f 32ff 	mov.w	r2, #4294967295
 8005d1e:	601a      	str	r2, [r3, #0]
					break;
 8005d20:	e03e      	b.n	8005da0 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8005d22:	4b31      	ldr	r3, [pc, #196]	; (8005de8 <xTaskIncrementTick+0x158>)
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	68db      	ldr	r3, [r3, #12]
 8005d28:	68db      	ldr	r3, [r3, #12]
 8005d2a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005d2c:	68bb      	ldr	r3, [r7, #8]
 8005d2e:	685b      	ldr	r3, [r3, #4]
 8005d30:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005d32:	693a      	ldr	r2, [r7, #16]
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	429a      	cmp	r2, r3
 8005d38:	d203      	bcs.n	8005d42 <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005d3a:	4a2e      	ldr	r2, [pc, #184]	; (8005df4 <xTaskIncrementTick+0x164>)
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	6013      	str	r3, [r2, #0]
						break;
 8005d40:	e02e      	b.n	8005da0 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005d42:	68bb      	ldr	r3, [r7, #8]
 8005d44:	3304      	adds	r3, #4
 8005d46:	4618      	mov	r0, r3
 8005d48:	f7ff fc90 	bl	800566c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005d4c:	68bb      	ldr	r3, [r7, #8]
 8005d4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d004      	beq.n	8005d5e <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005d54:	68bb      	ldr	r3, [r7, #8]
 8005d56:	3318      	adds	r3, #24
 8005d58:	4618      	mov	r0, r3
 8005d5a:	f7ff fc87 	bl	800566c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005d5e:	68bb      	ldr	r3, [r7, #8]
 8005d60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d62:	2201      	movs	r2, #1
 8005d64:	409a      	lsls	r2, r3
 8005d66:	4b24      	ldr	r3, [pc, #144]	; (8005df8 <xTaskIncrementTick+0x168>)
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	4313      	orrs	r3, r2
 8005d6c:	4a22      	ldr	r2, [pc, #136]	; (8005df8 <xTaskIncrementTick+0x168>)
 8005d6e:	6013      	str	r3, [r2, #0]
 8005d70:	68bb      	ldr	r3, [r7, #8]
 8005d72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d74:	4613      	mov	r3, r2
 8005d76:	009b      	lsls	r3, r3, #2
 8005d78:	4413      	add	r3, r2
 8005d7a:	009b      	lsls	r3, r3, #2
 8005d7c:	4a1f      	ldr	r2, [pc, #124]	; (8005dfc <xTaskIncrementTick+0x16c>)
 8005d7e:	441a      	add	r2, r3
 8005d80:	68bb      	ldr	r3, [r7, #8]
 8005d82:	3304      	adds	r3, #4
 8005d84:	4619      	mov	r1, r3
 8005d86:	4610      	mov	r0, r2
 8005d88:	f7ff fc15 	bl	80055b6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005d8c:	68bb      	ldr	r3, [r7, #8]
 8005d8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d90:	4b1b      	ldr	r3, [pc, #108]	; (8005e00 <xTaskIncrementTick+0x170>)
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d96:	429a      	cmp	r2, r3
 8005d98:	d3b4      	bcc.n	8005d04 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8005d9a:	2301      	movs	r3, #1
 8005d9c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005d9e:	e7b1      	b.n	8005d04 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005da0:	4b17      	ldr	r3, [pc, #92]	; (8005e00 <xTaskIncrementTick+0x170>)
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005da6:	4915      	ldr	r1, [pc, #84]	; (8005dfc <xTaskIncrementTick+0x16c>)
 8005da8:	4613      	mov	r3, r2
 8005daa:	009b      	lsls	r3, r3, #2
 8005dac:	4413      	add	r3, r2
 8005dae:	009b      	lsls	r3, r3, #2
 8005db0:	440b      	add	r3, r1
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	2b01      	cmp	r3, #1
 8005db6:	d907      	bls.n	8005dc8 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 8005db8:	2301      	movs	r3, #1
 8005dba:	617b      	str	r3, [r7, #20]
 8005dbc:	e004      	b.n	8005dc8 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8005dbe:	4b11      	ldr	r3, [pc, #68]	; (8005e04 <xTaskIncrementTick+0x174>)
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	3301      	adds	r3, #1
 8005dc4:	4a0f      	ldr	r2, [pc, #60]	; (8005e04 <xTaskIncrementTick+0x174>)
 8005dc6:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8005dc8:	4b0f      	ldr	r3, [pc, #60]	; (8005e08 <xTaskIncrementTick+0x178>)
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d001      	beq.n	8005dd4 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 8005dd0:	2301      	movs	r3, #1
 8005dd2:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8005dd4:	697b      	ldr	r3, [r7, #20]
}
 8005dd6:	4618      	mov	r0, r3
 8005dd8:	3718      	adds	r7, #24
 8005dda:	46bd      	mov	sp, r7
 8005ddc:	bd80      	pop	{r7, pc}
 8005dde:	bf00      	nop
 8005de0:	200005ec 	.word	0x200005ec
 8005de4:	200005c8 	.word	0x200005c8
 8005de8:	2000057c 	.word	0x2000057c
 8005dec:	20000580 	.word	0x20000580
 8005df0:	200005dc 	.word	0x200005dc
 8005df4:	200005e4 	.word	0x200005e4
 8005df8:	200005cc 	.word	0x200005cc
 8005dfc:	200004c8 	.word	0x200004c8
 8005e00:	200004c4 	.word	0x200004c4
 8005e04:	200005d4 	.word	0x200005d4
 8005e08:	200005d8 	.word	0x200005d8

08005e0c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005e0c:	b480      	push	{r7}
 8005e0e:	b087      	sub	sp, #28
 8005e10:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005e12:	4b29      	ldr	r3, [pc, #164]	; (8005eb8 <vTaskSwitchContext+0xac>)
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d003      	beq.n	8005e22 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005e1a:	4b28      	ldr	r3, [pc, #160]	; (8005ebc <vTaskSwitchContext+0xb0>)
 8005e1c:	2201      	movs	r2, #1
 8005e1e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005e20:	e044      	b.n	8005eac <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 8005e22:	4b26      	ldr	r3, [pc, #152]	; (8005ebc <vTaskSwitchContext+0xb0>)
 8005e24:	2200      	movs	r2, #0
 8005e26:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8005e28:	4b25      	ldr	r3, [pc, #148]	; (8005ec0 <vTaskSwitchContext+0xb4>)
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	fab3 f383 	clz	r3, r3
 8005e34:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8005e36:	7afb      	ldrb	r3, [r7, #11]
 8005e38:	f1c3 031f 	rsb	r3, r3, #31
 8005e3c:	617b      	str	r3, [r7, #20]
 8005e3e:	4921      	ldr	r1, [pc, #132]	; (8005ec4 <vTaskSwitchContext+0xb8>)
 8005e40:	697a      	ldr	r2, [r7, #20]
 8005e42:	4613      	mov	r3, r2
 8005e44:	009b      	lsls	r3, r3, #2
 8005e46:	4413      	add	r3, r2
 8005e48:	009b      	lsls	r3, r3, #2
 8005e4a:	440b      	add	r3, r1
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d10a      	bne.n	8005e68 <vTaskSwitchContext+0x5c>
	__asm volatile
 8005e52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e56:	f383 8811 	msr	BASEPRI, r3
 8005e5a:	f3bf 8f6f 	isb	sy
 8005e5e:	f3bf 8f4f 	dsb	sy
 8005e62:	607b      	str	r3, [r7, #4]
}
 8005e64:	bf00      	nop
 8005e66:	e7fe      	b.n	8005e66 <vTaskSwitchContext+0x5a>
 8005e68:	697a      	ldr	r2, [r7, #20]
 8005e6a:	4613      	mov	r3, r2
 8005e6c:	009b      	lsls	r3, r3, #2
 8005e6e:	4413      	add	r3, r2
 8005e70:	009b      	lsls	r3, r3, #2
 8005e72:	4a14      	ldr	r2, [pc, #80]	; (8005ec4 <vTaskSwitchContext+0xb8>)
 8005e74:	4413      	add	r3, r2
 8005e76:	613b      	str	r3, [r7, #16]
 8005e78:	693b      	ldr	r3, [r7, #16]
 8005e7a:	685b      	ldr	r3, [r3, #4]
 8005e7c:	685a      	ldr	r2, [r3, #4]
 8005e7e:	693b      	ldr	r3, [r7, #16]
 8005e80:	605a      	str	r2, [r3, #4]
 8005e82:	693b      	ldr	r3, [r7, #16]
 8005e84:	685a      	ldr	r2, [r3, #4]
 8005e86:	693b      	ldr	r3, [r7, #16]
 8005e88:	3308      	adds	r3, #8
 8005e8a:	429a      	cmp	r2, r3
 8005e8c:	d104      	bne.n	8005e98 <vTaskSwitchContext+0x8c>
 8005e8e:	693b      	ldr	r3, [r7, #16]
 8005e90:	685b      	ldr	r3, [r3, #4]
 8005e92:	685a      	ldr	r2, [r3, #4]
 8005e94:	693b      	ldr	r3, [r7, #16]
 8005e96:	605a      	str	r2, [r3, #4]
 8005e98:	693b      	ldr	r3, [r7, #16]
 8005e9a:	685b      	ldr	r3, [r3, #4]
 8005e9c:	68db      	ldr	r3, [r3, #12]
 8005e9e:	4a0a      	ldr	r2, [pc, #40]	; (8005ec8 <vTaskSwitchContext+0xbc>)
 8005ea0:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005ea2:	4b09      	ldr	r3, [pc, #36]	; (8005ec8 <vTaskSwitchContext+0xbc>)
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	334c      	adds	r3, #76	; 0x4c
 8005ea8:	4a08      	ldr	r2, [pc, #32]	; (8005ecc <vTaskSwitchContext+0xc0>)
 8005eaa:	6013      	str	r3, [r2, #0]
}
 8005eac:	bf00      	nop
 8005eae:	371c      	adds	r7, #28
 8005eb0:	46bd      	mov	sp, r7
 8005eb2:	bc80      	pop	{r7}
 8005eb4:	4770      	bx	lr
 8005eb6:	bf00      	nop
 8005eb8:	200005ec 	.word	0x200005ec
 8005ebc:	200005d8 	.word	0x200005d8
 8005ec0:	200005cc 	.word	0x200005cc
 8005ec4:	200004c8 	.word	0x200004c8
 8005ec8:	200004c4 	.word	0x200004c4
 8005ecc:	20000060 	.word	0x20000060

08005ed0 <vTaskPlaceOnUnorderedEventList>:
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
}
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 8005ed0:	b580      	push	{r7, lr}
 8005ed2:	b086      	sub	sp, #24
 8005ed4:	af00      	add	r7, sp, #0
 8005ed6:	60f8      	str	r0, [r7, #12]
 8005ed8:	60b9      	str	r1, [r7, #8]
 8005eda:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d10a      	bne.n	8005ef8 <vTaskPlaceOnUnorderedEventList+0x28>
	__asm volatile
 8005ee2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ee6:	f383 8811 	msr	BASEPRI, r3
 8005eea:	f3bf 8f6f 	isb	sy
 8005eee:	f3bf 8f4f 	dsb	sy
 8005ef2:	617b      	str	r3, [r7, #20]
}
 8005ef4:	bf00      	nop
 8005ef6:	e7fe      	b.n	8005ef6 <vTaskPlaceOnUnorderedEventList+0x26>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 8005ef8:	4b11      	ldr	r3, [pc, #68]	; (8005f40 <vTaskPlaceOnUnorderedEventList+0x70>)
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d10a      	bne.n	8005f16 <vTaskPlaceOnUnorderedEventList+0x46>
	__asm volatile
 8005f00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f04:	f383 8811 	msr	BASEPRI, r3
 8005f08:	f3bf 8f6f 	isb	sy
 8005f0c:	f3bf 8f4f 	dsb	sy
 8005f10:	613b      	str	r3, [r7, #16]
}
 8005f12:	bf00      	nop
 8005f14:	e7fe      	b.n	8005f14 <vTaskPlaceOnUnorderedEventList+0x44>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8005f16:	4b0b      	ldr	r3, [pc, #44]	; (8005f44 <vTaskPlaceOnUnorderedEventList+0x74>)
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	68ba      	ldr	r2, [r7, #8]
 8005f1c:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8005f20:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005f22:	4b08      	ldr	r3, [pc, #32]	; (8005f44 <vTaskPlaceOnUnorderedEventList+0x74>)
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	3318      	adds	r3, #24
 8005f28:	4619      	mov	r1, r3
 8005f2a:	68f8      	ldr	r0, [r7, #12]
 8005f2c:	f7ff fb43 	bl	80055b6 <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005f30:	2101      	movs	r1, #1
 8005f32:	6878      	ldr	r0, [r7, #4]
 8005f34:	f000 f97e 	bl	8006234 <prvAddCurrentTaskToDelayedList>
}
 8005f38:	bf00      	nop
 8005f3a:	3718      	adds	r7, #24
 8005f3c:	46bd      	mov	sp, r7
 8005f3e:	bd80      	pop	{r7, pc}
 8005f40:	200005ec 	.word	0x200005ec
 8005f44:	200004c4 	.word	0x200004c4

08005f48 <vTaskRemoveFromUnorderedEventList>:
	return xReturn;
}
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 8005f48:	b580      	push	{r7, lr}
 8005f4a:	b086      	sub	sp, #24
 8005f4c:	af00      	add	r7, sp, #0
 8005f4e:	6078      	str	r0, [r7, #4]
 8005f50:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 8005f52:	4b29      	ldr	r3, [pc, #164]	; (8005ff8 <vTaskRemoveFromUnorderedEventList+0xb0>)
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d10a      	bne.n	8005f70 <vTaskRemoveFromUnorderedEventList+0x28>
	__asm volatile
 8005f5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f5e:	f383 8811 	msr	BASEPRI, r3
 8005f62:	f3bf 8f6f 	isb	sy
 8005f66:	f3bf 8f4f 	dsb	sy
 8005f6a:	613b      	str	r3, [r7, #16]
}
 8005f6c:	bf00      	nop
 8005f6e:	e7fe      	b.n	8005f6e <vTaskRemoveFromUnorderedEventList+0x26>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8005f70:	683b      	ldr	r3, [r7, #0]
 8005f72:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = ( TCB_t * ) listGET_LIST_ITEM_OWNER( pxEventListItem );
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	68db      	ldr	r3, [r3, #12]
 8005f7e:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 8005f80:	697b      	ldr	r3, [r7, #20]
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d10a      	bne.n	8005f9c <vTaskRemoveFromUnorderedEventList+0x54>
	__asm volatile
 8005f86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f8a:	f383 8811 	msr	BASEPRI, r3
 8005f8e:	f3bf 8f6f 	isb	sy
 8005f92:	f3bf 8f4f 	dsb	sy
 8005f96:	60fb      	str	r3, [r7, #12]
}
 8005f98:	bf00      	nop
 8005f9a:	e7fe      	b.n	8005f9a <vTaskRemoveFromUnorderedEventList+0x52>
	( void ) uxListRemove( pxEventListItem );
 8005f9c:	6878      	ldr	r0, [r7, #4]
 8005f9e:	f7ff fb65 	bl	800566c <uxListRemove>

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005fa2:	697b      	ldr	r3, [r7, #20]
 8005fa4:	3304      	adds	r3, #4
 8005fa6:	4618      	mov	r0, r3
 8005fa8:	f7ff fb60 	bl	800566c <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 8005fac:	697b      	ldr	r3, [r7, #20]
 8005fae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fb0:	2201      	movs	r2, #1
 8005fb2:	409a      	lsls	r2, r3
 8005fb4:	4b11      	ldr	r3, [pc, #68]	; (8005ffc <vTaskRemoveFromUnorderedEventList+0xb4>)
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	4313      	orrs	r3, r2
 8005fba:	4a10      	ldr	r2, [pc, #64]	; (8005ffc <vTaskRemoveFromUnorderedEventList+0xb4>)
 8005fbc:	6013      	str	r3, [r2, #0]
 8005fbe:	697b      	ldr	r3, [r7, #20]
 8005fc0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005fc2:	4613      	mov	r3, r2
 8005fc4:	009b      	lsls	r3, r3, #2
 8005fc6:	4413      	add	r3, r2
 8005fc8:	009b      	lsls	r3, r3, #2
 8005fca:	4a0d      	ldr	r2, [pc, #52]	; (8006000 <vTaskRemoveFromUnorderedEventList+0xb8>)
 8005fcc:	441a      	add	r2, r3
 8005fce:	697b      	ldr	r3, [r7, #20]
 8005fd0:	3304      	adds	r3, #4
 8005fd2:	4619      	mov	r1, r3
 8005fd4:	4610      	mov	r0, r2
 8005fd6:	f7ff faee 	bl	80055b6 <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005fda:	697b      	ldr	r3, [r7, #20]
 8005fdc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005fde:	4b09      	ldr	r3, [pc, #36]	; (8006004 <vTaskRemoveFromUnorderedEventList+0xbc>)
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fe4:	429a      	cmp	r2, r3
 8005fe6:	d902      	bls.n	8005fee <vTaskRemoveFromUnorderedEventList+0xa6>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 8005fe8:	4b07      	ldr	r3, [pc, #28]	; (8006008 <vTaskRemoveFromUnorderedEventList+0xc0>)
 8005fea:	2201      	movs	r2, #1
 8005fec:	601a      	str	r2, [r3, #0]
	}
}
 8005fee:	bf00      	nop
 8005ff0:	3718      	adds	r7, #24
 8005ff2:	46bd      	mov	sp, r7
 8005ff4:	bd80      	pop	{r7, pc}
 8005ff6:	bf00      	nop
 8005ff8:	200005ec 	.word	0x200005ec
 8005ffc:	200005cc 	.word	0x200005cc
 8006000:	200004c8 	.word	0x200004c8
 8006004:	200004c4 	.word	0x200004c4
 8006008:	200005d8 	.word	0x200005d8

0800600c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800600c:	b580      	push	{r7, lr}
 800600e:	b082      	sub	sp, #8
 8006010:	af00      	add	r7, sp, #0
 8006012:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006014:	f000 f852 	bl	80060bc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006018:	4b06      	ldr	r3, [pc, #24]	; (8006034 <prvIdleTask+0x28>)
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	2b01      	cmp	r3, #1
 800601e:	d9f9      	bls.n	8006014 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006020:	4b05      	ldr	r3, [pc, #20]	; (8006038 <prvIdleTask+0x2c>)
 8006022:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006026:	601a      	str	r2, [r3, #0]
 8006028:	f3bf 8f4f 	dsb	sy
 800602c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006030:	e7f0      	b.n	8006014 <prvIdleTask+0x8>
 8006032:	bf00      	nop
 8006034:	200004c8 	.word	0x200004c8
 8006038:	e000ed04 	.word	0xe000ed04

0800603c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800603c:	b580      	push	{r7, lr}
 800603e:	b082      	sub	sp, #8
 8006040:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006042:	2300      	movs	r3, #0
 8006044:	607b      	str	r3, [r7, #4]
 8006046:	e00c      	b.n	8006062 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006048:	687a      	ldr	r2, [r7, #4]
 800604a:	4613      	mov	r3, r2
 800604c:	009b      	lsls	r3, r3, #2
 800604e:	4413      	add	r3, r2
 8006050:	009b      	lsls	r3, r3, #2
 8006052:	4a12      	ldr	r2, [pc, #72]	; (800609c <prvInitialiseTaskLists+0x60>)
 8006054:	4413      	add	r3, r2
 8006056:	4618      	mov	r0, r3
 8006058:	f7ff fa82 	bl	8005560 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	3301      	adds	r3, #1
 8006060:	607b      	str	r3, [r7, #4]
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	2b06      	cmp	r3, #6
 8006066:	d9ef      	bls.n	8006048 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006068:	480d      	ldr	r0, [pc, #52]	; (80060a0 <prvInitialiseTaskLists+0x64>)
 800606a:	f7ff fa79 	bl	8005560 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800606e:	480d      	ldr	r0, [pc, #52]	; (80060a4 <prvInitialiseTaskLists+0x68>)
 8006070:	f7ff fa76 	bl	8005560 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006074:	480c      	ldr	r0, [pc, #48]	; (80060a8 <prvInitialiseTaskLists+0x6c>)
 8006076:	f7ff fa73 	bl	8005560 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800607a:	480c      	ldr	r0, [pc, #48]	; (80060ac <prvInitialiseTaskLists+0x70>)
 800607c:	f7ff fa70 	bl	8005560 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006080:	480b      	ldr	r0, [pc, #44]	; (80060b0 <prvInitialiseTaskLists+0x74>)
 8006082:	f7ff fa6d 	bl	8005560 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006086:	4b0b      	ldr	r3, [pc, #44]	; (80060b4 <prvInitialiseTaskLists+0x78>)
 8006088:	4a05      	ldr	r2, [pc, #20]	; (80060a0 <prvInitialiseTaskLists+0x64>)
 800608a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800608c:	4b0a      	ldr	r3, [pc, #40]	; (80060b8 <prvInitialiseTaskLists+0x7c>)
 800608e:	4a05      	ldr	r2, [pc, #20]	; (80060a4 <prvInitialiseTaskLists+0x68>)
 8006090:	601a      	str	r2, [r3, #0]
}
 8006092:	bf00      	nop
 8006094:	3708      	adds	r7, #8
 8006096:	46bd      	mov	sp, r7
 8006098:	bd80      	pop	{r7, pc}
 800609a:	bf00      	nop
 800609c:	200004c8 	.word	0x200004c8
 80060a0:	20000554 	.word	0x20000554
 80060a4:	20000568 	.word	0x20000568
 80060a8:	20000584 	.word	0x20000584
 80060ac:	20000598 	.word	0x20000598
 80060b0:	200005b0 	.word	0x200005b0
 80060b4:	2000057c 	.word	0x2000057c
 80060b8:	20000580 	.word	0x20000580

080060bc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80060bc:	b580      	push	{r7, lr}
 80060be:	b082      	sub	sp, #8
 80060c0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80060c2:	e019      	b.n	80060f8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80060c4:	f000 fa0a 	bl	80064dc <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80060c8:	4b10      	ldr	r3, [pc, #64]	; (800610c <prvCheckTasksWaitingTermination+0x50>)
 80060ca:	68db      	ldr	r3, [r3, #12]
 80060cc:	68db      	ldr	r3, [r3, #12]
 80060ce:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	3304      	adds	r3, #4
 80060d4:	4618      	mov	r0, r3
 80060d6:	f7ff fac9 	bl	800566c <uxListRemove>
				--uxCurrentNumberOfTasks;
 80060da:	4b0d      	ldr	r3, [pc, #52]	; (8006110 <prvCheckTasksWaitingTermination+0x54>)
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	3b01      	subs	r3, #1
 80060e0:	4a0b      	ldr	r2, [pc, #44]	; (8006110 <prvCheckTasksWaitingTermination+0x54>)
 80060e2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80060e4:	4b0b      	ldr	r3, [pc, #44]	; (8006114 <prvCheckTasksWaitingTermination+0x58>)
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	3b01      	subs	r3, #1
 80060ea:	4a0a      	ldr	r2, [pc, #40]	; (8006114 <prvCheckTasksWaitingTermination+0x58>)
 80060ec:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80060ee:	f000 fa25 	bl	800653c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80060f2:	6878      	ldr	r0, [r7, #4]
 80060f4:	f000 f810 	bl	8006118 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80060f8:	4b06      	ldr	r3, [pc, #24]	; (8006114 <prvCheckTasksWaitingTermination+0x58>)
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d1e1      	bne.n	80060c4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006100:	bf00      	nop
 8006102:	bf00      	nop
 8006104:	3708      	adds	r7, #8
 8006106:	46bd      	mov	sp, r7
 8006108:	bd80      	pop	{r7, pc}
 800610a:	bf00      	nop
 800610c:	20000598 	.word	0x20000598
 8006110:	200005c4 	.word	0x200005c4
 8006114:	200005ac 	.word	0x200005ac

08006118 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006118:	b580      	push	{r7, lr}
 800611a:	b084      	sub	sp, #16
 800611c:	af00      	add	r7, sp, #0
 800611e:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	334c      	adds	r3, #76	; 0x4c
 8006124:	4618      	mov	r0, r3
 8006126:	f000 fc7b 	bl	8006a20 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8006130:	2b00      	cmp	r3, #0
 8006132:	d108      	bne.n	8006146 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006138:	4618      	mov	r0, r3
 800613a:	f000 fb55 	bl	80067e8 <vPortFree>
				vPortFree( pxTCB );
 800613e:	6878      	ldr	r0, [r7, #4]
 8006140:	f000 fb52 	bl	80067e8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006144:	e018      	b.n	8006178 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 800614c:	2b01      	cmp	r3, #1
 800614e:	d103      	bne.n	8006158 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8006150:	6878      	ldr	r0, [r7, #4]
 8006152:	f000 fb49 	bl	80067e8 <vPortFree>
	}
 8006156:	e00f      	b.n	8006178 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 800615e:	2b02      	cmp	r3, #2
 8006160:	d00a      	beq.n	8006178 <prvDeleteTCB+0x60>
	__asm volatile
 8006162:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006166:	f383 8811 	msr	BASEPRI, r3
 800616a:	f3bf 8f6f 	isb	sy
 800616e:	f3bf 8f4f 	dsb	sy
 8006172:	60fb      	str	r3, [r7, #12]
}
 8006174:	bf00      	nop
 8006176:	e7fe      	b.n	8006176 <prvDeleteTCB+0x5e>
	}
 8006178:	bf00      	nop
 800617a:	3710      	adds	r7, #16
 800617c:	46bd      	mov	sp, r7
 800617e:	bd80      	pop	{r7, pc}

08006180 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006180:	b480      	push	{r7}
 8006182:	b083      	sub	sp, #12
 8006184:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006186:	4b0e      	ldr	r3, [pc, #56]	; (80061c0 <prvResetNextTaskUnblockTime+0x40>)
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	2b00      	cmp	r3, #0
 800618e:	d101      	bne.n	8006194 <prvResetNextTaskUnblockTime+0x14>
 8006190:	2301      	movs	r3, #1
 8006192:	e000      	b.n	8006196 <prvResetNextTaskUnblockTime+0x16>
 8006194:	2300      	movs	r3, #0
 8006196:	2b00      	cmp	r3, #0
 8006198:	d004      	beq.n	80061a4 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800619a:	4b0a      	ldr	r3, [pc, #40]	; (80061c4 <prvResetNextTaskUnblockTime+0x44>)
 800619c:	f04f 32ff 	mov.w	r2, #4294967295
 80061a0:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80061a2:	e008      	b.n	80061b6 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80061a4:	4b06      	ldr	r3, [pc, #24]	; (80061c0 <prvResetNextTaskUnblockTime+0x40>)
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	68db      	ldr	r3, [r3, #12]
 80061aa:	68db      	ldr	r3, [r3, #12]
 80061ac:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	685b      	ldr	r3, [r3, #4]
 80061b2:	4a04      	ldr	r2, [pc, #16]	; (80061c4 <prvResetNextTaskUnblockTime+0x44>)
 80061b4:	6013      	str	r3, [r2, #0]
}
 80061b6:	bf00      	nop
 80061b8:	370c      	adds	r7, #12
 80061ba:	46bd      	mov	sp, r7
 80061bc:	bc80      	pop	{r7}
 80061be:	4770      	bx	lr
 80061c0:	2000057c 	.word	0x2000057c
 80061c4:	200005e4 	.word	0x200005e4

080061c8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80061c8:	b480      	push	{r7}
 80061ca:	b083      	sub	sp, #12
 80061cc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80061ce:	4b0b      	ldr	r3, [pc, #44]	; (80061fc <xTaskGetSchedulerState+0x34>)
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d102      	bne.n	80061dc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80061d6:	2301      	movs	r3, #1
 80061d8:	607b      	str	r3, [r7, #4]
 80061da:	e008      	b.n	80061ee <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80061dc:	4b08      	ldr	r3, [pc, #32]	; (8006200 <xTaskGetSchedulerState+0x38>)
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d102      	bne.n	80061ea <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80061e4:	2302      	movs	r3, #2
 80061e6:	607b      	str	r3, [r7, #4]
 80061e8:	e001      	b.n	80061ee <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80061ea:	2300      	movs	r3, #0
 80061ec:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80061ee:	687b      	ldr	r3, [r7, #4]
	}
 80061f0:	4618      	mov	r0, r3
 80061f2:	370c      	adds	r7, #12
 80061f4:	46bd      	mov	sp, r7
 80061f6:	bc80      	pop	{r7}
 80061f8:	4770      	bx	lr
 80061fa:	bf00      	nop
 80061fc:	200005d0 	.word	0x200005d0
 8006200:	200005ec 	.word	0x200005ec

08006204 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 8006204:	b480      	push	{r7}
 8006206:	b083      	sub	sp, #12
 8006208:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 800620a:	4b09      	ldr	r3, [pc, #36]	; (8006230 <uxTaskResetEventItemValue+0x2c>)
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	699b      	ldr	r3, [r3, #24]
 8006210:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006212:	4b07      	ldr	r3, [pc, #28]	; (8006230 <uxTaskResetEventItemValue+0x2c>)
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006218:	4b05      	ldr	r3, [pc, #20]	; (8006230 <uxTaskResetEventItemValue+0x2c>)
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	f1c2 0207 	rsb	r2, r2, #7
 8006220:	619a      	str	r2, [r3, #24]

	return uxReturn;
 8006222:	687b      	ldr	r3, [r7, #4]
}
 8006224:	4618      	mov	r0, r3
 8006226:	370c      	adds	r7, #12
 8006228:	46bd      	mov	sp, r7
 800622a:	bc80      	pop	{r7}
 800622c:	4770      	bx	lr
 800622e:	bf00      	nop
 8006230:	200004c4 	.word	0x200004c4

08006234 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006234:	b580      	push	{r7, lr}
 8006236:	b084      	sub	sp, #16
 8006238:	af00      	add	r7, sp, #0
 800623a:	6078      	str	r0, [r7, #4]
 800623c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800623e:	4b29      	ldr	r3, [pc, #164]	; (80062e4 <prvAddCurrentTaskToDelayedList+0xb0>)
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006244:	4b28      	ldr	r3, [pc, #160]	; (80062e8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	3304      	adds	r3, #4
 800624a:	4618      	mov	r0, r3
 800624c:	f7ff fa0e 	bl	800566c <uxListRemove>
 8006250:	4603      	mov	r3, r0
 8006252:	2b00      	cmp	r3, #0
 8006254:	d10b      	bne.n	800626e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8006256:	4b24      	ldr	r3, [pc, #144]	; (80062e8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800625c:	2201      	movs	r2, #1
 800625e:	fa02 f303 	lsl.w	r3, r2, r3
 8006262:	43da      	mvns	r2, r3
 8006264:	4b21      	ldr	r3, [pc, #132]	; (80062ec <prvAddCurrentTaskToDelayedList+0xb8>)
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	4013      	ands	r3, r2
 800626a:	4a20      	ldr	r2, [pc, #128]	; (80062ec <prvAddCurrentTaskToDelayedList+0xb8>)
 800626c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006274:	d10a      	bne.n	800628c <prvAddCurrentTaskToDelayedList+0x58>
 8006276:	683b      	ldr	r3, [r7, #0]
 8006278:	2b00      	cmp	r3, #0
 800627a:	d007      	beq.n	800628c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800627c:	4b1a      	ldr	r3, [pc, #104]	; (80062e8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	3304      	adds	r3, #4
 8006282:	4619      	mov	r1, r3
 8006284:	481a      	ldr	r0, [pc, #104]	; (80062f0 <prvAddCurrentTaskToDelayedList+0xbc>)
 8006286:	f7ff f996 	bl	80055b6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800628a:	e026      	b.n	80062da <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800628c:	68fa      	ldr	r2, [r7, #12]
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	4413      	add	r3, r2
 8006292:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006294:	4b14      	ldr	r3, [pc, #80]	; (80062e8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	68ba      	ldr	r2, [r7, #8]
 800629a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800629c:	68ba      	ldr	r2, [r7, #8]
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	429a      	cmp	r2, r3
 80062a2:	d209      	bcs.n	80062b8 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80062a4:	4b13      	ldr	r3, [pc, #76]	; (80062f4 <prvAddCurrentTaskToDelayedList+0xc0>)
 80062a6:	681a      	ldr	r2, [r3, #0]
 80062a8:	4b0f      	ldr	r3, [pc, #60]	; (80062e8 <prvAddCurrentTaskToDelayedList+0xb4>)
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	3304      	adds	r3, #4
 80062ae:	4619      	mov	r1, r3
 80062b0:	4610      	mov	r0, r2
 80062b2:	f7ff f9a3 	bl	80055fc <vListInsert>
}
 80062b6:	e010      	b.n	80062da <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80062b8:	4b0f      	ldr	r3, [pc, #60]	; (80062f8 <prvAddCurrentTaskToDelayedList+0xc4>)
 80062ba:	681a      	ldr	r2, [r3, #0]
 80062bc:	4b0a      	ldr	r3, [pc, #40]	; (80062e8 <prvAddCurrentTaskToDelayedList+0xb4>)
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	3304      	adds	r3, #4
 80062c2:	4619      	mov	r1, r3
 80062c4:	4610      	mov	r0, r2
 80062c6:	f7ff f999 	bl	80055fc <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80062ca:	4b0c      	ldr	r3, [pc, #48]	; (80062fc <prvAddCurrentTaskToDelayedList+0xc8>)
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	68ba      	ldr	r2, [r7, #8]
 80062d0:	429a      	cmp	r2, r3
 80062d2:	d202      	bcs.n	80062da <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80062d4:	4a09      	ldr	r2, [pc, #36]	; (80062fc <prvAddCurrentTaskToDelayedList+0xc8>)
 80062d6:	68bb      	ldr	r3, [r7, #8]
 80062d8:	6013      	str	r3, [r2, #0]
}
 80062da:	bf00      	nop
 80062dc:	3710      	adds	r7, #16
 80062de:	46bd      	mov	sp, r7
 80062e0:	bd80      	pop	{r7, pc}
 80062e2:	bf00      	nop
 80062e4:	200005c8 	.word	0x200005c8
 80062e8:	200004c4 	.word	0x200004c4
 80062ec:	200005cc 	.word	0x200005cc
 80062f0:	200005b0 	.word	0x200005b0
 80062f4:	20000580 	.word	0x20000580
 80062f8:	2000057c 	.word	0x2000057c
 80062fc:	200005e4 	.word	0x200005e4

08006300 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006300:	b480      	push	{r7}
 8006302:	b085      	sub	sp, #20
 8006304:	af00      	add	r7, sp, #0
 8006306:	60f8      	str	r0, [r7, #12]
 8006308:	60b9      	str	r1, [r7, #8]
 800630a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	3b04      	subs	r3, #4
 8006310:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006318:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	3b04      	subs	r3, #4
 800631e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006320:	68bb      	ldr	r3, [r7, #8]
 8006322:	f023 0201 	bic.w	r2, r3, #1
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	3b04      	subs	r3, #4
 800632e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006330:	4a08      	ldr	r2, [pc, #32]	; (8006354 <pxPortInitialiseStack+0x54>)
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	3b14      	subs	r3, #20
 800633a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800633c:	687a      	ldr	r2, [r7, #4]
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	3b20      	subs	r3, #32
 8006346:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006348:	68fb      	ldr	r3, [r7, #12]
}
 800634a:	4618      	mov	r0, r3
 800634c:	3714      	adds	r7, #20
 800634e:	46bd      	mov	sp, r7
 8006350:	bc80      	pop	{r7}
 8006352:	4770      	bx	lr
 8006354:	08006359 	.word	0x08006359

08006358 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006358:	b480      	push	{r7}
 800635a:	b085      	sub	sp, #20
 800635c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800635e:	2300      	movs	r3, #0
 8006360:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006362:	4b12      	ldr	r3, [pc, #72]	; (80063ac <prvTaskExitError+0x54>)
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	f1b3 3fff 	cmp.w	r3, #4294967295
 800636a:	d00a      	beq.n	8006382 <prvTaskExitError+0x2a>
	__asm volatile
 800636c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006370:	f383 8811 	msr	BASEPRI, r3
 8006374:	f3bf 8f6f 	isb	sy
 8006378:	f3bf 8f4f 	dsb	sy
 800637c:	60fb      	str	r3, [r7, #12]
}
 800637e:	bf00      	nop
 8006380:	e7fe      	b.n	8006380 <prvTaskExitError+0x28>
	__asm volatile
 8006382:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006386:	f383 8811 	msr	BASEPRI, r3
 800638a:	f3bf 8f6f 	isb	sy
 800638e:	f3bf 8f4f 	dsb	sy
 8006392:	60bb      	str	r3, [r7, #8]
}
 8006394:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006396:	bf00      	nop
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	2b00      	cmp	r3, #0
 800639c:	d0fc      	beq.n	8006398 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800639e:	bf00      	nop
 80063a0:	bf00      	nop
 80063a2:	3714      	adds	r7, #20
 80063a4:	46bd      	mov	sp, r7
 80063a6:	bc80      	pop	{r7}
 80063a8:	4770      	bx	lr
 80063aa:	bf00      	nop
 80063ac:	20000010 	.word	0x20000010

080063b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80063b0:	4b07      	ldr	r3, [pc, #28]	; (80063d0 <pxCurrentTCBConst2>)
 80063b2:	6819      	ldr	r1, [r3, #0]
 80063b4:	6808      	ldr	r0, [r1, #0]
 80063b6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80063ba:	f380 8809 	msr	PSP, r0
 80063be:	f3bf 8f6f 	isb	sy
 80063c2:	f04f 0000 	mov.w	r0, #0
 80063c6:	f380 8811 	msr	BASEPRI, r0
 80063ca:	f04e 0e0d 	orr.w	lr, lr, #13
 80063ce:	4770      	bx	lr

080063d0 <pxCurrentTCBConst2>:
 80063d0:	200004c4 	.word	0x200004c4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80063d4:	bf00      	nop
 80063d6:	bf00      	nop

080063d8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 80063d8:	4806      	ldr	r0, [pc, #24]	; (80063f4 <prvPortStartFirstTask+0x1c>)
 80063da:	6800      	ldr	r0, [r0, #0]
 80063dc:	6800      	ldr	r0, [r0, #0]
 80063de:	f380 8808 	msr	MSP, r0
 80063e2:	b662      	cpsie	i
 80063e4:	b661      	cpsie	f
 80063e6:	f3bf 8f4f 	dsb	sy
 80063ea:	f3bf 8f6f 	isb	sy
 80063ee:	df00      	svc	0
 80063f0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80063f2:	bf00      	nop
 80063f4:	e000ed08 	.word	0xe000ed08

080063f8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80063f8:	b580      	push	{r7, lr}
 80063fa:	b084      	sub	sp, #16
 80063fc:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80063fe:	4b32      	ldr	r3, [pc, #200]	; (80064c8 <xPortStartScheduler+0xd0>)
 8006400:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	781b      	ldrb	r3, [r3, #0]
 8006406:	b2db      	uxtb	r3, r3
 8006408:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	22ff      	movs	r2, #255	; 0xff
 800640e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	781b      	ldrb	r3, [r3, #0]
 8006414:	b2db      	uxtb	r3, r3
 8006416:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006418:	78fb      	ldrb	r3, [r7, #3]
 800641a:	b2db      	uxtb	r3, r3
 800641c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006420:	b2da      	uxtb	r2, r3
 8006422:	4b2a      	ldr	r3, [pc, #168]	; (80064cc <xPortStartScheduler+0xd4>)
 8006424:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006426:	4b2a      	ldr	r3, [pc, #168]	; (80064d0 <xPortStartScheduler+0xd8>)
 8006428:	2207      	movs	r2, #7
 800642a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800642c:	e009      	b.n	8006442 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800642e:	4b28      	ldr	r3, [pc, #160]	; (80064d0 <xPortStartScheduler+0xd8>)
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	3b01      	subs	r3, #1
 8006434:	4a26      	ldr	r2, [pc, #152]	; (80064d0 <xPortStartScheduler+0xd8>)
 8006436:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006438:	78fb      	ldrb	r3, [r7, #3]
 800643a:	b2db      	uxtb	r3, r3
 800643c:	005b      	lsls	r3, r3, #1
 800643e:	b2db      	uxtb	r3, r3
 8006440:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006442:	78fb      	ldrb	r3, [r7, #3]
 8006444:	b2db      	uxtb	r3, r3
 8006446:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800644a:	2b80      	cmp	r3, #128	; 0x80
 800644c:	d0ef      	beq.n	800642e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800644e:	4b20      	ldr	r3, [pc, #128]	; (80064d0 <xPortStartScheduler+0xd8>)
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	f1c3 0307 	rsb	r3, r3, #7
 8006456:	2b04      	cmp	r3, #4
 8006458:	d00a      	beq.n	8006470 <xPortStartScheduler+0x78>
	__asm volatile
 800645a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800645e:	f383 8811 	msr	BASEPRI, r3
 8006462:	f3bf 8f6f 	isb	sy
 8006466:	f3bf 8f4f 	dsb	sy
 800646a:	60bb      	str	r3, [r7, #8]
}
 800646c:	bf00      	nop
 800646e:	e7fe      	b.n	800646e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006470:	4b17      	ldr	r3, [pc, #92]	; (80064d0 <xPortStartScheduler+0xd8>)
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	021b      	lsls	r3, r3, #8
 8006476:	4a16      	ldr	r2, [pc, #88]	; (80064d0 <xPortStartScheduler+0xd8>)
 8006478:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800647a:	4b15      	ldr	r3, [pc, #84]	; (80064d0 <xPortStartScheduler+0xd8>)
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006482:	4a13      	ldr	r2, [pc, #76]	; (80064d0 <xPortStartScheduler+0xd8>)
 8006484:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	b2da      	uxtb	r2, r3
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800648e:	4b11      	ldr	r3, [pc, #68]	; (80064d4 <xPortStartScheduler+0xdc>)
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	4a10      	ldr	r2, [pc, #64]	; (80064d4 <xPortStartScheduler+0xdc>)
 8006494:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006498:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800649a:	4b0e      	ldr	r3, [pc, #56]	; (80064d4 <xPortStartScheduler+0xdc>)
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	4a0d      	ldr	r2, [pc, #52]	; (80064d4 <xPortStartScheduler+0xdc>)
 80064a0:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80064a4:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80064a6:	f000 f8b9 	bl	800661c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80064aa:	4b0b      	ldr	r3, [pc, #44]	; (80064d8 <xPortStartScheduler+0xe0>)
 80064ac:	2200      	movs	r2, #0
 80064ae:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80064b0:	f7ff ff92 	bl	80063d8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80064b4:	f7ff fcaa 	bl	8005e0c <vTaskSwitchContext>
	prvTaskExitError();
 80064b8:	f7ff ff4e 	bl	8006358 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80064bc:	2300      	movs	r3, #0
}
 80064be:	4618      	mov	r0, r3
 80064c0:	3710      	adds	r7, #16
 80064c2:	46bd      	mov	sp, r7
 80064c4:	bd80      	pop	{r7, pc}
 80064c6:	bf00      	nop
 80064c8:	e000e400 	.word	0xe000e400
 80064cc:	200005f0 	.word	0x200005f0
 80064d0:	200005f4 	.word	0x200005f4
 80064d4:	e000ed20 	.word	0xe000ed20
 80064d8:	20000010 	.word	0x20000010

080064dc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80064dc:	b480      	push	{r7}
 80064de:	b083      	sub	sp, #12
 80064e0:	af00      	add	r7, sp, #0
	__asm volatile
 80064e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064e6:	f383 8811 	msr	BASEPRI, r3
 80064ea:	f3bf 8f6f 	isb	sy
 80064ee:	f3bf 8f4f 	dsb	sy
 80064f2:	607b      	str	r3, [r7, #4]
}
 80064f4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80064f6:	4b0f      	ldr	r3, [pc, #60]	; (8006534 <vPortEnterCritical+0x58>)
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	3301      	adds	r3, #1
 80064fc:	4a0d      	ldr	r2, [pc, #52]	; (8006534 <vPortEnterCritical+0x58>)
 80064fe:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006500:	4b0c      	ldr	r3, [pc, #48]	; (8006534 <vPortEnterCritical+0x58>)
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	2b01      	cmp	r3, #1
 8006506:	d10f      	bne.n	8006528 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006508:	4b0b      	ldr	r3, [pc, #44]	; (8006538 <vPortEnterCritical+0x5c>)
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	b2db      	uxtb	r3, r3
 800650e:	2b00      	cmp	r3, #0
 8006510:	d00a      	beq.n	8006528 <vPortEnterCritical+0x4c>
	__asm volatile
 8006512:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006516:	f383 8811 	msr	BASEPRI, r3
 800651a:	f3bf 8f6f 	isb	sy
 800651e:	f3bf 8f4f 	dsb	sy
 8006522:	603b      	str	r3, [r7, #0]
}
 8006524:	bf00      	nop
 8006526:	e7fe      	b.n	8006526 <vPortEnterCritical+0x4a>
	}
}
 8006528:	bf00      	nop
 800652a:	370c      	adds	r7, #12
 800652c:	46bd      	mov	sp, r7
 800652e:	bc80      	pop	{r7}
 8006530:	4770      	bx	lr
 8006532:	bf00      	nop
 8006534:	20000010 	.word	0x20000010
 8006538:	e000ed04 	.word	0xe000ed04

0800653c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800653c:	b480      	push	{r7}
 800653e:	b083      	sub	sp, #12
 8006540:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006542:	4b11      	ldr	r3, [pc, #68]	; (8006588 <vPortExitCritical+0x4c>)
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	2b00      	cmp	r3, #0
 8006548:	d10a      	bne.n	8006560 <vPortExitCritical+0x24>
	__asm volatile
 800654a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800654e:	f383 8811 	msr	BASEPRI, r3
 8006552:	f3bf 8f6f 	isb	sy
 8006556:	f3bf 8f4f 	dsb	sy
 800655a:	607b      	str	r3, [r7, #4]
}
 800655c:	bf00      	nop
 800655e:	e7fe      	b.n	800655e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006560:	4b09      	ldr	r3, [pc, #36]	; (8006588 <vPortExitCritical+0x4c>)
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	3b01      	subs	r3, #1
 8006566:	4a08      	ldr	r2, [pc, #32]	; (8006588 <vPortExitCritical+0x4c>)
 8006568:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800656a:	4b07      	ldr	r3, [pc, #28]	; (8006588 <vPortExitCritical+0x4c>)
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	2b00      	cmp	r3, #0
 8006570:	d105      	bne.n	800657e <vPortExitCritical+0x42>
 8006572:	2300      	movs	r3, #0
 8006574:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006576:	683b      	ldr	r3, [r7, #0]
 8006578:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800657c:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800657e:	bf00      	nop
 8006580:	370c      	adds	r7, #12
 8006582:	46bd      	mov	sp, r7
 8006584:	bc80      	pop	{r7}
 8006586:	4770      	bx	lr
 8006588:	20000010 	.word	0x20000010
 800658c:	00000000 	.word	0x00000000

08006590 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006590:	f3ef 8009 	mrs	r0, PSP
 8006594:	f3bf 8f6f 	isb	sy
 8006598:	4b0d      	ldr	r3, [pc, #52]	; (80065d0 <pxCurrentTCBConst>)
 800659a:	681a      	ldr	r2, [r3, #0]
 800659c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80065a0:	6010      	str	r0, [r2, #0]
 80065a2:	e92d 4008 	stmdb	sp!, {r3, lr}
 80065a6:	f04f 0050 	mov.w	r0, #80	; 0x50
 80065aa:	f380 8811 	msr	BASEPRI, r0
 80065ae:	f7ff fc2d 	bl	8005e0c <vTaskSwitchContext>
 80065b2:	f04f 0000 	mov.w	r0, #0
 80065b6:	f380 8811 	msr	BASEPRI, r0
 80065ba:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80065be:	6819      	ldr	r1, [r3, #0]
 80065c0:	6808      	ldr	r0, [r1, #0]
 80065c2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80065c6:	f380 8809 	msr	PSP, r0
 80065ca:	f3bf 8f6f 	isb	sy
 80065ce:	4770      	bx	lr

080065d0 <pxCurrentTCBConst>:
 80065d0:	200004c4 	.word	0x200004c4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80065d4:	bf00      	nop
 80065d6:	bf00      	nop

080065d8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80065d8:	b580      	push	{r7, lr}
 80065da:	b082      	sub	sp, #8
 80065dc:	af00      	add	r7, sp, #0
	__asm volatile
 80065de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065e2:	f383 8811 	msr	BASEPRI, r3
 80065e6:	f3bf 8f6f 	isb	sy
 80065ea:	f3bf 8f4f 	dsb	sy
 80065ee:	607b      	str	r3, [r7, #4]
}
 80065f0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80065f2:	f7ff fb4d 	bl	8005c90 <xTaskIncrementTick>
 80065f6:	4603      	mov	r3, r0
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d003      	beq.n	8006604 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80065fc:	4b06      	ldr	r3, [pc, #24]	; (8006618 <xPortSysTickHandler+0x40>)
 80065fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006602:	601a      	str	r2, [r3, #0]
 8006604:	2300      	movs	r3, #0
 8006606:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006608:	683b      	ldr	r3, [r7, #0]
 800660a:	f383 8811 	msr	BASEPRI, r3
}
 800660e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006610:	bf00      	nop
 8006612:	3708      	adds	r7, #8
 8006614:	46bd      	mov	sp, r7
 8006616:	bd80      	pop	{r7, pc}
 8006618:	e000ed04 	.word	0xe000ed04

0800661c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800661c:	b480      	push	{r7}
 800661e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006620:	4b0a      	ldr	r3, [pc, #40]	; (800664c <vPortSetupTimerInterrupt+0x30>)
 8006622:	2200      	movs	r2, #0
 8006624:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006626:	4b0a      	ldr	r3, [pc, #40]	; (8006650 <vPortSetupTimerInterrupt+0x34>)
 8006628:	2200      	movs	r2, #0
 800662a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800662c:	4b09      	ldr	r3, [pc, #36]	; (8006654 <vPortSetupTimerInterrupt+0x38>)
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	4a09      	ldr	r2, [pc, #36]	; (8006658 <vPortSetupTimerInterrupt+0x3c>)
 8006632:	fba2 2303 	umull	r2, r3, r2, r3
 8006636:	099b      	lsrs	r3, r3, #6
 8006638:	4a08      	ldr	r2, [pc, #32]	; (800665c <vPortSetupTimerInterrupt+0x40>)
 800663a:	3b01      	subs	r3, #1
 800663c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800663e:	4b03      	ldr	r3, [pc, #12]	; (800664c <vPortSetupTimerInterrupt+0x30>)
 8006640:	2207      	movs	r2, #7
 8006642:	601a      	str	r2, [r3, #0]
}
 8006644:	bf00      	nop
 8006646:	46bd      	mov	sp, r7
 8006648:	bc80      	pop	{r7}
 800664a:	4770      	bx	lr
 800664c:	e000e010 	.word	0xe000e010
 8006650:	e000e018 	.word	0xe000e018
 8006654:	20000004 	.word	0x20000004
 8006658:	10624dd3 	.word	0x10624dd3
 800665c:	e000e014 	.word	0xe000e014

08006660 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006660:	b580      	push	{r7, lr}
 8006662:	b08a      	sub	sp, #40	; 0x28
 8006664:	af00      	add	r7, sp, #0
 8006666:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006668:	2300      	movs	r3, #0
 800666a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800666c:	f7ff fa66 	bl	8005b3c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006670:	4b58      	ldr	r3, [pc, #352]	; (80067d4 <pvPortMalloc+0x174>)
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	2b00      	cmp	r3, #0
 8006676:	d101      	bne.n	800667c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006678:	f000 f910 	bl	800689c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800667c:	4b56      	ldr	r3, [pc, #344]	; (80067d8 <pvPortMalloc+0x178>)
 800667e:	681a      	ldr	r2, [r3, #0]
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	4013      	ands	r3, r2
 8006684:	2b00      	cmp	r3, #0
 8006686:	f040 808e 	bne.w	80067a6 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	2b00      	cmp	r3, #0
 800668e:	d01d      	beq.n	80066cc <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8006690:	2208      	movs	r2, #8
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	4413      	add	r3, r2
 8006696:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	f003 0307 	and.w	r3, r3, #7
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d014      	beq.n	80066cc <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	f023 0307 	bic.w	r3, r3, #7
 80066a8:	3308      	adds	r3, #8
 80066aa:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	f003 0307 	and.w	r3, r3, #7
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d00a      	beq.n	80066cc <pvPortMalloc+0x6c>
	__asm volatile
 80066b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066ba:	f383 8811 	msr	BASEPRI, r3
 80066be:	f3bf 8f6f 	isb	sy
 80066c2:	f3bf 8f4f 	dsb	sy
 80066c6:	617b      	str	r3, [r7, #20]
}
 80066c8:	bf00      	nop
 80066ca:	e7fe      	b.n	80066ca <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d069      	beq.n	80067a6 <pvPortMalloc+0x146>
 80066d2:	4b42      	ldr	r3, [pc, #264]	; (80067dc <pvPortMalloc+0x17c>)
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	687a      	ldr	r2, [r7, #4]
 80066d8:	429a      	cmp	r2, r3
 80066da:	d864      	bhi.n	80067a6 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80066dc:	4b40      	ldr	r3, [pc, #256]	; (80067e0 <pvPortMalloc+0x180>)
 80066de:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80066e0:	4b3f      	ldr	r3, [pc, #252]	; (80067e0 <pvPortMalloc+0x180>)
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80066e6:	e004      	b.n	80066f2 <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80066e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066ea:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80066ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80066f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066f4:	685b      	ldr	r3, [r3, #4]
 80066f6:	687a      	ldr	r2, [r7, #4]
 80066f8:	429a      	cmp	r2, r3
 80066fa:	d903      	bls.n	8006704 <pvPortMalloc+0xa4>
 80066fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	2b00      	cmp	r3, #0
 8006702:	d1f1      	bne.n	80066e8 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006704:	4b33      	ldr	r3, [pc, #204]	; (80067d4 <pvPortMalloc+0x174>)
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800670a:	429a      	cmp	r2, r3
 800670c:	d04b      	beq.n	80067a6 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800670e:	6a3b      	ldr	r3, [r7, #32]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	2208      	movs	r2, #8
 8006714:	4413      	add	r3, r2
 8006716:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800671a:	681a      	ldr	r2, [r3, #0]
 800671c:	6a3b      	ldr	r3, [r7, #32]
 800671e:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006722:	685a      	ldr	r2, [r3, #4]
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	1ad2      	subs	r2, r2, r3
 8006728:	2308      	movs	r3, #8
 800672a:	005b      	lsls	r3, r3, #1
 800672c:	429a      	cmp	r2, r3
 800672e:	d91f      	bls.n	8006770 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006730:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	4413      	add	r3, r2
 8006736:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006738:	69bb      	ldr	r3, [r7, #24]
 800673a:	f003 0307 	and.w	r3, r3, #7
 800673e:	2b00      	cmp	r3, #0
 8006740:	d00a      	beq.n	8006758 <pvPortMalloc+0xf8>
	__asm volatile
 8006742:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006746:	f383 8811 	msr	BASEPRI, r3
 800674a:	f3bf 8f6f 	isb	sy
 800674e:	f3bf 8f4f 	dsb	sy
 8006752:	613b      	str	r3, [r7, #16]
}
 8006754:	bf00      	nop
 8006756:	e7fe      	b.n	8006756 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800675a:	685a      	ldr	r2, [r3, #4]
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	1ad2      	subs	r2, r2, r3
 8006760:	69bb      	ldr	r3, [r7, #24]
 8006762:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006766:	687a      	ldr	r2, [r7, #4]
 8006768:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800676a:	69b8      	ldr	r0, [r7, #24]
 800676c:	f000 f8f8 	bl	8006960 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006770:	4b1a      	ldr	r3, [pc, #104]	; (80067dc <pvPortMalloc+0x17c>)
 8006772:	681a      	ldr	r2, [r3, #0]
 8006774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006776:	685b      	ldr	r3, [r3, #4]
 8006778:	1ad3      	subs	r3, r2, r3
 800677a:	4a18      	ldr	r2, [pc, #96]	; (80067dc <pvPortMalloc+0x17c>)
 800677c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800677e:	4b17      	ldr	r3, [pc, #92]	; (80067dc <pvPortMalloc+0x17c>)
 8006780:	681a      	ldr	r2, [r3, #0]
 8006782:	4b18      	ldr	r3, [pc, #96]	; (80067e4 <pvPortMalloc+0x184>)
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	429a      	cmp	r2, r3
 8006788:	d203      	bcs.n	8006792 <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800678a:	4b14      	ldr	r3, [pc, #80]	; (80067dc <pvPortMalloc+0x17c>)
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	4a15      	ldr	r2, [pc, #84]	; (80067e4 <pvPortMalloc+0x184>)
 8006790:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006794:	685a      	ldr	r2, [r3, #4]
 8006796:	4b10      	ldr	r3, [pc, #64]	; (80067d8 <pvPortMalloc+0x178>)
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	431a      	orrs	r2, r3
 800679c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800679e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80067a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067a2:	2200      	movs	r2, #0
 80067a4:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80067a6:	f7ff f9d7 	bl	8005b58 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80067aa:	69fb      	ldr	r3, [r7, #28]
 80067ac:	f003 0307 	and.w	r3, r3, #7
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d00a      	beq.n	80067ca <pvPortMalloc+0x16a>
	__asm volatile
 80067b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067b8:	f383 8811 	msr	BASEPRI, r3
 80067bc:	f3bf 8f6f 	isb	sy
 80067c0:	f3bf 8f4f 	dsb	sy
 80067c4:	60fb      	str	r3, [r7, #12]
}
 80067c6:	bf00      	nop
 80067c8:	e7fe      	b.n	80067c8 <pvPortMalloc+0x168>
	return pvReturn;
 80067ca:	69fb      	ldr	r3, [r7, #28]
}
 80067cc:	4618      	mov	r0, r3
 80067ce:	3728      	adds	r7, #40	; 0x28
 80067d0:	46bd      	mov	sp, r7
 80067d2:	bd80      	pop	{r7, pc}
 80067d4:	20001200 	.word	0x20001200
 80067d8:	2000120c 	.word	0x2000120c
 80067dc:	20001204 	.word	0x20001204
 80067e0:	200011f8 	.word	0x200011f8
 80067e4:	20001208 	.word	0x20001208

080067e8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80067e8:	b580      	push	{r7, lr}
 80067ea:	b086      	sub	sp, #24
 80067ec:	af00      	add	r7, sp, #0
 80067ee:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d048      	beq.n	800688c <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80067fa:	2308      	movs	r3, #8
 80067fc:	425b      	negs	r3, r3
 80067fe:	697a      	ldr	r2, [r7, #20]
 8006800:	4413      	add	r3, r2
 8006802:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006804:	697b      	ldr	r3, [r7, #20]
 8006806:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006808:	693b      	ldr	r3, [r7, #16]
 800680a:	685a      	ldr	r2, [r3, #4]
 800680c:	4b21      	ldr	r3, [pc, #132]	; (8006894 <vPortFree+0xac>)
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	4013      	ands	r3, r2
 8006812:	2b00      	cmp	r3, #0
 8006814:	d10a      	bne.n	800682c <vPortFree+0x44>
	__asm volatile
 8006816:	f04f 0350 	mov.w	r3, #80	; 0x50
 800681a:	f383 8811 	msr	BASEPRI, r3
 800681e:	f3bf 8f6f 	isb	sy
 8006822:	f3bf 8f4f 	dsb	sy
 8006826:	60fb      	str	r3, [r7, #12]
}
 8006828:	bf00      	nop
 800682a:	e7fe      	b.n	800682a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800682c:	693b      	ldr	r3, [r7, #16]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	2b00      	cmp	r3, #0
 8006832:	d00a      	beq.n	800684a <vPortFree+0x62>
	__asm volatile
 8006834:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006838:	f383 8811 	msr	BASEPRI, r3
 800683c:	f3bf 8f6f 	isb	sy
 8006840:	f3bf 8f4f 	dsb	sy
 8006844:	60bb      	str	r3, [r7, #8]
}
 8006846:	bf00      	nop
 8006848:	e7fe      	b.n	8006848 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800684a:	693b      	ldr	r3, [r7, #16]
 800684c:	685a      	ldr	r2, [r3, #4]
 800684e:	4b11      	ldr	r3, [pc, #68]	; (8006894 <vPortFree+0xac>)
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	4013      	ands	r3, r2
 8006854:	2b00      	cmp	r3, #0
 8006856:	d019      	beq.n	800688c <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006858:	693b      	ldr	r3, [r7, #16]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	2b00      	cmp	r3, #0
 800685e:	d115      	bne.n	800688c <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006860:	693b      	ldr	r3, [r7, #16]
 8006862:	685a      	ldr	r2, [r3, #4]
 8006864:	4b0b      	ldr	r3, [pc, #44]	; (8006894 <vPortFree+0xac>)
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	43db      	mvns	r3, r3
 800686a:	401a      	ands	r2, r3
 800686c:	693b      	ldr	r3, [r7, #16]
 800686e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006870:	f7ff f964 	bl	8005b3c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006874:	693b      	ldr	r3, [r7, #16]
 8006876:	685a      	ldr	r2, [r3, #4]
 8006878:	4b07      	ldr	r3, [pc, #28]	; (8006898 <vPortFree+0xb0>)
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	4413      	add	r3, r2
 800687e:	4a06      	ldr	r2, [pc, #24]	; (8006898 <vPortFree+0xb0>)
 8006880:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006882:	6938      	ldr	r0, [r7, #16]
 8006884:	f000 f86c 	bl	8006960 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8006888:	f7ff f966 	bl	8005b58 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800688c:	bf00      	nop
 800688e:	3718      	adds	r7, #24
 8006890:	46bd      	mov	sp, r7
 8006892:	bd80      	pop	{r7, pc}
 8006894:	2000120c 	.word	0x2000120c
 8006898:	20001204 	.word	0x20001204

0800689c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800689c:	b480      	push	{r7}
 800689e:	b085      	sub	sp, #20
 80068a0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80068a2:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80068a6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80068a8:	4b27      	ldr	r3, [pc, #156]	; (8006948 <prvHeapInit+0xac>)
 80068aa:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	f003 0307 	and.w	r3, r3, #7
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d00c      	beq.n	80068d0 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	3307      	adds	r3, #7
 80068ba:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	f023 0307 	bic.w	r3, r3, #7
 80068c2:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80068c4:	68ba      	ldr	r2, [r7, #8]
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	1ad3      	subs	r3, r2, r3
 80068ca:	4a1f      	ldr	r2, [pc, #124]	; (8006948 <prvHeapInit+0xac>)
 80068cc:	4413      	add	r3, r2
 80068ce:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80068d4:	4a1d      	ldr	r2, [pc, #116]	; (800694c <prvHeapInit+0xb0>)
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80068da:	4b1c      	ldr	r3, [pc, #112]	; (800694c <prvHeapInit+0xb0>)
 80068dc:	2200      	movs	r2, #0
 80068de:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	68ba      	ldr	r2, [r7, #8]
 80068e4:	4413      	add	r3, r2
 80068e6:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80068e8:	2208      	movs	r2, #8
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	1a9b      	subs	r3, r3, r2
 80068ee:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	f023 0307 	bic.w	r3, r3, #7
 80068f6:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	4a15      	ldr	r2, [pc, #84]	; (8006950 <prvHeapInit+0xb4>)
 80068fc:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80068fe:	4b14      	ldr	r3, [pc, #80]	; (8006950 <prvHeapInit+0xb4>)
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	2200      	movs	r2, #0
 8006904:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006906:	4b12      	ldr	r3, [pc, #72]	; (8006950 <prvHeapInit+0xb4>)
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	2200      	movs	r2, #0
 800690c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006912:	683b      	ldr	r3, [r7, #0]
 8006914:	68fa      	ldr	r2, [r7, #12]
 8006916:	1ad2      	subs	r2, r2, r3
 8006918:	683b      	ldr	r3, [r7, #0]
 800691a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800691c:	4b0c      	ldr	r3, [pc, #48]	; (8006950 <prvHeapInit+0xb4>)
 800691e:	681a      	ldr	r2, [r3, #0]
 8006920:	683b      	ldr	r3, [r7, #0]
 8006922:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006924:	683b      	ldr	r3, [r7, #0]
 8006926:	685b      	ldr	r3, [r3, #4]
 8006928:	4a0a      	ldr	r2, [pc, #40]	; (8006954 <prvHeapInit+0xb8>)
 800692a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800692c:	683b      	ldr	r3, [r7, #0]
 800692e:	685b      	ldr	r3, [r3, #4]
 8006930:	4a09      	ldr	r2, [pc, #36]	; (8006958 <prvHeapInit+0xbc>)
 8006932:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006934:	4b09      	ldr	r3, [pc, #36]	; (800695c <prvHeapInit+0xc0>)
 8006936:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800693a:	601a      	str	r2, [r3, #0]
}
 800693c:	bf00      	nop
 800693e:	3714      	adds	r7, #20
 8006940:	46bd      	mov	sp, r7
 8006942:	bc80      	pop	{r7}
 8006944:	4770      	bx	lr
 8006946:	bf00      	nop
 8006948:	200005f8 	.word	0x200005f8
 800694c:	200011f8 	.word	0x200011f8
 8006950:	20001200 	.word	0x20001200
 8006954:	20001208 	.word	0x20001208
 8006958:	20001204 	.word	0x20001204
 800695c:	2000120c 	.word	0x2000120c

08006960 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006960:	b480      	push	{r7}
 8006962:	b085      	sub	sp, #20
 8006964:	af00      	add	r7, sp, #0
 8006966:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006968:	4b27      	ldr	r3, [pc, #156]	; (8006a08 <prvInsertBlockIntoFreeList+0xa8>)
 800696a:	60fb      	str	r3, [r7, #12]
 800696c:	e002      	b.n	8006974 <prvInsertBlockIntoFreeList+0x14>
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	60fb      	str	r3, [r7, #12]
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	687a      	ldr	r2, [r7, #4]
 800697a:	429a      	cmp	r2, r3
 800697c:	d8f7      	bhi.n	800696e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	685b      	ldr	r3, [r3, #4]
 8006986:	68ba      	ldr	r2, [r7, #8]
 8006988:	4413      	add	r3, r2
 800698a:	687a      	ldr	r2, [r7, #4]
 800698c:	429a      	cmp	r2, r3
 800698e:	d108      	bne.n	80069a2 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	685a      	ldr	r2, [r3, #4]
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	685b      	ldr	r3, [r3, #4]
 8006998:	441a      	add	r2, r3
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	685b      	ldr	r3, [r3, #4]
 80069aa:	68ba      	ldr	r2, [r7, #8]
 80069ac:	441a      	add	r2, r3
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	429a      	cmp	r2, r3
 80069b4:	d118      	bne.n	80069e8 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	681a      	ldr	r2, [r3, #0]
 80069ba:	4b14      	ldr	r3, [pc, #80]	; (8006a0c <prvInsertBlockIntoFreeList+0xac>)
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	429a      	cmp	r2, r3
 80069c0:	d00d      	beq.n	80069de <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	685a      	ldr	r2, [r3, #4]
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	685b      	ldr	r3, [r3, #4]
 80069cc:	441a      	add	r2, r3
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	681a      	ldr	r2, [r3, #0]
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	601a      	str	r2, [r3, #0]
 80069dc:	e008      	b.n	80069f0 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80069de:	4b0b      	ldr	r3, [pc, #44]	; (8006a0c <prvInsertBlockIntoFreeList+0xac>)
 80069e0:	681a      	ldr	r2, [r3, #0]
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	601a      	str	r2, [r3, #0]
 80069e6:	e003      	b.n	80069f0 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	681a      	ldr	r2, [r3, #0]
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80069f0:	68fa      	ldr	r2, [r7, #12]
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	429a      	cmp	r2, r3
 80069f6:	d002      	beq.n	80069fe <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	687a      	ldr	r2, [r7, #4]
 80069fc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80069fe:	bf00      	nop
 8006a00:	3714      	adds	r7, #20
 8006a02:	46bd      	mov	sp, r7
 8006a04:	bc80      	pop	{r7}
 8006a06:	4770      	bx	lr
 8006a08:	200011f8 	.word	0x200011f8
 8006a0c:	20001200 	.word	0x20001200

08006a10 <memset>:
 8006a10:	4603      	mov	r3, r0
 8006a12:	4402      	add	r2, r0
 8006a14:	4293      	cmp	r3, r2
 8006a16:	d100      	bne.n	8006a1a <memset+0xa>
 8006a18:	4770      	bx	lr
 8006a1a:	f803 1b01 	strb.w	r1, [r3], #1
 8006a1e:	e7f9      	b.n	8006a14 <memset+0x4>

08006a20 <_reclaim_reent>:
 8006a20:	4b29      	ldr	r3, [pc, #164]	; (8006ac8 <_reclaim_reent+0xa8>)
 8006a22:	b570      	push	{r4, r5, r6, lr}
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	4604      	mov	r4, r0
 8006a28:	4283      	cmp	r3, r0
 8006a2a:	d04b      	beq.n	8006ac4 <_reclaim_reent+0xa4>
 8006a2c:	69c3      	ldr	r3, [r0, #28]
 8006a2e:	b143      	cbz	r3, 8006a42 <_reclaim_reent+0x22>
 8006a30:	68db      	ldr	r3, [r3, #12]
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d144      	bne.n	8006ac0 <_reclaim_reent+0xa0>
 8006a36:	69e3      	ldr	r3, [r4, #28]
 8006a38:	6819      	ldr	r1, [r3, #0]
 8006a3a:	b111      	cbz	r1, 8006a42 <_reclaim_reent+0x22>
 8006a3c:	4620      	mov	r0, r4
 8006a3e:	f000 f86b 	bl	8006b18 <_free_r>
 8006a42:	6961      	ldr	r1, [r4, #20]
 8006a44:	b111      	cbz	r1, 8006a4c <_reclaim_reent+0x2c>
 8006a46:	4620      	mov	r0, r4
 8006a48:	f000 f866 	bl	8006b18 <_free_r>
 8006a4c:	69e1      	ldr	r1, [r4, #28]
 8006a4e:	b111      	cbz	r1, 8006a56 <_reclaim_reent+0x36>
 8006a50:	4620      	mov	r0, r4
 8006a52:	f000 f861 	bl	8006b18 <_free_r>
 8006a56:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8006a58:	b111      	cbz	r1, 8006a60 <_reclaim_reent+0x40>
 8006a5a:	4620      	mov	r0, r4
 8006a5c:	f000 f85c 	bl	8006b18 <_free_r>
 8006a60:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006a62:	b111      	cbz	r1, 8006a6a <_reclaim_reent+0x4a>
 8006a64:	4620      	mov	r0, r4
 8006a66:	f000 f857 	bl	8006b18 <_free_r>
 8006a6a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8006a6c:	b111      	cbz	r1, 8006a74 <_reclaim_reent+0x54>
 8006a6e:	4620      	mov	r0, r4
 8006a70:	f000 f852 	bl	8006b18 <_free_r>
 8006a74:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8006a76:	b111      	cbz	r1, 8006a7e <_reclaim_reent+0x5e>
 8006a78:	4620      	mov	r0, r4
 8006a7a:	f000 f84d 	bl	8006b18 <_free_r>
 8006a7e:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8006a80:	b111      	cbz	r1, 8006a88 <_reclaim_reent+0x68>
 8006a82:	4620      	mov	r0, r4
 8006a84:	f000 f848 	bl	8006b18 <_free_r>
 8006a88:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8006a8a:	b111      	cbz	r1, 8006a92 <_reclaim_reent+0x72>
 8006a8c:	4620      	mov	r0, r4
 8006a8e:	f000 f843 	bl	8006b18 <_free_r>
 8006a92:	6a23      	ldr	r3, [r4, #32]
 8006a94:	b1b3      	cbz	r3, 8006ac4 <_reclaim_reent+0xa4>
 8006a96:	4620      	mov	r0, r4
 8006a98:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8006a9c:	4718      	bx	r3
 8006a9e:	5949      	ldr	r1, [r1, r5]
 8006aa0:	b941      	cbnz	r1, 8006ab4 <_reclaim_reent+0x94>
 8006aa2:	3504      	adds	r5, #4
 8006aa4:	69e3      	ldr	r3, [r4, #28]
 8006aa6:	2d80      	cmp	r5, #128	; 0x80
 8006aa8:	68d9      	ldr	r1, [r3, #12]
 8006aaa:	d1f8      	bne.n	8006a9e <_reclaim_reent+0x7e>
 8006aac:	4620      	mov	r0, r4
 8006aae:	f000 f833 	bl	8006b18 <_free_r>
 8006ab2:	e7c0      	b.n	8006a36 <_reclaim_reent+0x16>
 8006ab4:	680e      	ldr	r6, [r1, #0]
 8006ab6:	4620      	mov	r0, r4
 8006ab8:	f000 f82e 	bl	8006b18 <_free_r>
 8006abc:	4631      	mov	r1, r6
 8006abe:	e7ef      	b.n	8006aa0 <_reclaim_reent+0x80>
 8006ac0:	2500      	movs	r5, #0
 8006ac2:	e7ef      	b.n	8006aa4 <_reclaim_reent+0x84>
 8006ac4:	bd70      	pop	{r4, r5, r6, pc}
 8006ac6:	bf00      	nop
 8006ac8:	20000060 	.word	0x20000060

08006acc <__libc_init_array>:
 8006acc:	b570      	push	{r4, r5, r6, lr}
 8006ace:	2600      	movs	r6, #0
 8006ad0:	4d0c      	ldr	r5, [pc, #48]	; (8006b04 <__libc_init_array+0x38>)
 8006ad2:	4c0d      	ldr	r4, [pc, #52]	; (8006b08 <__libc_init_array+0x3c>)
 8006ad4:	1b64      	subs	r4, r4, r5
 8006ad6:	10a4      	asrs	r4, r4, #2
 8006ad8:	42a6      	cmp	r6, r4
 8006ada:	d109      	bne.n	8006af0 <__libc_init_array+0x24>
 8006adc:	f000 f870 	bl	8006bc0 <_init>
 8006ae0:	2600      	movs	r6, #0
 8006ae2:	4d0a      	ldr	r5, [pc, #40]	; (8006b0c <__libc_init_array+0x40>)
 8006ae4:	4c0a      	ldr	r4, [pc, #40]	; (8006b10 <__libc_init_array+0x44>)
 8006ae6:	1b64      	subs	r4, r4, r5
 8006ae8:	10a4      	asrs	r4, r4, #2
 8006aea:	42a6      	cmp	r6, r4
 8006aec:	d105      	bne.n	8006afa <__libc_init_array+0x2e>
 8006aee:	bd70      	pop	{r4, r5, r6, pc}
 8006af0:	f855 3b04 	ldr.w	r3, [r5], #4
 8006af4:	4798      	blx	r3
 8006af6:	3601      	adds	r6, #1
 8006af8:	e7ee      	b.n	8006ad8 <__libc_init_array+0xc>
 8006afa:	f855 3b04 	ldr.w	r3, [r5], #4
 8006afe:	4798      	blx	r3
 8006b00:	3601      	adds	r6, #1
 8006b02:	e7f2      	b.n	8006aea <__libc_init_array+0x1e>
 8006b04:	08006c58 	.word	0x08006c58
 8006b08:	08006c58 	.word	0x08006c58
 8006b0c:	08006c58 	.word	0x08006c58
 8006b10:	08006c5c 	.word	0x08006c5c

08006b14 <__retarget_lock_acquire_recursive>:
 8006b14:	4770      	bx	lr

08006b16 <__retarget_lock_release_recursive>:
 8006b16:	4770      	bx	lr

08006b18 <_free_r>:
 8006b18:	b538      	push	{r3, r4, r5, lr}
 8006b1a:	4605      	mov	r5, r0
 8006b1c:	2900      	cmp	r1, #0
 8006b1e:	d040      	beq.n	8006ba2 <_free_r+0x8a>
 8006b20:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006b24:	1f0c      	subs	r4, r1, #4
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	bfb8      	it	lt
 8006b2a:	18e4      	addlt	r4, r4, r3
 8006b2c:	f000 f83c 	bl	8006ba8 <__malloc_lock>
 8006b30:	4a1c      	ldr	r2, [pc, #112]	; (8006ba4 <_free_r+0x8c>)
 8006b32:	6813      	ldr	r3, [r2, #0]
 8006b34:	b933      	cbnz	r3, 8006b44 <_free_r+0x2c>
 8006b36:	6063      	str	r3, [r4, #4]
 8006b38:	6014      	str	r4, [r2, #0]
 8006b3a:	4628      	mov	r0, r5
 8006b3c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006b40:	f000 b838 	b.w	8006bb4 <__malloc_unlock>
 8006b44:	42a3      	cmp	r3, r4
 8006b46:	d908      	bls.n	8006b5a <_free_r+0x42>
 8006b48:	6820      	ldr	r0, [r4, #0]
 8006b4a:	1821      	adds	r1, r4, r0
 8006b4c:	428b      	cmp	r3, r1
 8006b4e:	bf01      	itttt	eq
 8006b50:	6819      	ldreq	r1, [r3, #0]
 8006b52:	685b      	ldreq	r3, [r3, #4]
 8006b54:	1809      	addeq	r1, r1, r0
 8006b56:	6021      	streq	r1, [r4, #0]
 8006b58:	e7ed      	b.n	8006b36 <_free_r+0x1e>
 8006b5a:	461a      	mov	r2, r3
 8006b5c:	685b      	ldr	r3, [r3, #4]
 8006b5e:	b10b      	cbz	r3, 8006b64 <_free_r+0x4c>
 8006b60:	42a3      	cmp	r3, r4
 8006b62:	d9fa      	bls.n	8006b5a <_free_r+0x42>
 8006b64:	6811      	ldr	r1, [r2, #0]
 8006b66:	1850      	adds	r0, r2, r1
 8006b68:	42a0      	cmp	r0, r4
 8006b6a:	d10b      	bne.n	8006b84 <_free_r+0x6c>
 8006b6c:	6820      	ldr	r0, [r4, #0]
 8006b6e:	4401      	add	r1, r0
 8006b70:	1850      	adds	r0, r2, r1
 8006b72:	4283      	cmp	r3, r0
 8006b74:	6011      	str	r1, [r2, #0]
 8006b76:	d1e0      	bne.n	8006b3a <_free_r+0x22>
 8006b78:	6818      	ldr	r0, [r3, #0]
 8006b7a:	685b      	ldr	r3, [r3, #4]
 8006b7c:	4408      	add	r0, r1
 8006b7e:	6010      	str	r0, [r2, #0]
 8006b80:	6053      	str	r3, [r2, #4]
 8006b82:	e7da      	b.n	8006b3a <_free_r+0x22>
 8006b84:	d902      	bls.n	8006b8c <_free_r+0x74>
 8006b86:	230c      	movs	r3, #12
 8006b88:	602b      	str	r3, [r5, #0]
 8006b8a:	e7d6      	b.n	8006b3a <_free_r+0x22>
 8006b8c:	6820      	ldr	r0, [r4, #0]
 8006b8e:	1821      	adds	r1, r4, r0
 8006b90:	428b      	cmp	r3, r1
 8006b92:	bf01      	itttt	eq
 8006b94:	6819      	ldreq	r1, [r3, #0]
 8006b96:	685b      	ldreq	r3, [r3, #4]
 8006b98:	1809      	addeq	r1, r1, r0
 8006b9a:	6021      	streq	r1, [r4, #0]
 8006b9c:	6063      	str	r3, [r4, #4]
 8006b9e:	6054      	str	r4, [r2, #4]
 8006ba0:	e7cb      	b.n	8006b3a <_free_r+0x22>
 8006ba2:	bd38      	pop	{r3, r4, r5, pc}
 8006ba4:	2000134c 	.word	0x2000134c

08006ba8 <__malloc_lock>:
 8006ba8:	4801      	ldr	r0, [pc, #4]	; (8006bb0 <__malloc_lock+0x8>)
 8006baa:	f7ff bfb3 	b.w	8006b14 <__retarget_lock_acquire_recursive>
 8006bae:	bf00      	nop
 8006bb0:	20001348 	.word	0x20001348

08006bb4 <__malloc_unlock>:
 8006bb4:	4801      	ldr	r0, [pc, #4]	; (8006bbc <__malloc_unlock+0x8>)
 8006bb6:	f7ff bfae 	b.w	8006b16 <__retarget_lock_release_recursive>
 8006bba:	bf00      	nop
 8006bbc:	20001348 	.word	0x20001348

08006bc0 <_init>:
 8006bc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006bc2:	bf00      	nop
 8006bc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006bc6:	bc08      	pop	{r3}
 8006bc8:	469e      	mov	lr, r3
 8006bca:	4770      	bx	lr

08006bcc <_fini>:
 8006bcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006bce:	bf00      	nop
 8006bd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006bd2:	bc08      	pop	{r3}
 8006bd4:	469e      	mov	lr, r3
 8006bd6:	4770      	bx	lr
